{"file_contents":{"src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<\"nav\">) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<\"ol\">) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        \"text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-item\"\n      className={cn(\"inline-flex items-center gap-1.5\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"breadcrumb-link\"\n      className={cn(\"hover:text-foreground transition-colors\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"text-foreground font-normal\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"[&>svg]:size-3.5\", className)}\n      {...props}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  )\n}\n\nfunction BreadcrumbEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2357},"src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { GripVerticalIcon } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ResizablePanelGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {\n  return (\n    <ResizablePrimitive.PanelGroup\n      data-slot=\"resizable-panel-group\"\n      className={cn(\n        \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ResizablePanel({\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {\n  return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />\n}\n\nfunction ResizableHandle({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) {\n  return (\n    <ResizablePrimitive.PanelResizeHandle\n      data-slot=\"resizable-handle\"\n      className={cn(\n        \"bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n        className\n      )}\n      {...props}\n    >\n      {withHandle && (\n        <div className=\"bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border\">\n          <GripVerticalIcon className=\"size-2.5\" />\n        </div>\n      )}\n    </ResizablePrimitive.PanelResizeHandle>\n  )\n}\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":2028},"src/i18n/request.ts":{"content":"import { getRequestConfig } from 'next-intl/server';\nimport { cookies } from 'next/headers';\n\nexport default getRequestConfig(async () => {\n  const cookieStore = await cookies();\n  const localeCookie = cookieStore.get('NEXT_LOCALE');\n  const locale = localeCookie?.value || 'id';\n\n  return {\n    locale,\n    messages: (await import(`../../messages/${locale}.json`)).default\n  };\n});\n","size_bytes":383},"src/app/admin/dashboard/packages/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Edit, Trash2, X } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { PackageWithCity, City } from \"@/types\";\n\nexport default function PackagesManagementPage() {\n  const [packages, setPackages] = useState<PackageWithCity[]>([]);\n  const [cities, setCities] = useState<City[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingPackage, setEditingPackage] = useState<PackageWithCity | null>(null);\n  const [formData, setFormData] = useState({\n    cityId: \"\",\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    durationDays: \"\",\n    imageUrl: \"\",\n    features: \"\",\n  });\n  const [file, setFile] = useState<File | null>(null);\n\n  useEffect(() => {\n    loadPackages();\n    loadCities();\n  }, []);\n\n  const loadPackages = async () => {\n    try {\n      const response = await fetch('/api/packages');\n      if (!response.ok) throw new Error('Failed to load packages');\n      const data = await response.json();\n      setPackages(data || []);\n    } catch (error) {\n      console.error(\"Error loading packages:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadCities = async () => {\n    try {\n      const response = await fetch('/api/cities');\n      if (!response.ok) throw new Error('Failed to load cities');\n      const data = await response.json();\n      setCities(data || []);\n    } catch (error) {\n      console.error(\"Error loading cities:\", error);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const featuresArray = formData.features.split('\\n').filter(f => f.trim());\n\n    try {\n      if (editingPackage) {\n        if (file) {\n          const fd = new FormData();\n          fd.append('cityId', formData.cityId);\n          fd.append('name', formData.name);\n          fd.append('description', formData.description);\n          fd.append('price', String(parseFloat(formData.price)));\n          fd.append('durationDays', String(parseInt(formData.durationDays)));\n          fd.append('features', featuresArray.join('\\n'));\n          fd.append('image', file);\n          const response = await fetch(`/api/packages/${editingPackage.id}`, { method: 'PUT', body: fd });\n          if (!response.ok) throw new Error('Failed to update package');\n        } else {\n          const payload = {\n            cityId: formData.cityId,\n            name: formData.name,\n            description: formData.description,\n            price: parseFloat(formData.price),\n            durationDays: parseInt(formData.durationDays),\n            imageUrl: formData.imageUrl,\n            features: featuresArray,\n          };\n          const response = await fetch(`/api/packages/${editingPackage.id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n          });\n          if (!response.ok) throw new Error('Failed to update package');\n        }\n      } else {\n        if (file) {\n          const fd = new FormData();\n          fd.append('cityId', formData.cityId);\n          fd.append('name', formData.name);\n          fd.append('description', formData.description);\n          fd.append('price', String(parseFloat(formData.price)));\n          fd.append('durationDays', String(parseInt(formData.durationDays)));\n          fd.append('features', featuresArray.join('\\n'));\n          fd.append('image', file);\n          const response = await fetch('/api/packages', { method: 'POST', body: fd });\n          if (!response.ok) throw new Error('Failed to create package');\n        } else {\n          const payload = {\n            cityId: formData.cityId,\n            name: formData.name,\n            description: formData.description,\n            price: parseFloat(formData.price),\n            durationDays: parseInt(formData.durationDays),\n            imageUrl: formData.imageUrl,\n            features: featuresArray,\n          };\n          const response = await fetch('/api/packages', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n          });\n          if (!response.ok) throw new Error('Failed to create package');\n        }\n      }\n\n      resetForm();\n      loadPackages();\n    } catch (error) {\n      console.error(\"Error saving package:\", error);\n      alert(\"Failed to save package\");\n    }\n  };\n\n  const handleEdit = (pkg: PackageWithCity) => {\n    setEditingPackage(pkg);\n    setFormData({\n      cityId: pkg.cityId,\n      name: pkg.name,\n      description: pkg.description,\n      price: pkg.price.toString(),\n      durationDays: pkg.durationDays.toString(),\n      imageUrl: pkg.imageUrl,\n      features: Array.isArray(pkg.features) ? pkg.features.join('\\n') : '',\n    });\n    setFile(null);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm(\"Are you sure you want to delete this package?\")) return;\n\n    try {\n      const response = await fetch(`/api/packages/${id}`, { method: 'DELETE' });\n      if (!response.ok) throw new Error('Failed to delete package');\n      loadPackages();\n    } catch (error) {\n      console.error(\"Error deleting package:\", error);\n      alert(\"Failed to delete package\");\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      cityId: \"\",\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      durationDays: \"\",\n      imageUrl: \"\",\n      features: \"\",\n    });\n    setFile(null);\n    setEditingPackage(null);\n    setShowForm(false);\n  };\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center p-12\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Packages Management</h1>\n          <p className=\"text-muted-foreground\">Manage travel packages</p>\n        </div>\n        <Button onClick={() => setShowForm(true)}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Package\n        </Button>\n      </div>\n\n      {showForm && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>{editingPackage ? \"Edit Package\" : \"Add New Package\"}</CardTitle>\n              <Button variant=\"ghost\" size=\"icon\" onClick={resetForm}>\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <label className=\"text-sm font-medium\">City</label>\n                  <Select value={formData.cityId} onValueChange={(value) => setFormData({ ...formData, cityId: value })}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a city\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {cities.map((city) => (\n                        <SelectItem key={city.id} value={city.id}>\n                          {city.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Package Name</label>\n                  <Input\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Price (USD)</label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.price}\n                    onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Duration (Days)</label>\n                  <Input\n                    type=\"number\"\n                    value={formData.durationDays}\n                    onChange={(e) => setFormData({ ...formData, durationDays: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium\">Image URL (optional)</label>\n                  <Input\n                    value={formData.imageUrl}\n                    onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                    placeholder=\"https://example.com/image.jpg\"\n                  />\n                  <div className=\"mt-3\">\n                    <label className=\"text-sm font-medium\">Or Upload Image</label>\n                    <Input type=\"file\" accept=\"image/*\" onChange={(e) => setFile(e.target.files?.[0] || null)} />\n                    {file && (\n                      <p className=\"mt-1 text-xs text-gray-500\">Selected: {file.name}</p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium\">Description</label>\n                  <Textarea\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    rows={3}\n                  />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium\">Features (one per line)</label>\n                  <Textarea\n                    value={formData.features}\n                    onChange={(e) => setFormData({ ...formData, features: e.target.value })}\n                    rows={4}\n                    placeholder=\"Free WiFi&#10;Breakfast included&#10;Airport pickup\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\">\n                  {editingPackage ? \"Update\" : \"Create\"} Package\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {packages.map((pkg) => (\n          <Card key={pkg.id}>\n            <CardContent className=\"p-0\">\n              {pkg.imageUrl && (\n                <div className=\"relative h-48 w-full\">\n                  <Image\n                    src={pkg.imageUrl}\n                    alt={pkg.name}\n                    fill\n                    className=\"rounded-t-lg object-cover\"\n                  />\n                </div>\n              )}\n              <div className=\"p-4 space-y-2\">\n                <h3 className=\"font-bold text-lg\">{pkg.name}</h3>\n                <p className=\"text-sm text-muted-foreground\">{pkg.city.name}</p>\n                <p className=\"text-sm line-clamp-2\">{pkg.description}</p>\n                <div className=\"flex items-center justify-between pt-2\">\n                  <div>\n                    <p className=\"text-2xl font-bold\">${pkg.price}</p>\n                    <p className=\"text-xs text-muted-foreground\">{pkg.durationDays} days</p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(pkg)}>\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button size=\"sm\" variant=\"destructive\" onClick={() => handleDelete(pkg.id)}>\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {packages.length === 0 && !showForm && (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-gray-600\">No packages found. Add your first package to get started.</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":12748},"src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/components/ui/input-otp.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { MinusIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\n        \"flex items-center gap-2 has-disabled:opacity-50\",\n        containerClassName\n      )}\n      className={cn(\"disabled:cursor-not-allowed\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"input-otp-group\"\n      className={cn(\"flex items-center\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  index: number\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        \"data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2254},"src/app/admin/dashboard/destinations/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Plus, Edit, Trash2, X } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { PopularDestination } from \"@/types\";\n\nexport default function DestinationsPage() {\n  const [destinations, setDestinations] = useState<PopularDestination[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingDestination, setEditingDestination] = useState<PopularDestination | null>(null);\n  const [formData, setFormData] = useState({\n    city: \"\",\n    country: \"\",\n    airportCode: \"\",\n    imageUrl: \"\",\n    description: \"\",\n    isActive: true,\n    order: \"\",\n  });\n\n  useEffect(() => {\n    loadDestinations();\n  }, []);\n\n  const loadDestinations = async () => {\n    try {\n      const response = await fetch('/api/destinations');\n      if (!response.ok) throw new Error('Failed to load destinations');\n      const data = await response.json();\n      setDestinations(data || []);\n    } catch (error) {\n      console.error(\"Error loading destinations:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      const payload = {\n        city: formData.city,\n        country: formData.country,\n        airportCode: formData.airportCode.toUpperCase(),\n        imageUrl: formData.imageUrl,\n        description: formData.description || undefined,\n        isActive: formData.isActive,\n        order: parseInt(formData.order) || 0,\n      };\n\n      if (editingDestination) {\n        const response = await fetch(`/api/destinations/${editingDestination.id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(payload),\n        });\n        if (!response.ok) throw new Error('Failed to update destination');\n      } else {\n        const response = await fetch('/api/destinations', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(payload),\n        });\n        if (!response.ok) throw new Error('Failed to create destination');\n      }\n\n      resetForm();\n      loadDestinations();\n    } catch (error) {\n      console.error(\"Error saving destination:\", error);\n      alert(\"Failed to save destination\");\n    }\n  };\n\n  const handleEdit = (destination: PopularDestination) => {\n    setEditingDestination(destination);\n    setFormData({\n      city: destination.city,\n      country: destination.country,\n      airportCode: destination.airportCode,\n      imageUrl: destination.imageUrl,\n      description: destination.description || \"\",\n      isActive: destination.isActive,\n      order: destination.order.toString(),\n    });\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm(\"Are you sure you want to delete this destination?\")) return;\n\n    try {\n      const response = await fetch(`/api/destinations/${id}`, { method: 'DELETE' });\n      if (!response.ok) throw new Error('Failed to delete destination');\n      loadDestinations();\n    } catch (error) {\n      console.error(\"Error deleting destination:\", error);\n      alert(\"Failed to delete destination\");\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      city: \"\",\n      country: \"\",\n      airportCode: \"\",\n      imageUrl: \"\",\n      description: \"\",\n      isActive: true,\n      order: \"\",\n    });\n    setEditingDestination(null);\n    setShowForm(false);\n  };\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center p-12\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Popular Destinations Management</h1>\n          <p className=\"text-muted-foreground\">Manage popular flight destinations</p>\n        </div>\n        <Button onClick={() => setShowForm(true)}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Destination\n        </Button>\n      </div>\n\n      {showForm && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>{editingDestination ? \"Edit Destination\" : \"Add New Destination\"}</CardTitle>\n              <Button variant=\"ghost\" size=\"icon\" onClick={resetForm}>\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <label className=\"text-sm font-medium\">City</label>\n                  <Input\n                    value={formData.city}\n                    onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Country</label>\n                  <Input\n                    value={formData.country}\n                    onChange={(e) => setFormData({ ...formData, country: e.target.value })}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Airport Code (IATA)</label>\n                  <Input\n                    value={formData.airportCode}\n                    onChange={(e) => setFormData({ ...formData, airportCode: e.target.value })}\n                    placeholder=\"e.g., JFK, LAX, DXB\"\n                    maxLength={3}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Order</label>\n                  <Input\n                    type=\"number\"\n                    value={formData.order}\n                    onChange={(e) => setFormData({ ...formData, order: e.target.value })}\n                    placeholder=\"0\"\n                  />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium\">Image URL</label>\n                  <Input\n                    value={formData.imageUrl}\n                    onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                    placeholder=\"https://example.com/image.jpg\"\n                    required\n                  />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium\">Description (Optional)</label>\n                  <Textarea\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    rows={3}\n                    placeholder=\"Brief description of the destination\"\n                  />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                  />\n                  <label className=\"text-sm font-medium\">Active</label>\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\">\n                  {editingDestination ? \"Update\" : \"Create\"} Destination\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {destinations.map((destination) => (\n          <Card key={destination.id}>\n            <CardContent className=\"p-0\">\n              {destination.imageUrl && (\n                <div className=\"relative h-48 w-full\">\n                  <Image\n                    src={destination.imageUrl}\n                    alt={`${destination.city}, ${destination.country}`}\n                    fill\n                    className=\"rounded-t-lg object-cover\"\n                  />\n                </div>\n              )}\n              <div className=\"p-4 space-y-2\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"font-bold text-lg\">{destination.city}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{destination.country}</p>\n                  </div>\n                  <span className={`text-xs px-2 py-1 rounded ${destination.isActive ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'}`}>\n                    {destination.isActive ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-xs font-mono bg-gray-100 px-2 py-1 rounded\">{destination.airportCode}</span>\n                  <span className=\"text-xs text-muted-foreground\">Order: {destination.order}</span>\n                </div>\n                {destination.description && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\">{destination.description}</p>\n                )}\n                <div className=\"flex gap-2 pt-2\">\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(destination)}>\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"destructive\" onClick={() => handleDelete(destination.id)}>\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {destinations.length === 0 && !showForm && (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-gray-600\">No destinations found. Add your first destination to get started.</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":10465},"src/components/ui/empty.tsx":{"content":"import { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Empty({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"empty\"\n      className={cn(\n        \"flex min-w-0 flex-1 flex-col items-center justify-center gap-6 rounded-lg border-dashed p-6 text-center text-balance md:p-12\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction EmptyHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"empty-header\"\n      className={cn(\n        \"flex max-w-sm flex-col items-center gap-2 text-center\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nconst emptyMediaVariants = cva(\n  \"flex shrink-0 items-center justify-center mb-2 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        icon: \"bg-muted text-foreground flex size-10 shrink-0 items-center justify-center rounded-lg [&_svg:not([class*='size-'])]:size-6\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction EmptyMedia({\n  className,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof emptyMediaVariants>) {\n  return (\n    <div\n      data-slot=\"empty-icon\"\n      data-variant={variant}\n      className={cn(emptyMediaVariants({ variant, className }))}\n      {...props}\n    />\n  )\n}\n\nfunction EmptyTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"empty-title\"\n      className={cn(\"text-lg font-medium tracking-tight\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction EmptyDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  return (\n    <div\n      data-slot=\"empty-description\"\n      className={cn(\n        \"text-muted-foreground [&>a:hover]:text-primary text-sm/relaxed [&>a]:underline [&>a]:underline-offset-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction EmptyContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"empty-content\"\n      className={cn(\n        \"flex w-full max-w-sm min-w-0 flex-col items-center gap-4 text-sm text-balance\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Empty,\n  EmptyHeader,\n  EmptyTitle,\n  EmptyDescription,\n  EmptyContent,\n  EmptyMedia,\n}\n","size_bytes":2396},"src/components/hotels/hotel-results.tsx":{"content":"\"use client\";\n\nimport { MapPin, Star, Wifi, Coffee, Waves, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport Image from \"next/image\";\n\nconst hotelResults = [\n  {\n    id: 1,\n    name: \"The Grand Plaza Hotel\",\n    location: \"Downtown Los Angeles, CA\",\n    rating: 4.8,\n    reviews: 328,\n    stars: 5,\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-985638-pexels-photo-297983.jpeg\",\n    amenities: [\"Free WiFi\", \"Pool\", \"Restaurant\"],\n    price: 189,\n    type: \"Luxury\",\n  },\n  {\n    id: 2,\n    name: \"Seaside Resort & Spa\",\n    location: \"Santa Monica, CA\",\n    rating: 4.9,\n    reviews: 512,\n    stars: 5,\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-535755-pexels-photo-14024792.jpeg\",\n    amenities: [\"Free WiFi\", \"Beach Access\", \"Spa\"],\n    price: 249,\n    type: \"Resort\",\n  },\n  {\n    id: 3,\n    name: \"Budget Inn Downtown\",\n    location: \"Central LA, CA\",\n    rating: 4.2,\n    reviews: 156,\n    stars: 3,\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-665191-pexels-photo-13312426.jpeg\",\n    amenities: [\"Free WiFi\", \"Parking\"],\n    price: 79,\n    type: \"Budget\",\n  },\n  {\n    id: 4,\n    name: \"Boutique Garden Hotel\",\n    location: \"West Hollywood, CA\",\n    rating: 4.7,\n    reviews: 289,\n    stars: 4,\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-622162-pexels-photo-6243853.jpeg\",\n    amenities: [\"Free WiFi\", \"Garden\", \"Breakfast\"],\n    price: 159,\n    type: \"Boutique\",\n  },\n];\n\nexport default function HotelResults() {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl font-bold text-foreground\">\n          Available Hotels ({hotelResults.length})\n        </h2>\n        <select className=\"border border-border rounded-md px-4 py-2 text-sm\">\n          <option>Recommended</option>\n          <option>Price: Low to High</option>\n          <option>Price: High to Low</option>\n          <option>Rating: High to Low</option>\n        </select>\n      </div>\n\n      {hotelResults.map((hotel) => (\n        <div\n          key={hotel.id}\n          className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-12 gap-0\">\n            {/* Hotel Image */}\n            <div className=\"md:col-span-4 relative h-64 md:h-auto\">\n              <Image\n                src={hotel.image}\n                alt={hotel.name}\n                fill\n                className=\"object-cover\"\n              />\n              <button className=\"absolute top-4 right-4 bg-white rounded-full p-2 hover:bg-gray-100 transition-colors\">\n                <Heart className=\"h-5 w-5 text-gray-600\" />\n              </button>\n              <span className=\"absolute top-4 left-4 bg-primary text-primary-foreground px-3 py-1 rounded-md text-sm font-semibold\">\n                {hotel.type}\n              </span>\n            </div>\n\n            {/* Hotel Details */}\n            <div className=\"md:col-span-8 p-6\">\n              <div className=\"flex flex-col h-full justify-between\">\n                <div>\n                  {/* Header */}\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <h3 className=\"text-xl font-bold text-foreground mb-1\">\n                        {hotel.name}\n                      </h3>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <MapPin className=\"h-4 w-4\" />\n                        <span>{hotel.location}</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      {Array.from({ length: hotel.stars }).map((_, i) => (\n                        <Star\n                          key={i}\n                          className=\"h-4 w-4 fill-star-rating text-star-rating\"\n                        />\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Rating */}\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <div className=\"bg-primary text-primary-foreground px-2 py-1 rounded-md font-bold text-sm\">\n                      {hotel.rating}\n                    </div>\n                    <span className=\"text-sm text-muted-foreground\">\n                      ({hotel.reviews} reviews)\n                    </span>\n                  </div>\n\n                  {/* Amenities */}\n                  <div className=\"flex flex-wrap gap-3 mb-4\">\n                    {hotel.amenities.map((amenity) => (\n                      <span\n                        key={amenity}\n                        className=\"flex items-center gap-1 text-sm text-muted-foreground\"\n                      >\n                        {amenity === \"Free WiFi\" && <Wifi className=\"h-4 w-4\" />}\n                        {amenity === \"Pool\" && <Waves className=\"h-4 w-4\" />}\n                        {amenity === \"Beach Access\" && <Waves className=\"h-4 w-4\" />}\n                        {amenity === \"Restaurant\" && <Coffee className=\"h-4 w-4\" />}\n                        {amenity}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Price & CTA */}\n                <div className=\"flex items-end justify-between pt-4 border-t\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-1\">\n                      Starting from\n                    </p>\n                    <p className=\"text-3xl font-bold text-primary\">\n                      ${hotel.price}\n                      <span className=\"text-base text-muted-foreground font-normal\">\n                        /night\n                      </span>\n                    </p>\n                  </div>\n                  <Button className=\"bg-primary hover:bg-primary/90 text-primary-foreground\">\n                    View Details\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","size_bytes":6628},"src/components/ui/alert-dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn(\"text-lg font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: \"outline\" }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3864},"src/components/ui/input-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\n\nfunction InputGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"input-group\"\n      role=\"group\"\n      className={cn(\n        \"group/input-group border-input dark:bg-input/30 relative flex w-full items-center rounded-md border shadow-xs transition-[color,box-shadow] outline-none\",\n        \"h-9 min-w-0 has-[>textarea]:h-auto\",\n\n        // Variants based on alignment.\n        \"has-[>[data-align=inline-start]]:[&>input]:pl-2\",\n        \"has-[>[data-align=inline-end]]:[&>input]:pr-2\",\n        \"has-[>[data-align=block-start]]:h-auto has-[>[data-align=block-start]]:flex-col has-[>[data-align=block-start]]:[&>input]:pb-3\",\n        \"has-[>[data-align=block-end]]:h-auto has-[>[data-align=block-end]]:flex-col has-[>[data-align=block-end]]:[&>input]:pt-3\",\n\n        // Focus state.\n        \"has-[[data-slot=input-group-control]:focus-visible]:border-ring has-[[data-slot=input-group-control]:focus-visible]:ring-ring/50 has-[[data-slot=input-group-control]:focus-visible]:ring-[3px]\",\n\n        // Error state.\n        \"has-[[data-slot][aria-invalid=true]]:ring-destructive/20 has-[[data-slot][aria-invalid=true]]:border-destructive dark:has-[[data-slot][aria-invalid=true]]:ring-destructive/40\",\n\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nconst inputGroupAddonVariants = cva(\n  \"text-muted-foreground flex h-auto cursor-text items-center justify-center gap-2 py-1.5 text-sm font-medium select-none [&>svg:not([class*='size-'])]:size-4 [&>kbd]:rounded-[calc(var(--radius)-5px)] group-data-[disabled=true]/input-group:opacity-50\",\n  {\n    variants: {\n      align: {\n        \"inline-start\":\n          \"order-first pl-3 has-[>button]:ml-[-0.45rem] has-[>kbd]:ml-[-0.35rem]\",\n        \"inline-end\":\n          \"order-last pr-3 has-[>button]:mr-[-0.45rem] has-[>kbd]:mr-[-0.35rem]\",\n        \"block-start\":\n          \"order-first w-full justify-start px-3 pt-3 [.border-b]:pb-3 group-has-[>input]/input-group:pt-2.5\",\n        \"block-end\":\n          \"order-last w-full justify-start px-3 pb-3 [.border-t]:pt-3 group-has-[>input]/input-group:pb-2.5\",\n      },\n    },\n    defaultVariants: {\n      align: \"inline-start\",\n    },\n  }\n)\n\nfunction InputGroupAddon({\n  className,\n  align = \"inline-start\",\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof inputGroupAddonVariants>) {\n  return (\n    <div\n      role=\"group\"\n      data-slot=\"input-group-addon\"\n      data-align={align}\n      className={cn(inputGroupAddonVariants({ align }), className)}\n      onClick={(e) => {\n        if ((e.target as HTMLElement).closest(\"button\")) {\n          return\n        }\n        e.currentTarget.parentElement?.querySelector(\"input\")?.focus()\n      }}\n      {...props}\n    />\n  )\n}\n\nconst inputGroupButtonVariants = cva(\n  \"text-sm shadow-none flex gap-2 items-center\",\n  {\n    variants: {\n      size: {\n        xs: \"h-6 gap-1 px-2 rounded-[calc(var(--radius)-5px)] [&>svg:not([class*='size-'])]:size-3.5 has-[>svg]:px-2\",\n        sm: \"h-8 px-2.5 gap-1.5 rounded-md has-[>svg]:px-2.5\",\n        \"icon-xs\":\n          \"size-6 rounded-[calc(var(--radius)-5px)] p-0 has-[>svg]:p-0\",\n        \"icon-sm\": \"size-8 p-0 has-[>svg]:p-0\",\n      },\n    },\n    defaultVariants: {\n      size: \"xs\",\n    },\n  }\n)\n\nfunction InputGroupButton({\n  className,\n  type = \"button\",\n  variant = \"ghost\",\n  size = \"xs\",\n  ...props\n}: Omit<React.ComponentProps<typeof Button>, \"size\"> &\n  VariantProps<typeof inputGroupButtonVariants>) {\n  return (\n    <Button\n      type={type}\n      data-size={size}\n      variant={variant}\n      className={cn(inputGroupButtonVariants({ size }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputGroupText({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      className={cn(\n        \"text-muted-foreground flex items-center gap-2 text-sm [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction InputGroupInput({\n  className,\n  ...props\n}: React.ComponentProps<\"input\">) {\n  return (\n    <Input\n      data-slot=\"input-group-control\"\n      className={cn(\n        \"flex-1 rounded-none border-0 bg-transparent shadow-none focus-visible:ring-0 dark:bg-transparent\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction InputGroupTextarea({\n  className,\n  ...props\n}: React.ComponentProps<\"textarea\">) {\n  return (\n    <Textarea\n      data-slot=\"input-group-control\"\n      className={cn(\n        \"flex-1 resize-none rounded-none border-0 bg-transparent py-3 shadow-none focus-visible:ring-0 dark:bg-transparent\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  InputGroup,\n  InputGroupAddon,\n  InputGroupButton,\n  InputGroupText,\n  InputGroupInput,\n  InputGroupTextarea,\n}\n","size_bytes":5065},"src/components/ui/spinner.tsx":{"content":"import { Loader2Icon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Spinner({ className, ...props }: React.ComponentProps<\"svg\">) {\n  return (\n    <Loader2Icon\n      role=\"status\"\n      aria-label=\"Loading\"\n      className={cn(\"size-4 animate-spin\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Spinner }\n","size_bytes":331},"src/components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1969},"src/app/privacy/page.tsx":{"content":"import { useTranslations } from 'next-intl';\nimport HeaderNavigation from '@/components/sections/header-navigation';\nimport Footer from '@/components/sections/footer';\n\nexport default function PrivacyPage() {\n  const t = useTranslations('privacy');\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <HeaderNavigation mode=\"page\" />\n\n      <main className=\"flex-1 pt-24 pb-16 px-4 sm:px-6 lg:px-20\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-4xl font-bold mb-8\">{t('title')}</h1>\n          <p className=\"text-muted-foreground mb-8\">{t('lastUpdated')}</p>\n\n          <div className=\"space-y-8\">\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section1.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{t('section1.content')}</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section2.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">{t('section2.content')}</p>\n              <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\">\n                <li>{t('section2.item1')}</li>\n                <li>{t('section2.item2')}</li>\n                <li>{t('section2.item3')}</li>\n                <li>{t('section2.item4')}</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section3.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{t('section3.content')}</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section4.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{t('section4.content')}</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section5.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{t('section5.content')}</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section6.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{t('section6.content')}</p>\n            </section>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2377},"src/app/api/admin/login/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { authenticateAdmin } from '@/lib/auth';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password } = await request.json();\n\n    const admin = await authenticateAdmin(email, password);\n\n    if (!admin) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid credentials' },\n        { status: 401 }\n      );\n    }\n\n    const res = NextResponse.json({\n      success: true,\n      user: {\n        id: admin.id,\n        email: admin.email,\n        name: admin.name,\n        role: 'admin',\n      },\n    });\n    // Set lightweight session cookies (dev/demo). For production, use httpOnly secure cookies or JWT.\n    res.cookies.set('session_role', 'admin', {\n      httpOnly: false,\n      sameSite: 'lax',\n      path: '/',\n    });\n    res.cookies.set('session_email', admin.email, {\n      httpOnly: false,\n      sameSite: 'lax',\n      path: '/',\n    });\n    res.cookies.set('session_user', JSON.stringify({ id: admin.id, email: admin.email, name: admin.name, role: 'admin' }), {\n      httpOnly: false,\n      sameSite: 'lax',\n      path: '/',\n    });\n    return res;\n  } catch (error) {\n    console.error('Login error:', error);\n    return NextResponse.json(\n      { success: false, error: 'An error occurred during login' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1366},"src/components/ui/accordion.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDownIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2053},"src/components/flights/flight-hero.tsx":{"content":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useTranslations } from 'next-intl';\n\ninterface FlightHeroSettings {\n  flightHeroTitle: string;\n  flightHeroSubtitle: string;\n  flightHeroImageUrl: string;\n}\n\nexport default function FlightHero() {\n  const t = useTranslations('flights');\n  const [settings, setSettings] = useState<FlightHeroSettings>({\n    flightHeroTitle: 'Make your travel wishlist, we\\'ll do the rest',\n    flightHeroSubtitle: 'Special offers to suit your plan',\n    flightHeroImageUrl: 'https://images.unsplash.com/photo-1542296332-2e4473faf563?q=80&w=870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  });\n\n  useEffect(() => {\n    fetch('/api/settings')\n      .then(res => res.json())\n      .then(data => {\n        if (data) {\n          setSettings({\n            flightHeroTitle: data.flightHeroTitle,\n            flightHeroSubtitle: data.flightHeroSubtitle,\n            flightHeroImageUrl: data.flightHeroImageUrl,\n          });\n        }\n      })\n      .catch(error => console.error('Error fetching flight hero settings:', error));\n  }, []);\n\n  return (\n    <div className=\"relative h-[600px] w-full overflow-hidden\">\n      <div className=\"absolute inset-0\">\n        <img\n          src={settings.flightHeroImageUrl}\n          alt=\"Airplane at sunset\"\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-r from-black/70 via-black/40 to-transparent\" />\n      </div>\n\n      <div className=\"relative container mx-auto px-4 sm:px-6 lg:px-20 h-full flex items-center pt-16 md:pt-24\">\n        <div className=\"text-white max-w-2xl drop-shadow-lg\">\n          <h1 className=\"text-white text-5xl md:text-6xl font-bold mb-4\">\n            {t('heroTitle')}\n          </h1>\n          <p className=\"text-xl text-white/90\">\n            {t('heroSubtitle')}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n","size_bytes":1958},"src/app/terms/page.tsx":{"content":"import { useTranslations } from 'next-intl';\nimport HeaderNavigation from '@/components/sections/header-navigation';\nimport Footer from '@/components/sections/footer';\n\nexport default function TermsPage() {\n  const t = useTranslations('terms');\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <HeaderNavigation mode=\"page\" />\n\n      <main className=\"flex-1 pt-24 pb-16 px-4 sm:px-6 lg:px-20\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-4xl font-bold mb-8\">{t('title')}</h1>\n          <p className=\"text-muted-foreground mb-8\">{t('lastUpdated')}</p>\n\n          <div className=\"space-y-8\">\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section1.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{t('section1.content')}</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section2.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">{t('section2.content')}</p>\n              <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\">\n                <li>{t('section2.item1')}</li>\n                <li>{t('section2.item2')}</li>\n                <li>{t('section2.item3')}</li>\n                <li>{t('section2.item4')}</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section3.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">{t('section3.content')}</p>\n              <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\">\n                <li>{t('section3.item1')}</li>\n                <li>{t('section3.item2')}</li>\n                <li>{t('section3.item3')}</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section4.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{t('section4.content')}</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section5.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{t('section5.content')}</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section6.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{t('section6.content')}</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section7.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{t('section7.content')}</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">{t('section8.title')}</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">{t('section8.content')}</p>\n            </section>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3076},"src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","size_bytes":3982},"src/app/api/login/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport bcrypt from 'bcrypt'\n\nexport async function POST(req: Request) {\n  try {\n    const { email, password } = await req.json()\n    if (!email || !password) {\n      return NextResponse.json({ error: 'Missing credentials' }, { status: 400 })\n    }\n\n    // Check Admin table first\n    const admin = await prisma.admin.findUnique({ where: { email } })\n    if (!admin) {\n      return NextResponse.json({ error: 'Invalid credentials' }, { status: 401 })\n    }\n\n    const ok = await bcrypt.compare(password, admin.password)\n    if (!ok) {\n      return NextResponse.json({ error: 'Invalid credentials' }, { status: 401 })\n    }\n\n    const res = NextResponse.json({ ok: true })\n    // Set simple session cookies (dev/demo). Consider using a proper auth in production.\n    res.cookies.set('session_email', admin.email, { httpOnly: true, sameSite: 'lax', path: '/' })\n    res.cookies.set('session_role', 'admin', { httpOnly: true, sameSite: 'lax', path: '/' })\n    return res\n  } catch (e) {\n    console.error(e)\n    return NextResponse.json({ error: 'Server error' }, { status: 500 })\n  }\n}\n","size_bytes":1164},"src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >[\"children\"]\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = \"dot\",\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<\"div\"> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: \"line\" | \"dot\" | \"dashed\"\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n  return (\n    <div\n      className={cn(\n        \"border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl\",\n        className\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                \"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n                indicator === \"dot\" && \"items-center\"\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          \"shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)\",\n                          {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                              indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          }\n                        )}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 justify-between leading-none\",\n                      nestLabel ? \"items-end\" : \"items-center\"\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: React.ComponentProps<\"div\"> &\n  Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              \"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3\"\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":9781},"src/components/ui/slider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max]\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\"\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\"\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n","size_bytes":2001},"src/components/flights/flight-filters.tsx":{"content":"\"use client\";\n\nimport { Slider } from \"@/components/ui/slider\";\n\nexport default function FlightFilters() {\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-6 space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Filters</h3>\n\n      {/* Price Range */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Price Range</h4>\n        <Slider\n          defaultValue={[0, 1000]}\n          max={1000}\n          step={10}\n          className=\"w-full\"\n        />\n        <div className=\"flex justify-between text-sm text-muted-foreground\">\n          <span>$0</span>\n          <span>$1,000+</span>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":698},"src/components/sections/customer-reviews-stats.tsx":{"content":"import React from \"react\";\nimport { Star, Users, Medal, TrendingUp, LucideIcon } from \"lucide-react\";\n\ninterface Stat {\n  icon: LucideIcon;\n  value: string;\n  label: string;\n  bgColor: string;\n}\n\nconst stats: Stat[] = [\n  {\n    icon: Star,\n    value: \"5.0\",\n    label: \"Average Rating\",\n    bgColor: \"bg-[#C4F1E0]\",\n  },\n  {\n    icon: Users,\n    value: \"1+\",\n    label: \"Satisfied Customers\",\n    bgColor: \"bg-[#BFE5C6]\",\n  },\n  {\n    icon: Medal,\n    value: \"100%\",\n    label: \"Satisfaction Rate\",\n    bgColor: \"bg-[#F7E9B5]\",\n  },\n  {\n    icon: TrendingUp,\n    value: \"1+\",\n    label: \"5-Star Reviews\",\n    bgColor: \"bg-[#D6E4F7]\",\n  },\n];\n\nconst StatCard: React.FC<Stat> = ({ icon: Icon, value, label, bgColor }) => {\n  return (\n    <div\n      className={`flex flex-col items-center justify-center space-y-4 rounded-[12px] p-6 text-center ${bgColor}`}\n    >\n      <div className=\"relative flex h-16 w-16 items-center justify-center rounded-full bg-primary/50\">\n        <Icon className=\"h-8 w-8 text-primary\" strokeWidth={1.5} />\n      </div>\n      <p className=\"text-[3rem] font-semibold leading-none text-dark-charcoal\">\n        {value}\n      </p>\n      <p className=\"text-sm text-medium-gray opacity-75\">{label}</p>\n    </div>\n  );\n};\n\nconst CustomerReviewsStats: React.FC = () => {\n  return (\n    <section>\n      <div className=\"mx-auto mb-5 text-center md:mb-10 lg:text-left\">\n        <h2 className=\"mb-2 text-3xl font-semibold text-dark-charcoal md:mb-4 lg:text-4xl\">\n          Customer Reviews\n        </h2>\n        <p className=\"text-medium-gray/75\">\n          Discover what our valued customers say about their Golobe experience\n        </p>\n      </div>\n\n      <div className=\"mb-10 grid grid-cols-2 gap-6 lg:grid-cols-4\">\n        {stats.map((stat) => (\n          <StatCard key={stat.label} {...stat} />\n        ))}\n      </div>\n\n      <div className=\"flex items-center justify-between border-b border-gray-300\">\n        <button className=\"border-b-2 border-dark-charcoal pb-4 font-bold text-dark-charcoal\">\n          Customer Reviews\n        </button>\n        <p className=\"hidden text-sm font-medium text-dark-charcoal sm:block\">\n          Showing 1 verified customer reviews\n        </p>\n      </div>\n    </section>\n  );\n};\n\nexport default CustomerReviewsStats;","size_bytes":2276},"src/components/ui/popover.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1635},"src/app/api/packages/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nexport const runtime = 'nodejs';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const pkg = await prisma.package.findUnique({\n      where: { id: params.id },\n      include: {\n        city: true,\n      },\n    });\n\n    if (!pkg) {\n      return NextResponse.json(\n        { error: 'Package not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(pkg);\n  } catch (error) {\n    console.error('Error fetching package:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch package' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const contentType = request.headers.get('content-type') || '';\n    let cityId = '';\n    let name = '';\n    let description = '';\n    let price: number | undefined = undefined;\n    let durationDays: number | undefined = undefined;\n    let imageUrl: string | undefined = undefined;\n    let features: string[] | undefined = undefined;\n\n    if (contentType.includes('multipart/form-data')) {\n      const form = await request.formData();\n      cityId = String(form.get('cityId') || '');\n      name = String(form.get('name') || '');\n      description = String(form.get('description') || '');\n      const priceRaw = form.get('price');\n      if (priceRaw !== null) price = parseFloat(String(priceRaw));\n      const durationRaw = form.get('durationDays');\n      if (durationRaw !== null) durationDays = parseInt(String(durationRaw));\n      const featuresRaw = String(form.get('features') || '')\n        .split('\\n')\n        .map(s => s.trim())\n        .filter(Boolean);\n      if (featuresRaw.length) features = featuresRaw;\n      const file = form.get('image') as File | null;\n      if (file && file.size > 0) {\n        const arrayBuffer = await file.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        const uploadsDir = path.join(process.cwd(), 'public', 'uploads');\n        await fs.mkdir(uploadsDir, { recursive: true });\n        const safeName = file.name.replace(/[^a-zA-Z0-9_.-]/g, '_');\n        const filename = `${Date.now()}_${safeName}`;\n        const outPath = path.join(uploadsDir, filename);\n        await fs.writeFile(outPath, buffer);\n        imageUrl = `/uploads/${filename}`;\n      } else {\n        const fromField = String(form.get('imageUrl') || '');\n        if (fromField) imageUrl = fromField;\n      }\n    } else {\n      const body = await request.json();\n      cityId = body.cityId;\n      name = body.name;\n      description = body.description;\n      price = body.price;\n      durationDays = body.durationDays;\n      imageUrl = body.imageUrl;\n      features = body.features;\n    }\n\n    const data: any = { name, description };\n    if (cityId) data.cityId = cityId;\n    if (price !== undefined) data.price = price;\n    if (durationDays !== undefined) data.durationDays = durationDays;\n    if (imageUrl !== undefined) data.imageUrl = imageUrl;\n    if (features !== undefined) data.features = features;\n\n    const updatedPackage = await prisma.package.update({\n      where: { id: params.id },\n      data,\n      include: { city: true },\n    });\n\n    return NextResponse.json(updatedPackage);\n  } catch (error) {\n    console.error('Error updating package:', error);\n    return NextResponse.json(\n      { error: 'Failed to update package' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    await prisma.package.delete({\n      where: { id: params.id },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting package:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete package' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":4008},"src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4090},"src/app/flights/page.tsx":{"content":"'use client';\n\nimport { useState, useEffect, Suspense } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { useTranslations } from 'next-intl';\nimport HeaderNavigation from \"@/components/sections/header-navigation\";\nimport Footer from \"@/components/sections/footer\";\nimport FlightHero from \"@/components/flights/flight-hero\";\nimport NewFlightSearchForm, { SearchParams } from \"@/components/flights/new-flight-search-form\";\nimport { AdvancedFlightFilters } from \"@/components/flights/advanced-flight-filters\";\nimport { FlightResultCard } from \"@/components/flights/flight-result-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { formatDateToString } from \"@/lib/format\";\n\ninterface OtherFee {\n  id: string;\n  name: string;\n  amount: number;\n}\n\ninterface FlightRoute {\n  id: string;\n  departureCityId: string;\n  arrivalCityId: string;\n  departureDate: string;\n  returnDate: string | null;\n  price: number;\n  airline: string;\n  departureTime: string;\n  arrivalTime: string;\n  duration: string;\n  rating: number;\n  availableSeats: number;\n  flightClass: string;\n  imageUrl?: string;\n  otherFees?: OtherFee[];\n  departureCity: { id: string; name: string };\n  arrivalCity: { id: string; name: string };\n}\n\ninterface FilterState {\n  priceRange: [number, number];\n  departureTimeRange: [number, number];\n  ratings: number[];\n  airlines: string[];\n}\n\nfunction FlightsContent() {\n  const t = useTranslations('flights');\n  const searchParams = useSearchParams();\n  const [searchFilters, setSearchFilters] = useState<SearchParams | null>(null);\n  const [flightRoutes, setFlightRoutes] = useState<FlightRoute[]>([]);\n  const [filteredRoutes, setFilteredRoutes] = useState<FlightRoute[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [sortBy, setSortBy] = useState<'cheapest' | 'fastest'>('cheapest');\n  const [displayCount, setDisplayCount] = useState(5);\n\n  const [filters, setFilters] = useState<FilterState>({\n    priceRange: [100000, 100000000],\n    departureTimeRange: [0, 23.99],\n    ratings: [],\n    airlines: [],\n  });\n\n  useEffect(() => {\n    const fromCityId = searchParams.get('from');\n    const toCityId = searchParams.get('to');\n    const tripType = searchParams.get('tripType') as 'one-way' | 'round-trip' | 'multi-city' || 'one-way';\n    const departDateStr = searchParams.get('departDate');\n    const returnDateStr = searchParams.get('returnDate');\n\n    if (fromCityId || toCityId || tripType) {\n      // Clean up date strings - extract only YYYY-MM-DD part\n      const cleanDepartDate = departDateStr \n        ? (departDateStr.includes('T') ? departDateStr.split('T')[0] : departDateStr)\n        : null;\n      const cleanReturnDate = returnDateStr \n        ? (returnDateStr.includes('T') ? returnDateStr.split('T')[0] : returnDateStr)\n        : null;\n\n      setSearchFilters({\n        from: fromCityId ? { id: fromCityId, name: '', description: '', imageUrl: '', createdAt: new Date() } : null,\n        to: toCityId ? { id: toCityId, name: '', description: '', imageUrl: '', createdAt: new Date() } : null,\n        departDate: cleanDepartDate ? new Date(cleanDepartDate) : undefined,\n        returnDate: cleanReturnDate ? new Date(cleanReturnDate) : undefined,\n        tripType,\n      });\n      fetchFlightRoutes(fromCityId, toCityId, cleanDepartDate, cleanReturnDate);\n    }\n  }, [searchParams]);\n\n  useEffect(() => {\n    applyFilters();\n  }, [flightRoutes, filters, sortBy]);\n\n  const fetchFlightRoutes = async (\n    fromCityId: string | null,\n    toCityId: string | null,\n    departDate: string | null,\n    returnDate: string | null\n  ) => {\n    setLoading(true);\n    try {\n      const params = new URLSearchParams();\n      if (fromCityId) params.append('departureCityId', fromCityId);\n      if (toCityId) params.append('arrivalCityId', toCityId);\n      if (departDate) params.append('departureDate', departDate);\n      if (returnDate) params.append('returnDate', returnDate);\n\n      const response = await fetch(`/api/flight-routes?${params.toString()}`);\n      const data = await response.json();\n      \n      // Ensure data is an array\n      if (Array.isArray(data)) {\n        setFlightRoutes(data);\n      } else {\n        console.error('API returned non-array data:', data);\n        setFlightRoutes([]);\n      }\n\n      // Keep priceRange fixed to [100000, 100000000] per UI requirement\n    } catch (error) {\n      console.error('Error fetching flight routes:', error);\n      setFlightRoutes([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const applyFilters = () => {\n    let filtered = [...flightRoutes];\n\n    filtered = filtered.filter((route) => {\n      const price = route.price ? parseFloat(route.price.toString()) : 0;\n      if (price < filters.priceRange[0] || price > filters.priceRange[1]) {\n        return false;\n      }\n\n      // Parse departure time from datetime string\n      if (route.departureTime) {\n        try {\n          const date = new Date(route.departureTime);\n          const hours = date.getHours();\n          const minutes = date.getMinutes();\n          const departureHours = hours + minutes / 60;\n          \n          if (\n            departureHours < filters.departureTimeRange[0] ||\n            departureHours > filters.departureTimeRange[1]\n          ) {\n            return false;\n          }\n        } catch (error) {\n          console.error('Error parsing departure time:', error);\n        }\n      }\n\n      if (filters.ratings.length > 0 && !filters.ratings.includes(route.rating)) {\n        return false;\n      }\n\n      if (filters.airlines.length > 0 && !filters.airlines.includes(route.airline)) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (sortBy === 'cheapest') {\n      filtered.sort((a, b) => {\n        const priceA = a.price ? parseFloat(a.price.toString()) : 0;\n        const priceB = b.price ? parseFloat(b.price.toString()) : 0;\n        return priceA - priceB;\n      });\n    } else {\n      filtered.sort((a, b) => {\n        const getDurationMinutes = (duration: string) => {\n          if (!duration) return 0;\n          const [hours, minutes] = duration.split('h');\n          return parseInt(hours) * 60 + parseInt(minutes.replace('m', '').trim());\n        };\n        return getDurationMinutes(a.duration) - getDurationMinutes(b.duration);\n      });\n    }\n\n    setFilteredRoutes(filtered);\n  };\n\n  const handleSearch = (params: SearchParams) => {\n    setSearchFilters(params);\n    if (params.from && params.to) {\n      const departDateStr = formatDateToString(params.departDate);\n      const returnDateStr = formatDateToString(params.returnDate);\n        \n      fetchFlightRoutes(\n        params.from.id,\n        params.to.id,\n        departDateStr || null,\n        returnDateStr || null\n      );\n    }\n  };\n\n  const availableAirlines = Array.from(new Set(flightRoutes.map((r) => r.airline)));\n  const minPrice = flightRoutes.length > 0\n    ? Math.min(...flightRoutes.map((r) => r.price ? parseFloat(r.price.toString()) : 0))\n    : 0;\n  const maxPrice = flightRoutes.length > 0\n    ? Math.max(...flightRoutes.map((r) => r.price ? parseFloat(r.price.toString()) : 0))\n    : 10000000;\n\n  const cheapestPrice = filteredRoutes.length > 0\n    ? Math.min(...filteredRoutes.map((r) => r.price ? parseFloat(r.price.toString()) : 0))\n    : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <HeaderNavigation mode=\"hero\" />\n      <FlightHero />\n\n      <main className=\"pb-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-20 -mt-20 relative z-10\">\n          <NewFlightSearchForm onSearch={handleSearch} initialFilters={searchFilters} />\n        </div>\n\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-20 mt-12\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            <aside className=\"w-full lg:w-80 flex-shrink-0\">\n              <AdvancedFlightFilters\n                filters={filters}\n                onFiltersChange={setFilters}\n                availableAirlines={availableAirlines}\n                minPrice={minPrice}\n                maxPrice={maxPrice}\n              />\n            </aside>\n\n            <div className=\"flex-1\">\n              <div className=\"mb-6 flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {t('showing')} {filteredRoutes.length} {t('of')} {flightRoutes.length} {filteredRoutes.length === 1 ? t('result') : t('results_plural')}\n                </div>\n              </div>\n\n              {loading ? (\n                <div className=\"text-center py-12\">{t('loading')}</div>\n              ) : filteredRoutes.length > 0 ? (\n                <>\n                  <div className=\"space-y-4\">\n                    {filteredRoutes.slice(0, displayCount).map((route) => (\n                      <FlightResultCard\n                        key={route.id}\n                        id={route.id}\n                        airline={route.airline}\n                        departureCity={route.departureCity?.name || ''}\n                        arrivalCity={route.arrivalCity?.name || ''}\n                        departureTime={route.departureTime || ''}\n                        arrivalTime={route.arrivalTime || ''}\n                        duration={route.duration || ''}\n                        price={route.price ? parseFloat(route.price.toString()) : 0}\n                        rating={route.rating || 0}\n                        reviewCount={0}\n                        imageUrl={route.imageUrl}\n                        otherFees={route.otherFees}\n                        flightClass={route.flightClass}\n                        departureDate={route.departureDate}\n                      />\n                    ))}\n                  </div>\n                  {displayCount < filteredRoutes.length && (\n                    <div className=\"mt-8 text-center\">\n                      <Button\n                        onClick={() => setDisplayCount(prev => prev + 5)}\n                        variant=\"outline\"\n                        size=\"lg\"\n                        className=\"min-w-[200px]\"\n                      >\n                        {t('loadMore')}\n                      </Button>\n                    </div>\n                  )}\n                </>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <p className=\"text-gray-500\">{t('noFlightsFound')}</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n\nfunction LoadingFallback() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center\">\n      <div className=\"text-lg\">Loading...</div>\n    </div>\n  );\n}\n\nexport default function FlightsPage() {\n  return (\n    <Suspense fallback={<LoadingFallback />}>\n      <FlightsContent />\n    </Suspense>\n  );\n}","size_bytes":10829},"src/components/auth/register-form.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport Link from \"next/link\";\nimport { Mail, Lock, Eye, EyeOff, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function RegisterForm() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  return (\n    <div className=\"w-full max-w-md\">\n      <div className=\"bg-white rounded-lg shadow-lg p-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n            Create Account\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Sign up to start your travel journey\n          </p>\n        </div>\n\n        {/* Form */}\n        <form className=\"space-y-6\">\n          {/* Full Name */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Full Name</Label>\n            <div className=\"relative\">\n              <User className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"name\"\n                type=\"text\"\n                placeholder=\"John Doe\"\n                className=\"pl-10\"\n                required\n              />\n            </div>\n          </div>\n\n          {/* Email */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email Address</Label>\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"john@example.com\"\n                className=\"pl-10\"\n                required\n              />\n            </div>\n          </div>\n\n          {/* Password */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Create a password\"\n                className=\"pl-10 pr-10\"\n                required\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </button>\n            </div>\n          </div>\n\n          {/* Confirm Password */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"confirmPassword\"\n                type={showConfirmPassword ? \"text\" : \"password\"}\n                placeholder=\"Confirm your password\"\n                className=\"pl-10 pr-10\"\n                required\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n              >\n                {showConfirmPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </button>\n            </div>\n          </div>\n\n          {/* Terms & Conditions */}\n          <div className=\"flex items-start space-x-2\">\n            <Checkbox id=\"terms\" required />\n            <Label\n              htmlFor=\"terms\"\n              className=\"text-sm cursor-pointer font-normal leading-relaxed\"\n            >\n              I agree to the{\" \"}\n              <Link href=\"/terms\" className=\"text-primary hover:underline\">\n                Terms & Conditions\n              </Link>{\" \"}\n              and{\" \"}\n              <Link href=\"/privacy\" className=\"text-primary hover:underline\">\n                Privacy Policy\n              </Link>\n            </Label>\n          </div>\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\"\n          >\n            Create Account\n          </Button>\n\n          {/* Divider */}\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-white px-2 text-muted-foreground\">\n                Or sign up with\n              </span>\n            </div>\n          </div>\n\n          {/* Social Sign Up */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Button type=\"button\" variant=\"outline\" className=\"w-full\">\n              <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                <path\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                  fill=\"#4285F4\"\n                />\n                <path\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                  fill=\"#34A853\"\n                />\n                <path\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                  fill=\"#FBBC05\"\n                />\n                <path\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                  fill=\"#EA4335\"\n                />\n              </svg>\n              Google\n            </Button>\n            <Button type=\"button\" variant=\"outline\" className=\"w-full\">\n              <svg\n                className=\"mr-2 h-4 w-4\"\n                fill=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\n              </svg>\n              Facebook\n            </Button>\n          </div>\n        </form>\n\n        {/* Login Link */}\n        <p className=\"mt-6 text-center text-sm text-muted-foreground\">\n          Already have an account?{\" \"}\n          <Link href=\"/login\" className=\"text-primary hover:underline font-medium\">\n            Login\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":7411},"src/app/admin/page.tsx":{"content":"import { cookies } from 'next/headers'\nimport Link from 'next/link'\n\nexport default async function AdminPage() {\n  const store = await cookies()\n  const role = store.get('session_role')?.value\n  const email = store.get('session_email')?.value\n\n  if (role !== 'admin') {\n    // Simple guard: if not admin, show link back to login\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-6\">\n        <div className=\"max-w-md w-full rounded-lg border p-6 text-center\">\n          <h1 className=\"text-2xl font-bold mb-2\">Unauthorized</h1>\n          <p className=\"text-muted-foreground mb-4\">Anda harus login sebagai admin.</p>\n          <Link href=\"/admin/login\" className=\"text-primary underline\">Ke halaman login</Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <main className=\"min-h-screen p-6\">\n      <div className=\"max-w-5xl mx-auto\">\n        <h1 className=\"text-3xl font-bold mb-2\">Admin Dashboard</h1>\n        <p className=\"text-muted-foreground mb-8\">Selamat datang{email ? `, ${email}` : ''}.</p>\n\n        <div className=\"grid gap-4 sm:grid-cols-2\">\n          <div className=\"rounded-lg border p-4\">\n            <h2 className=\"font-semibold mb-2\">Paket Penerbangan</h2>\n            <p className=\"text-sm text-muted-foreground\">Kelola data paket penerbangan.</p>\n          </div>\n          <div className=\"rounded-lg border p-4\">\n            <h2 className=\"font-semibold mb-2\">Pembayaran</h2>\n            <p className=\"text-sm text-muted-foreground\">Pantau transaksi terbaru.</p>\n          </div>\n        </div>\n      </div>\n    </main>\n  )\n}\n","size_bytes":1586},"src/app/api/cities/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nexport const runtime = 'nodejs';\n\nexport async function GET() {\n  try {\n    const cities = await prisma.city.findMany({\n      orderBy: {\n        name: 'asc',\n      },\n    });\n\n    return NextResponse.json(cities);\n  } catch (error) {\n    console.error('Error fetching cities:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch cities' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const contentType = request.headers.get('content-type') || '';\n    let name = '';\n    let description = '';\n    let imageUrl = '';\n\n    if (contentType.includes('multipart/form-data')) {\n      const form = await request.formData();\n      name = String(form.get('name') || '');\n      description = String(form.get('description') || '');\n      const file = form.get('image') as File | null;\n\n      if (file && file.size > 0) {\n        const arrayBuffer = await file.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        const uploadsDir = process.env.UPLOADS_DIR || path.join(process.cwd(), 'uploads');\n        await fs.mkdir(uploadsDir, { recursive: true });\n        const safeName = file.name.replace(/[^a-zA-Z0-9_.-]/g, '_');\n        const filename = `${Date.now()}_${safeName}`;\n        const outPath = path.join(uploadsDir, filename);\n        await fs.writeFile(outPath, buffer);\n        imageUrl = `/api/images/${filename}`;\n      } else {\n        imageUrl = String(form.get('imageUrl') || '');\n      }\n    } else {\n      const body = await request.json();\n      name = body.name;\n      description = body.description || '';\n      imageUrl = body.imageUrl || '';\n    }\n\n    const newCity = await prisma.city.create({\n      data: { name, description, imageUrl },\n    });\n\n    return NextResponse.json(newCity);\n  } catch (error) {\n    console.error('Error creating city:', error);\n    return NextResponse.json(\n      { error: 'Failed to create city' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":2126},"src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  MoreHorizontalIcon,\n} from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Pagination({ className, ...props }: React.ComponentProps<\"nav\">) {\n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      data-slot=\"pagination\"\n      className={cn(\"mx-auto flex w-full justify-center\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationContent({\n  className,\n  ...props\n}: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"pagination-content\"\n      className={cn(\"flex flex-row items-center gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationItem({ ...props }: React.ComponentProps<\"li\">) {\n  return <li data-slot=\"pagination-item\" {...props} />\n}\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<React.ComponentProps<typeof Button>, \"size\"> &\n  React.ComponentProps<\"a\">\n\nfunction PaginationLink({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) {\n  return (\n    <a\n      aria-current={isActive ? \"page\" : undefined}\n      data-slot=\"pagination-link\"\n      data-active={isActive}\n      className={cn(\n        buttonVariants({\n          variant: isActive ? \"outline\" : \"ghost\",\n          size,\n        }),\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationPrevious({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to previous page\"\n      size=\"default\"\n      className={cn(\"gap-1 px-2.5 sm:pl-2.5\", className)}\n      {...props}\n    >\n      <ChevronLeftIcon />\n      <span className=\"hidden sm:block\">Previous</span>\n    </PaginationLink>\n  )\n}\n\nfunction PaginationNext({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn(\"gap-1 px-2.5 sm:pr-2.5\", className)}\n      {...props}\n    >\n      <span className=\"hidden sm:block\">Next</span>\n      <ChevronRightIcon />\n    </PaginationLink>\n  )\n}\n\nfunction PaginationEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      aria-hidden\n      data-slot=\"pagination-ellipsis\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontalIcon className=\"size-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2712},"src/app/api/admin/register/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { createAdmin } from '@/lib/auth';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password, name } = await request.json();\n\n    await createAdmin(email, password, name);\n\n    return NextResponse.json({ success: true });\n  } catch (error: any) {\n    console.error('Registration error:', error);\n\n    if (error.code === 'P2002') {\n      return NextResponse.json(\n        { success: false, error: 'Email already exists' },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: false, error: 'An error occurred during registration' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":695},"src/components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","size_bytes":8284},"src/app/packages/[id]/page.tsx":{"content":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'next/navigation';\nimport HeaderNavigation from '@/components/sections/header-navigation';\nimport Footer from '@/components/sections/footer';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { MapPin, Calendar, Check, ArrowLeft } from 'lucide-react';\nimport Link from 'next/link';\nimport PaymentModal from '@/components/packages/payment-modal';\n\ninterface City {\n  id: string;\n  name: string;\n  description: string;\n  imageUrl: string;\n  createdAt: Date;\n}\n\ninterface PackageWithCity {\n  id: string;\n  cityId: string;\n  name: string;\n  description: string;\n  price: number;\n  durationDays: number;\n  imageUrl: string;\n  features: string[];\n  createdAt: Date;\n  city: City;\n}\n\nexport default function PackageDetailPage() {\n  const params = useParams();\n  const [pkg, setPkg] = useState<PackageWithCity | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n\n  useEffect(() => {\n    if (params.id) {\n      fetchPackage(params.id as string);\n    }\n  }, [params.id]);\n\n  async function fetchPackage(id: string) {\n    try {\n      const response = await fetch(`/api/packages/${id}`);\n      if (!response.ok) throw new Error('Failed to fetch package');\n\n      const data = await response.json();\n      setPkg(data);\n    } catch (error) {\n      console.error('Error fetching package:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background pt-24\">\n        <HeaderNavigation mode=\"page\" />\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!pkg) {\n    return (\n      <div className=\"min-h-screen bg-background pt-24\">\n        <HeaderNavigation mode=\"page\" />\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-20 py-12\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold mb-4\">Paket tidak ditemukan</h1>\n            <Link href=\"/flights\">\n              <Button>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Kembali ke Paket\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pt-24\">\n      <HeaderNavigation mode=\"page\" />\n\n      <main className=\"container mx-auto px-4 sm:px-6 lg:px-20 pb-12\">\n        <div className=\"mb-6\">\n          <Link href=\"/flights\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Kembali\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            <div className=\"relative h-96 rounded-xl overflow-hidden\">\n              <img\n                src={pkg.imageUrl}\n                alt={pkg.name}\n                className=\"w-full h-full object-cover\"\n              />\n              <Badge className=\"absolute top-4 left-4 text-lg px-4 py-2\">\n                {pkg.name}\n              </Badge>\n            </div>\n\n            <div>\n              <div className=\"flex items-center gap-3 mb-4\">\n                <MapPin className=\"w-5 h-5 text-muted-foreground\" />\n                <span className=\"text-lg text-muted-foreground\">{pkg.city.name}</span>\n              </div>\n              <h1 className=\"text-4xl font-bold mb-4\">\n                {pkg.city.name} - {pkg.name}\n              </h1>\n              <p className=\"text-lg text-muted-foreground\">{pkg.description}</p>\n            </div>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <h2 className=\"text-2xl font-bold mb-4\">Fasilitas Yang Didapatkan</h2>\n                <ul className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {(Array.isArray(pkg.features) ? pkg.features : []).map((feature, index) => (\n                    <li key={index} className=\"flex items-start gap-3\">\n                      <Check className=\"w-5 h-5 mt-0.5 flex-shrink-0\" style={{ color: '#dcac56' }} />\n                      <span className=\"text-muted-foreground\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <h2 className=\"text-2xl font-bold mb-4\">Detail Paket</h2>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Calendar className=\"w-5 h-5 text-muted-foreground\" />\n                    <div>\n                      <p className=\"font-semibold\">Durasi</p>\n                      <p className=\"text-muted-foreground\">{pkg.durationDays} Hari</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <MapPin className=\"w-5 h-5 text-muted-foreground\" />\n                    <div>\n                      <p className=\"font-semibold\">Destinasi</p>\n                      <p className=\"text-muted-foreground\">{pkg.city.name}, {pkg.city.description}</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-24\">\n              <CardContent className=\"pt-6 space-y-6\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">Harga Paket</p>\n                  <p className=\"text-4xl font-bold text-primary\">\n                    {formatPrice(Number(pkg.price))}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    untuk {pkg.durationDays} hari\n                  </p>\n                </div>\n\n                <Button\n                  size=\"lg\"\n                  className=\"w-full text-lg py-6\"\n                  onClick={() => setShowPaymentModal(true)}\n                >\n                  Beli Paket\n                </Button>\n\n                <div className=\"border-t pt-6 space-y-3\">\n                  <p className=\"font-semibold text-sm\">Yang Termasuk:</p>\n                  <ul className=\"space-y-2\">\n                    {(Array.isArray(pkg.features) ? pkg.features : []).slice(0, 5).map((feature, index) => (\n                      <li key={index} className=\"flex items-start gap-2 text-sm\">\n                        <Check className=\"w-4 h-4 mt-0.5 flex-shrink-0\" style={{ color: '#dcac56' }} />\n                        <span className=\"text-muted-foreground\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n\n      <PaymentModal\n        isOpen={showPaymentModal}\n        onClose={() => setShowPaymentModal(false)}\n        package={pkg}\n      />\n    </div>\n  );\n}\n","size_bytes":7516},"src/components/sections/header-navigation.tsx":{"content":"\"use client\";\n\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { Plane } from \"lucide-react\";\nimport LanguageToggle from \"./language-toggle\";\nimport { useTranslations } from \"next-intl\";\n\ntype HeaderNavigationProps = {\n  mode?: \"hero\" | \"page\";\n};\n\nexport default function HeaderNavigation({ mode = \"hero\" }: HeaderNavigationProps) {\n  const t = useTranslations('nav');\n  const isPage = mode === \"page\";\n  const headerClasses = isPage\n    ? \"bg-white/80 backdrop-blur-sm border-b border-black/10 shadow-sm\"\n    : \"bg-black/30 backdrop-blur-sm border-b border-white/30 shadow-[0_2px_12px_rgba(0,0,0,0.08)]\";\n  const linkClass = isPage\n    ? \"flex items-center gap-2 text-foreground hover:text-primary transition-colors\"\n    : \"flex items-center gap-2 text-white hover:text-primary transition-colors\";\n  const logoTextClass = isPage ? \"text-2xl font-bold text-foreground\" : \"text-2xl font-bold text-white\";\n  const langToggleClass = isPage\n    ? \"text-foreground hover:text-primary hover:bg-black/5\"\n    : \"text-white hover:text-primary hover:bg-white/10\";\n  return (\n    <header className={`fixed top-0 left-0 right-0 z-50 ${headerClasses}`}>\n      <nav className=\"container mx-auto px-4 sm:px-6 lg:px-20 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-8\">\n            <Link\n              href=\"/flights\"\n              className={linkClass}\n            >\n              <Plane className=\"h-5 w-5\" />\n              <span className=\"font-medium\">{t('findFlights')}</span>\n            </Link>\n          </div>\n\n          <Link href=\"/\" className=\"absolute left-1/2 -translate-x-1/2\">\n            <div className=\"flex items-center\">\n              <Image src=\"/logo.png\" alt=\"Golobe\" width={120} height={52} className=\"h-16 w-auto\" />\n            </div>\n          </Link>\n\n          <div className=\"flex items-center gap-2\">\n            <LanguageToggle variant=\"ghost\" className={langToggleClass} />\n          </div>\n        </div>\n      </nav>\n    </header>\n  );\n}","size_bytes":2046},"src/app/register/page.tsx":{"content":"import HeaderNavigation from \"@/components/sections/header-navigation\";\nimport Footer from \"@/components/sections/footer\";\nimport RegisterForm from \"@/components/auth/register-form\";\n\nexport default function RegisterPage() {\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <HeaderNavigation />\n      \n      <main className=\"flex-1 flex items-center justify-center py-12 px-4\">\n        <RegisterForm />\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":483},"src/components/flights/date-selector.tsx":{"content":"'use client';\n\nimport { useState } from 'react';\nimport { format } from 'date-fns';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport { CalendarIcon } from 'lucide-react';\n\ninterface DateSelectorProps {\n  label: string;\n  sublabel?: string;\n  value: Date | undefined;\n  onChange: (date: Date | undefined) => void;\n  minDate?: Date;\n  minimal?: boolean;\n  placeholderTitle?: string;\n  placeholderSubtitle?: string;\n  showIcon?: boolean;\n}\n\nexport default function DateSelector({\n  label,\n  sublabel,\n  value,\n  onChange,\n  minDate,\n  minimal = false,\n  placeholderTitle = 'DD MMM YY',\n  placeholderSubtitle = 'Weekday',\n  showIcon = true,\n}: DateSelectorProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div className=\"space-y-2\">\n      <label className={minimal ? 'sr-only' : 'text-sm font-medium text-muted-foreground'}>{label}</label>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant={minimal ? 'ghost' : 'outline'}\n            className={minimal ? 'w-full justify-start text-left font-normal h-auto p-0 bg-transparent hover:bg-transparent border-0 shadow-none' : 'w-full justify-start text-left font-normal h-auto py-3 px-4'}\n          >\n            <div className=\"flex items-center gap-2 w-full\">\n              {!minimal && showIcon && (\n                <CalendarIcon className=\"h-5 w-5 text-muted-foreground\" />\n              )}\n              <div className=\"flex flex-col items-start\">\n                {value ? (\n                  <>\n                    <span className={minimal ? 'font-bold text-lg sm:text-2xl' : 'font-bold text-lg'}>\n                      {format(value, 'dd MMM yy')}\n                    </span>\n                    <span className={minimal ? 'text-xs sm:text-sm text-muted-foreground' : 'text-xs text-muted-foreground'}>\n                      {format(value, 'EEEE')}\n                    </span>\n                  </>\n                ) : (\n                  <>\n                    <span className={minimal ? 'font-bold text-lg sm:text-2xl' : 'text-muted-foreground font-bold'}>{minimal ? placeholderTitle : 'DD MMM YY'}</span>\n                    <span className={minimal ? 'text-xs sm:text-sm text-muted-foreground' : 'text-xs text-muted-foreground'}>\n                      {minimal ? placeholderSubtitle : (sublabel || '')}\n                    </span>\n                  </>\n                )}\n              </div>\n            </div>\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <Calendar\n            mode=\"single\"\n            selected={value}\n            onSelect={(date) => {\n              onChange(date);\n              setOpen(false);\n            }}\n            disabled={(date) => {\n              if (minDate) {\n                return date < minDate;\n              }\n              return date < new Date(new Date().setHours(0, 0, 0, 0));\n            }}\n            initialFocus\n          />\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n","size_bytes":3198},"src/components/flights/flight-results.tsx":{"content":"\"use client\";\n\nimport { Plane, Clock, ArrowRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nconst flightResults = [\n  {\n    id: 1,\n    airline: \"Emirates\",\n    logo: \"EK\",\n    departure: { time: \"08:00 AM\", airport: \"JFK\" },\n    arrival: { time: \"11:30 AM\", airport: \"LAX\" },\n    duration: \"5h 30m\",\n    stops: \"Non-stop\",\n    price: 299,\n    class: \"Economy\",\n  },\n  {\n    id: 2,\n    airline: \"Delta Airlines\",\n    logo: \"DL\",\n    departure: { time: \"10:15 AM\", airport: \"JFK\" },\n    arrival: { time: \"02:00 PM\", airport: \"LAX\" },\n    duration: \"5h 45m\",\n    stops: \"Non-stop\",\n    price: 349,\n    class: \"Economy\",\n  },\n  {\n    id: 3,\n    airline: \"United Airlines\",\n    logo: \"UA\",\n    departure: { time: \"01:30 PM\", airport: \"JFK\" },\n    arrival: { time: \"05:45 PM\", airport: \"LAX\" },\n    duration: \"6h 15m\",\n    stops: \"1 Stop\",\n    price: 279,\n    class: \"Economy\",\n  },\n  {\n    id: 4,\n    airline: \"American Airlines\",\n    logo: \"AA\",\n    departure: { time: \"03:45 PM\", airport: \"JFK\" },\n    arrival: { time: \"08:30 PM\", airport: \"LAX\" },\n    duration: \"5h 45m\",\n    stops: \"Non-stop\",\n    price: 329,\n    class: \"Economy\",\n  },\n];\n\nexport default function FlightResults() {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl font-bold text-foreground\">\n          Available Flights ({flightResults.length})\n        </h2>\n        <select className=\"border border-border rounded-md px-4 py-2 text-sm\">\n          <option>Cheapest First</option>\n          <option>Fastest First</option>\n          <option>Earliest Departure</option>\n          <option>Latest Departure</option>\n        </select>\n      </div>\n\n      {flightResults.map((flight) => (\n        <div\n          key={flight.id}\n          className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-12 gap-4 items-center\">\n            {/* Airline Logo */}\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 rounded-full bg-primary flex items-center justify-center text-white font-bold\">\n                  {flight.logo}\n                </div>\n                <div className=\"hidden md:block\">\n                  <p className=\"font-semibold text-sm\">{flight.airline}</p>\n                  <p className=\"text-xs text-muted-foreground\">{flight.class}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Flight Details */}\n            <div className=\"md:col-span-7\">\n              <div className=\"flex items-center justify-between\">\n                {/* Departure */}\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {flight.departure.time}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {flight.departure.airport}\n                  </p>\n                </div>\n\n                {/* Journey Line */}\n                <div className=\"flex-1 mx-4\">\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <div className=\"flex-1 h-px bg-border\"></div>\n                    <div className=\"flex flex-col items-center\">\n                      <Plane className=\"h-5 w-5 text-primary rotate-90\" />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {flight.duration}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {flight.stops}\n                      </p>\n                    </div>\n                    <div className=\"flex-1 h-px bg-border\"></div>\n                  </div>\n                </div>\n\n                {/* Arrival */}\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {flight.arrival.time}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {flight.arrival.airport}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Price & CTA */}\n            <div className=\"md:col-span-3 text-center md:text-right\">\n              <p className=\"text-sm text-muted-foreground mb-1\">Starting from</p>\n              <p className=\"text-3xl font-bold text-primary mb-3\">\n                ${flight.price}\n              </p>\n              <Button className=\"w-full md:w-auto bg-primary hover:bg-primary/90 text-primary-foreground\">\n                Select Flight\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","size_bytes":4875},"src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":800},"src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3759},"src/components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","size_bytes":699},"src/lib/admin-auth.ts":{"content":"export interface AdminUser {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n}\n\nexport async function loginAdmin(email: string, password: string): Promise<{ success: boolean; error?: string; user?: AdminUser }> {\n  try {\n    const response = await fetch('/api/admin/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    const data = await response.json();\n    if (data?.success && data?.user && typeof window !== 'undefined') {\n      try {\n        localStorage.setItem('adminSession', JSON.stringify(data.user));\n      } catch {}\n    }\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    return { success: false, error: 'An error occurred during login' };\n  }\n}\n\nexport async function registerAdmin(email: string, password: string, name: string): Promise<{ success: boolean; error?: string }> {\n  try {\n    const response = await fetch('/api/admin/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password, name }),\n    });\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    return { success: false, error: 'An error occurred during registration' };\n  }\n}\n\nexport async function logoutAdmin(): Promise<void> {\n  // Clear session/cookies here if needed\n  if (typeof window !== 'undefined') {\n    localStorage.removeItem('adminSession');\n    try {\n      // expire cookies set by API\n      document.cookie = 'session_role=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT';\n      document.cookie = 'session_email=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT';\n      document.cookie = 'session_user=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT';\n    } catch {}\n  }\n}\n\nexport async function getCurrentAdmin(): Promise<AdminUser | null> {\n  // This would need proper session management with cookies/JWT\n  // For now, return null as placeholder\n  if (typeof window === 'undefined') return null;\n  // Try localStorage first\n  try {\n    const raw = localStorage.getItem('adminSession');\n    if (raw) {\n      const user = JSON.parse(raw) as AdminUser;\n      if (user && user.id && user.email && user.role === 'admin') {\n        return user;\n      }\n    }\n  } catch {}\n\n  // Fallback to cookie\n  try {\n    const cookie = document.cookie.split('; ').find(c => c.startsWith('session_user='));\n    if (!cookie) return null;\n    const value = decodeURIComponent(cookie.split('=')[1] || '');\n    const user = JSON.parse(value) as AdminUser;\n    if (user && user.id && user.email && user.role === 'admin') {\n      return user;\n    }\n    return null;\n  } catch {\n    return null;\n  }\n}\n","size_bytes":2800},"src/components/hotels/hotel-filters.tsx":{"content":"\"use client\";\n\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Star } from \"lucide-react\";\n\nexport default function HotelFilters() {\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-6 space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Filters</h3>\n\n      {/* Price Range */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Price per Night</h4>\n        <Slider\n          defaultValue={[0, 500]}\n          max={500}\n          step={10}\n          className=\"w-full\"\n        />\n        <div className=\"flex justify-between text-sm text-muted-foreground\">\n          <span>$0</span>\n          <span>$500+</span>\n        </div>\n      </div>\n\n      {/* Star Rating */}\n      <div className=\"space-y-3\">\n        <h4 className=\"font-medium text-foreground\">Star Rating</h4>\n        <div className=\"space-y-2\">\n          {[5, 4, 3, 2, 1].map((stars) => (\n            <div key={stars} className=\"flex items-center space-x-2\">\n              <Checkbox id={`${stars}-star`} />\n              <Label htmlFor={`${stars}-star`} className=\"text-sm cursor-pointer flex items-center\">\n                {Array.from({ length: stars }).map((_, i) => (\n                  <Star key={i} className=\"h-3 w-3 fill-star-rating text-star-rating\" />\n                ))}\n                <span className=\"ml-2\">& Up</span>\n              </Label>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Hotel Type */}\n      <div className=\"space-y-3\">\n        <h4 className=\"font-medium text-foreground\">Hotel Type</h4>\n        <div className=\"space-y-2\">\n          {[\n            \"Resort\",\n            \"Boutique\",\n            \"Budget\",\n            \"Luxury\",\n            \"Business\",\n          ].map((type) => (\n            <div key={type} className=\"flex items-center space-x-2\">\n              <Checkbox id={type} />\n              <Label htmlFor={type} className=\"text-sm cursor-pointer\">\n                {type}\n              </Label>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Amenities */}\n      <div className=\"space-y-3\">\n        <h4 className=\"font-medium text-foreground\">Amenities</h4>\n        <div className=\"space-y-2\">\n          {[\n            \"Free WiFi\",\n            \"Swimming Pool\",\n            \"Parking\",\n            \"Restaurant\",\n            \"Gym\",\n            \"Spa\",\n            \"Pet Friendly\",\n          ].map((amenity) => (\n            <div key={amenity} className=\"flex items-center space-x-2\">\n              <Checkbox id={amenity} />\n              <Label htmlFor={amenity} className=\"text-sm cursor-pointer\">\n                {amenity}\n              </Label>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2846},"src/components/hotels/hotel-search-bar.tsx":{"content":"\"use client\";\n\nimport { Calendar, MapPin, Users } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function HotelSearchBar() {\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 items-end\">\n        {/* Destination */}\n        <div className=\"space-y-2 lg:col-span-2\">\n          <label className=\"text-sm font-medium text-foreground\">Destination</label>\n          <div className=\"relative\">\n            <MapPin className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Enter city or hotel name\"\n              className=\"pl-10\"\n              defaultValue=\"Los Angeles, USA\"\n            />\n          </div>\n        </div>\n\n        {/* Check-in Date */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-foreground\">Check-in</label>\n          <div className=\"relative\">\n            <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"date\"\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Check-out Date */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-foreground\">Check-out</label>\n          <div className=\"relative\">\n            <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"date\"\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Guests & Rooms */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-foreground\">Guests & Rooms</label>\n          <div className=\"relative\">\n            <Users className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"2 Guests, 1 Room\"\n              className=\"pl-10\"\n              defaultValue=\"2 Guests, 1 Room\"\n            />\n          </div>\n        </div>\n\n        {/* Search Button */}\n        <div className=\"lg:col-span-5\">\n          <Button className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\">\n            <MapPin className=\"mr-2 h-4 w-4\" />\n            Search Hotels\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2496},"src/components/ui/command.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { SearchIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  className,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n  className?: string\n  showCloseButton?: boolean\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent\n        className={cn(\"overflow-hidden p-0\", className)}\n        showCloseButton={showCloseButton}\n      >\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          \"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        \"max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4818},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":967},"src/app/layout.tsx":{"content":"import type { Metadata } from \"next\";\nimport \"./globals.css\";\nimport ErrorReporter from \"@/components/ErrorReporter\";\nimport Script from \"next/script\";\nimport { NextIntlClientProvider } from 'next-intl';\nimport { getLocale, getMessages } from 'next-intl/server';\nimport { prisma } from \"@/lib/prisma\";\n\nexport async function generateMetadata(): Promise<Metadata> {\n  try {\n    const settings = await prisma.siteSettings.findFirst();\n    \n    if (settings) {\n      return {\n        title: settings.metaTitle,\n        description: settings.metaDescription,\n      };\n    }\n  } catch (error) {\n    console.error('Error fetching metadata:', error);\n  }\n\n  return {\n    title: \"Travel Indonesia - Jelajahi Dunia Bersama Kami\",\n    description: \"Temukan penawaran terbaik untuk penerbangan, hotel, dan paket liburan\",\n  };\n}\n\nexport default async function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const locale = await getLocale();\n  const messages = await getMessages();\n\n  return (\n    <html lang={locale}>\n      <body className=\"antialiased\">\n        <NextIntlClientProvider messages={messages}>\n          <ErrorReporter />\n          <Script\n            src=\"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/scripts//route-messenger.js\"\n            strategy=\"afterInteractive\"\n            data-target-origin=\"*\"\n            data-message-type=\"ROUTE_CHANGE\"\n            data-include-search-params=\"true\"\n            data-only-in-iframe=\"true\"\n            data-debug=\"true\"\n            data-custom-data='{\"appName\": \"YourApp\", \"version\": \"1.0.0\", \"greeting\": \"hi\"}'\n          />\n          {children}\n        </NextIntlClientProvider>\n      </body>\n    </html>\n  );\n}\n","size_bytes":1712},"src/components/packages/package-card.tsx":{"content":"'use client';\n\nimport { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { MapPin, Calendar, Check } from 'lucide-react';\nimport Link from 'next/link';\n\ninterface City {\n  id: string;\n  name: string;\n  description: string;\n  imageUrl: string;\n  createdAt: Date;\n}\n\ninterface PackageWithCity {\n  id: string;\n  cityId: string;\n  name: string;\n  description: string;\n  price: number;\n  durationDays: number;\n  imageUrl: string;\n  features: string[];\n  createdAt: Date;\n  city: City;\n}\n\ninterface PackageCardProps {\n  package: PackageWithCity;\n}\n\nexport default function PackageCard({ package: pkg }: PackageCardProps) {\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const features = Array.isArray(pkg.features) ? pkg.features : [];\n\n  return (\n    <Card className=\"overflow-hidden hover:shadow-lg transition-shadow duration-300 flex flex-col\">\n      <div className=\"relative h-48 overflow-hidden\">\n        <img\n          src={pkg.imageUrl}\n          alt={pkg.name}\n          className=\"w-full h-full object-cover transition-transform duration-300 hover:scale-110\"\n        />\n        <Badge className=\"absolute top-3 left-3 bg-primary text-primary-foreground\">\n          {pkg.name}\n        </Badge>\n      </div>\n\n      <CardHeader className=\"space-y-2\">\n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n          <MapPin className=\"w-4 h-4\" />\n          <span>{pkg.city.name}</span>\n        </div>\n        <h3 className=\"text-xl font-bold line-clamp-1\">\n          {pkg.city.name} - {pkg.name}\n        </h3>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 space-y-4\">\n        <p className=\"text-muted-foreground text-sm line-clamp-2\">\n          {pkg.description}\n        </p>\n\n        <div className=\"flex items-center gap-2 text-sm\">\n          <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n          <span>{pkg.durationDays} Hari</span>\n        </div>\n\n        <div className=\"space-y-2\">\n          <p className=\"text-sm font-semibold\">Yang Didapatkan:</p>\n          <ul className=\"space-y-1\">\n            {features.slice(0, 3).map((feature, index) => (\n              <li key={index} className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                <Check className=\"w-4 h-4 mt-0.5 flex-shrink-0\" style={{ color: '#dcac56' }} />\n                <span>{feature}</span>\n              </li>\n            ))}\n            {features.length > 3 && (\n              <li className=\"text-sm text-primary font-medium\">\n                +{features.length - 3} lainnya\n              </li>\n            )}\n          </ul>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"flex items-center justify-between pt-4 border-t\">\n        <div>\n          <p className=\"text-sm text-muted-foreground\">Mulai dari</p>\n          <p className=\"text-2xl font-bold text-primary\">{formatPrice(Number(pkg.price))}</p>\n        </div>\n        <Link href={`/packages/${pkg.id}`}>\n          <Button size=\"lg\">\n            Lihat Detail\n          </Button>\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":3327},"src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1891},"src/app/api/flights/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    const updatedFlight = await prisma.flightPackage.update({\n      where: { id },\n      data: {\n        airline: body.airline,\n        flightNumber: body.flightNumber,\n        origin: body.origin,\n        destination: body.destination,\n        departureTime: body.departureTime,\n        arrivalTime: body.arrivalTime,\n        price: body.price,\n        class: body.class,\n        availableSeats: body.availableSeats,\n        duration: body.duration,\n        baggage: body.baggage,\n        isActive: body.isActive,\n        updatedAt: new Date(),\n      },\n    });\n\n    return NextResponse.json(updatedFlight);\n  } catch (error) {\n    console.error('Error updating flight:', error);\n    return NextResponse.json(\n      { error: 'Failed to update flight' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    await prisma.flightPackage.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting flight:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete flight' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1523},"src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      style={\n        {\n          \"--normal-bg\": \"var(--popover)\",\n          \"--normal-text\": \"var(--popover-foreground)\",\n          \"--normal-border\": \"var(--border)\",\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":564},"src/app/support/page.tsx":{"content":"import { useTranslations } from 'next-intl';\nimport HeaderNavigation from '@/components/sections/header-navigation';\nimport Footer from '@/components/sections/footer';\nimport { Mail, Phone, MessageCircle, Clock } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n\nexport default function SupportPage() {\n  const t = useTranslations('support');\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <HeaderNavigation mode=\"page\" />\n\n      <main className=\"flex-1 pt-24 pb-16 px-4 sm:px-6 lg:px-20\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold mb-4\">{t('title')}</h1>\n            <p className=\"text-muted-foreground text-lg\">{t('subtitle')}</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n            <Card>\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n                  <Mail className=\"h-6 w-6 text-primary\" />\n                </div>\n                <CardTitle className=\"text-lg\">{t('email.title')}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-4\">{t('email.description')}</p>\n                <a href=\"mailto:support@golobe.com\" className=\"text-primary hover:underline\">\n                  support@golobe.com\n                </a>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n                  <Phone className=\"h-6 w-6 text-primary\" />\n                </div>\n                <CardTitle className=\"text-lg\">{t('phone.title')}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-4\">{t('phone.description')}</p>\n                <a href=\"tel:+1234567890\" className=\"text-primary hover:underline\">\n                  +1 (234) 567-890\n                </a>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n                  <MessageCircle className=\"h-6 w-6 text-primary\" />\n                </div>\n                <CardTitle className=\"text-lg\">{t('chat.title')}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-4\">{t('chat.description')}</p>\n                <Button variant=\"outline\" size=\"sm\">{t('chat.button')}</Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n                  <Clock className=\"h-6 w-6 text-primary\" />\n                </div>\n                <CardTitle className=\"text-lg\">{t('hours.title')}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground\">{t('hours.description')}</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"space-y-8\">\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-6\">{t('faq.title')}</h2>\n              <div className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">{t('faq.q1.question')}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-muted-foreground\">{t('faq.q1.answer')}</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">{t('faq.q2.question')}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-muted-foreground\">{t('faq.q2.answer')}</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">{t('faq.q3.question')}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-muted-foreground\">{t('faq.q3.answer')}</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">{t('faq.q4.question')}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-muted-foreground\">{t('faq.q4.answer')}</p>\n                  </CardContent>\n                </Card>\n              </div>\n            </section>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5098},"src/components/ui/toggle.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Toggle, toggleVariants }\n","size_bytes":1570},"src/lib/auth.ts":{"content":"import bcrypt from 'bcrypt'\nimport { prisma } from './prisma'\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10)\n}\n\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword)\n}\n\nexport async function createAdmin(email: string, password: string, name?: string) {\n  const hashedPassword = await hashPassword(password)\n  return prisma.admin.create({\n    data: {\n      email,\n      password: hashedPassword,\n      name,\n    },\n  })\n}\n\nexport async function authenticateAdmin(email: string, password: string) {\n  const admin = await prisma.admin.findUnique({\n    where: { email },\n  })\n\n  if (!admin) {\n    return null\n  }\n\n  const isValid = await verifyPassword(password, admin.password)\n  if (!isValid) {\n    return null\n  }\n\n  return {\n    id: admin.id,\n    email: admin.email,\n    name: admin.name,\n  }\n}\n","size_bytes":951},"src/components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":611},"src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Menubar({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Root>) {\n  return (\n    <MenubarPrimitive.Root\n      data-slot=\"menubar\"\n      className={cn(\n        \"bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu data-slot=\"menubar-menu\" {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group data-slot=\"menubar-group\" {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal data-slot=\"menubar-portal\" {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return (\n    <MenubarPrimitive.RadioGroup data-slot=\"menubar-radio-group\" {...props} />\n  )\n}\n\nfunction MenubarTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {\n  return (\n    <MenubarPrimitive.Trigger\n      data-slot=\"menubar-trigger\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarContent({\n  className,\n  align = \"start\",\n  alignOffset = -4,\n  sideOffset = 8,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Content>) {\n  return (\n    <MenubarPortal>\n      <MenubarPrimitive.Content\n        data-slot=\"menubar-content\"\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPortal>\n  )\n}\n\nfunction MenubarItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <MenubarPrimitive.Item\n      data-slot=\"menubar-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {\n  return (\n    <MenubarPrimitive.CheckboxItem\n      data-slot=\"menubar-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.CheckboxItem>\n  )\n}\n\nfunction MenubarRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {\n  return (\n    <MenubarPrimitive.RadioItem\n      data-slot=\"menubar-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.RadioItem>\n  )\n}\n\nfunction MenubarLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.Label\n      data-slot=\"menubar-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {\n  return (\n    <MenubarPrimitive.Separator\n      data-slot=\"menubar-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"menubar-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nfunction MenubarSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.SubTrigger\n      data-slot=\"menubar-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\n    </MenubarPrimitive.SubTrigger>\n  )\n}\n\nfunction MenubarSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {\n  return (\n    <MenubarPrimitive.SubContent\n      data-slot=\"menubar-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Menubar,\n  MenubarPortal,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarGroup,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarItem,\n  MenubarShortcut,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n}\n","size_bytes":8394},"src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21633},"src/app/admin/dashboard/reviews/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Plus, Edit, Trash2, X, Star } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { CustomerReview } from \"@/types\";\n\nexport default function ReviewsPage() {\n  const [reviews, setReviews] = useState<CustomerReview[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingReview, setEditingReview] = useState<CustomerReview | null>(null);\n  const [formData, setFormData] = useState({\n    customerName: \"\",\n    rating: \"5\",\n    comment: \"\",\n    imageUrl: \"\",\n    location: \"\",\n    isActive: true,\n  });\n  const [file, setFile] = useState<File | null>(null);\n\n  useEffect(() => {\n    loadReviews();\n  }, []);\n\n  const loadReviews = async () => {\n    try {\n      const response = await fetch('/api/reviews');\n      if (!response.ok) throw new Error('Failed to load reviews');\n      const data = await response.json();\n      setReviews(data || []);\n    } catch (error) {\n      console.error(\"Error loading reviews:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      if (editingReview) {\n        if (file) {\n          const fd = new FormData();\n          fd.append('customerName', formData.customerName);\n          fd.append('rating', String(parseInt(formData.rating)));\n          fd.append('comment', formData.comment);\n          fd.append('location', formData.location);\n          fd.append('isActive', String(formData.isActive));\n          fd.append('image', file);\n          const response = await fetch(`/api/reviews/${editingReview.id}`, { method: 'PUT', body: fd });\n          if (!response.ok) throw new Error('Failed to update review');\n        } else {\n          const payload = {\n            customerName: formData.customerName,\n            rating: parseInt(formData.rating),\n            comment: formData.comment,\n            imageUrl: formData.imageUrl || undefined,\n            location: formData.location || undefined,\n            isActive: formData.isActive,\n          };\n          const response = await fetch(`/api/reviews/${editingReview.id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n          });\n          if (!response.ok) throw new Error('Failed to update review');\n        }\n      } else {\n        if (file) {\n          const fd = new FormData();\n          fd.append('customerName', formData.customerName);\n          fd.append('rating', String(parseInt(formData.rating)));\n          fd.append('comment', formData.comment);\n          fd.append('location', formData.location);\n          fd.append('isActive', String(formData.isActive));\n          fd.append('image', file);\n          const response = await fetch('/api/reviews', { method: 'POST', body: fd });\n          if (!response.ok) throw new Error('Failed to create review');\n        } else {\n          const payload = {\n            customerName: formData.customerName,\n            rating: parseInt(formData.rating),\n            comment: formData.comment,\n            imageUrl: formData.imageUrl || undefined,\n            location: formData.location || undefined,\n            isActive: formData.isActive,\n          };\n          const response = await fetch('/api/reviews', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n          });\n          if (!response.ok) throw new Error('Failed to create review');\n        }\n      }\n\n      resetForm();\n      loadReviews();\n    } catch (error) {\n      console.error(\"Error saving review:\", error);\n      alert(\"Failed to save review\");\n    }\n  };\n\n  const handleEdit = (review: CustomerReview) => {\n    setEditingReview(review);\n    setFormData({\n      customerName: review.customerName,\n      rating: review.rating.toString(),\n      comment: review.comment,\n      imageUrl: review.imageUrl || \"\",\n      location: review.location || \"\",\n      isActive: review.isActive,\n    });\n    setFile(null);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm(\"Are you sure you want to delete this review?\")) return;\n\n    try {\n      const response = await fetch(`/api/reviews/${id}`, { method: 'DELETE' });\n      if (!response.ok) throw new Error('Failed to delete review');\n      loadReviews();\n    } catch (error) {\n      console.error(\"Error deleting review:\", error);\n      alert(\"Failed to delete review\");\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      customerName: \"\",\n      rating: \"5\",\n      comment: \"\",\n      imageUrl: \"\",\n      location: \"\",\n      isActive: true,\n    });\n    setFile(null);\n    setEditingReview(null);\n    setShowForm(false);\n  };\n\n  const renderStars = (rating: number) => {\n    return (\n      <div className=\"flex gap-1\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`h-4 w-4 ${star <= rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'}`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center p-12\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Customer Reviews Management</h1>\n          <p className=\"text-muted-foreground\">Manage customer reviews and testimonials</p>\n        </div>\n        <Button onClick={() => setShowForm(true)}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Review\n        </Button>\n      </div>\n\n      {showForm && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>{editingReview ? \"Edit Review\" : \"Add New Review\"}</CardTitle>\n              <Button variant=\"ghost\" size=\"icon\" onClick={resetForm}>\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <label className=\"text-sm font-medium\">Customer Name</label>\n                  <Input\n                    value={formData.customerName}\n                    onChange={(e) => setFormData({ ...formData, customerName: e.target.value })}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Rating (1-5)</label>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"5\"\n                    value={formData.rating}\n                    onChange={(e) => setFormData({ ...formData, rating: e.target.value })}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Location (Optional)</label>\n                  <Input\n                    value={formData.location}\n                    onChange={(e) => setFormData({ ...formData, location: e.target.value })}\n                    placeholder=\"e.g., New York, USA\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Customer Image URL (Optional)</label>\n                  <Input\n                    value={formData.imageUrl}\n                    onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                    placeholder=\"https://example.com/avatar.jpg\"\n                  />\n                  <div className=\"mt-3\">\n                    <label className=\"text-sm font-medium\">Or Upload Image</label>\n                    <Input type=\"file\" accept=\"image/*\" onChange={(e) => setFile(e.target.files?.[0] || null)} />\n                    {file && (\n                      <p className=\"mt-1 text-xs text-gray-500\">Selected: {file.name}</p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium\">Review Comment</label>\n                  <Textarea\n                    value={formData.comment}\n                    onChange={(e) => setFormData({ ...formData, comment: e.target.value })}\n                    rows={4}\n                    required\n                  />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                  />\n                  <label className=\"text-sm font-medium\">Active</label>\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\">\n                  {editingReview ? \"Update\" : \"Create\"} Review\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {reviews.map((review) => (\n          <Card key={review.id}>\n            <CardContent className=\"p-4 space-y-3\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  {review.imageUrl && (\n                    <div className=\"relative h-12 w-12 rounded-full overflow-hidden\">\n                      <Image\n                        src={review.imageUrl}\n                        alt={review.customerName}\n                        fill\n                        className=\"object-cover\"\n                      />\n                    </div>\n                  )}\n                  <div>\n                    <h3 className=\"font-bold\">{review.customerName}</h3>\n                    {review.location && (\n                      <p className=\"text-xs text-muted-foreground\">{review.location}</p>\n                    )}\n                  </div>\n                </div>\n                <span className={`text-xs px-2 py-1 rounded ${review.isActive ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'}`}>\n                  {review.isActive ? 'Active' : 'Inactive'}\n                </span>\n              </div>\n              <div>{renderStars(review.rating)}</div>\n              <p className=\"text-sm line-clamp-3\">{review.comment}</p>\n              <div className=\"flex gap-2 pt-2\">\n                <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(review)}>\n                  <Edit className=\"h-4 w-4\" />\n                </Button>\n                <Button size=\"sm\" variant=\"destructive\" onClick={() => handleDelete(review.id)}>\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {reviews.length === 0 && !showForm && (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-gray-600\">No reviews found. Add your first review to get started.</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":11786},"src/components/packages/payment-modal.tsx":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Copy, Check, CreditCard, Building2 } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface City {\n  id: string;\n  name: string;\n  description: string;\n  imageUrl: string;\n  createdAt: Date;\n}\n\ninterface PackageWithCity {\n  id: string;\n  cityId: string;\n  name: string;\n  description: string;\n  price: number;\n  durationDays: number;\n  imageUrl: string;\n  features: string[];\n  createdAt: Date;\n  city: City;\n}\n\ninterface PaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  package: PackageWithCity;\n}\n\nexport default function PaymentModal({ isOpen, onClose, package: pkg }: PaymentModalProps) {\n  const [copiedField, setCopiedField] = useState<string | null>(null);\n  const [bankAccounts, setBankAccounts] = useState<Array<{\n    id: string;\n    bankName: string;\n    accountNumber: string;\n    accountName: string;\n  }>>([]);\n  const [whatsappNumber, setWhatsappNumber] = useState<string>(\"\");\n\n  useEffect(() => {\n    fetch('/api/bank-accounts')\n      .then(res => res.json())\n      .then(data => {\n        if (Array.isArray(data)) {\n          setBankAccounts(data);\n        }\n      })\n      .catch(error => console.error('Error fetching bank accounts:', error));\n  }, []);\n\n  useEffect(() => {\n    fetch('/api/settings')\n      .then(res => res.json())\n      .then(data => {\n        if (data && typeof data.whatsappNumber === 'string') {\n          setWhatsappNumber(data.whatsappNumber);\n        }\n      })\n      .catch(error => console.error('Error fetching settings:', error));\n  }, []);\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const handleCopy = (text: string, field: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedField(field);\n    toast.success('Berhasil disalin!');\n    setTimeout(() => setCopiedField(null), 2000);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl flex items-center gap-2\">\n            <CreditCard className=\"w-6 h-6\" />\n            Informasi Pembayaran\n          </DialogTitle>\n          <DialogDescription>\n            Transfer ke salah satu rekening di bawah ini dengan nominal yang sesuai\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          <Card className=\"bg-primary/5\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-sm text-muted-foreground\">Total Pembayaran</p>\n                <p className=\"text-4xl font-bold text-primary\">{formatPrice(Number(pkg.price))}</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  untuk {pkg.city.name} - {pkg.name} ({pkg.durationDays} Hari)\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 text-sm font-semibold\">\n              <Building2 className=\"w-4 h-4\" />\n              <span>Pilih Rekening Tujuan:</span>\n            </div>\n\n            {bankAccounts.map((account, index) => (\n              <Card key={index} className=\"border-2 hover:border-primary transition-colors\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-lg font-bold\">{account.bankName}</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {account.accountName}\n                      </span>\n                    </div>\n\n                    <div className=\"flex items-center justify-between bg-muted p-3 rounded-lg\">\n                      <span className=\"font-mono font-semibold text-lg\">\n                        {account.accountNumber}\n                      </span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() =>\n                          handleCopy(account.accountNumber, `${account.bankName}-number`)\n                        }\n                      >\n                        {copiedField === `${account.bankName}-number` ? (\n                          <Check className=\"w-4 h-4\" style={{ color: '#dcac56' }} />\n                        ) : (\n                          <Copy className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {whatsappNumber && (\n            <Card className=\"bg-primary/10 dark:bg-primary/20 border-primary/30 dark:border-primary/50\">\n              <CardContent className=\"pt-6\">\n                <p className=\"text-sm\">\n                  Setelah melakukan pembayaran, silakan hubungi kami melalui WhatsApp di nomor{' '}\n                  <a\n                    className=\"font-semibold text-primary underline\"\n                    href={`https://wa.me/${whatsappNumber.replace(/\\D/g, '')}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {whatsappNumber}\n                  </a>\n                  .\n                </p>\n              </CardContent>\n            </Card>\n          )}\n\n          <Card className=\"bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800\">\n            <CardContent className=\"pt-6\">\n              <div className=\"space-y-2 text-sm\">\n                <p className=\"font-semibold\">Catatan Penting:</p>\n                <ul className=\"list-disc list-inside space-y-1 text-muted-foreground\">\n                  <li>Transfer sesuai dengan nominal yang tertera</li>\n                  <li>Simpan bukti transfer untuk konfirmasi</li>\n                  <li>Pembayaran akan diverifikasi dalam 1x24 jam</li>\n                  <li>Hubungi CS kami jika ada kendala</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <DialogFooter>\n          <Button type=\"button\" onClick={onClose} className=\"w-full\">\n            Tutup\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6778},"src/app/admin/login/page.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { loginAdmin } from \"@/lib/admin-auth\";\n\nexport default function AdminLoginPage() {\n  const router = useRouter();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setLoading(true);\n\n    const result = await loginAdmin(email, password);\n\n    if (result.success) {\n      router.push(\"/admin/dashboard\");\n    } else {\n      setError(result.error || \"Login failed\");\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-50 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold\">Admin Login</CardTitle>\n          <CardDescription>Enter your credentials to access the admin dashboard</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            {error && (\n              <div className=\"rounded-md bg-red-50 p-3 text-sm text-red-800\">\n                {error}\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium\">\n                Email\n              </label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"admin@example.com\"\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"password\" className=\"text-sm font-medium\">\n                Password\n              </label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                required\n              />\n            </div>\n\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? \"Logging in...\" : \"Login\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2629},"next.config.ts":{"content":"import type { NextConfig } from \"next\";\nimport createNextIntlPlugin from 'next-intl/plugin';\n\nconst withNextIntl = createNextIntlPlugin('./src/i18n/request.ts');\n\nconst nextConfig: NextConfig = {\n  images: {\n    remotePatterns: [\n      { protocol: \"https\", hostname: \"**\" },\n      { protocol: \"http\", hostname: \"**\" },\n    ],\n    unoptimized: true,\n  },\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n};\n\nexport default withNextIntl(nextConfig);\n","size_bytes":496},"src/components/sections/popular-hotel-destinations.tsx":{"content":"import Image from \"next/image\";\nimport Link from \"next/link\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nconst hotelDestinations = [\n  {\n    city: \"Sarasota\",\n    country: \"USA\",\n    type: \"Boutique\",\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-985638-pexels-photo-297983.jpeg?\",\n  },\n  {\n    city: \"Kirkland\",\n    country: \"USA\",\n    type: \"Budget\",\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-535755-pexels-photo-14024792.jpeg?\",\n  },\n  {\n    city: \"Austin\",\n    country: \"USA\",\n    type: \"Budget\",\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-665191-pexels-photo-13312426.jpeg?\",\n  },\n  {\n    city: \"Honolulu\",\n    country: \"USA\",\n    type: \"Suite\",\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-622162-pexels-photo-6243853.jpeg?\",\n  },\n  {\n    city: \"Denver\",\n    country: \"USA\",\n    type: \"Resort and Spa\",\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-543105-pexels-photo-9400979.jpeg?\",\n  },\n  {\n    city: \"Lexington\",\n    country: \"USA\",\n    type: \"Budget\",\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-178325-free-photo-of-palm-trees-by-the-pool.jpeg?\",\n  },\n  {\n    city: \"Seattle\",\n    country: \"USA\",\n    type: \"Suite\",\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-563701-free-photo-of-scenic-resort-at-tegenungan-waterfall-in-ubud-bali.jpeg?\",\n  },\n  {\n    city: \"Tulsa\",\n    country: \"USA\",\n    type: \"Suite\",\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-381585-pexels-photo-338504.jpeg?\",\n  },\n  {\n    city: \"Redmond\",\n    country: \"USA\",\n    type: \"Budget\",\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-563701-free-photo-of-scenic-resort-at-tegenungan-waterfall-in-ubud-bali.jpeg?\",\n  },\n  {\n    city: \"Detroit\",\n    country: \"USA\",\n    type: \"Budget\",\n    image: \"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/images/next-326416-pexels-photo-9400828.jpeg?\",\n  },\n];\n\nconst checkIn = 1760227200000;\nconst checkOut = 1760313600000;\nconst rooms = 1;\nconst guests = 1;\n\nconst PopularHotelDestinations = () => {\n  return (\n    <section className=\"mx-auto\">\n      <div className=\"mx-auto mb-[20px] flex items-center justify-between max-md:flex-col max-md:gap-[16px] md:mb-[40px]\">\n        <div className=\"md:flex-[0_0_50%]\">\n          <h2 className=\"mb-2 text-center text-[2rem] font-semibold text-black md:mb-4 md:text-left\">\n            Popular Hotel Destinations\n          </h2>\n          <p className=\"text-center text-medium-gray md:text-left opacity-75\">\n            Explore the most sought-after destinations for hotel stays. From\n            tropical beaches to urban centers, discover where travelers love to\n            stay.\n          </p>\n        </div>\n      </div>\n      <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4\">\n        {hotelDestinations.map((dest) => {\n          const href = `/hotels/search/city=${dest.city}&country=${dest.country}&checkIn=${checkIn}&checkOut=${checkOut}&rooms=${rooms}&guests=${guests}`;\n          return (\n            <Link href={href} key={dest.city} className=\"group\">\n              <Card className=\"overflow-hidden rounded-lg border shadow-sm transition-all duration-300 hover:shadow-lg\">\n                <CardContent className=\"p-0\">\n                  <div className=\"relative h-48 overflow-hidden\">\n                    <Image\n                      src={dest.image}\n                      alt={`hotel_image_${dest.city}_${dest.country}`}\n                      fill\n                      className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n                      sizes=\"(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 25vw\"\n                    />\n                    <div className=\"absolute right-3 top-3 rounded-full bg-white px-3 py-1 text-sm font-semibold text-black shadow-md\">\n                      {dest.type}\n                    </div>\n                    <div className=\"absolute bottom-0 left-0 right-0 bg-white/95 backdrop-blur-sm p-4\">\n                      <h3 className=\"text-lg font-bold text-gray-900\">\n                        {dest.city}, {dest.country}\n                      </h3>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          );\n        })}\n      </div>\n    </section>\n  );\n};\n\nexport default PopularHotelDestinations;","size_bytes":5549},"README.md":{"content":"# Travel Booking Website - NextJS + PostgreSQL + Prisma\n\nWebsite travel booking fullstack menggunakan NextJS 15, PostgreSQL, dan Prisma ORM.\n\n## Tech Stack\n\n- **Frontend**: NextJS 15, React 19, TailwindCSS, shadcn/ui\n- **Backend**: NextJS API Routes\n- **Database**: PostgreSQL\n- **ORM**: Prisma\n- **Authentication**: Custom Auth dengan bcrypt\n- **Deployment**: Ready for Vercel/Any Node.js hosting\n\n## Features\n\n✅ **Public Features**\n- Browse travel packages by city\n- View package details with pricing\n- Flight search and booking\n- Payment flow dengan multiple bank options\n- Responsive design untuk mobile dan desktop\n\n✅ **Admin Features**\n- Admin authentication\n- Cities management (CRUD)\n- Dashboard overview\n- Manage packages, flights, destinations (placeholder)\n\n## Quick Start\n\n### 1. Install Dependencies\n\n```bash\nnpm install\n```\n\n### 2. Setup Database\n\nPastikan PostgreSQL sudah running, kemudian:\n\n```bash\n# Generate Prisma Client\nnpm run prisma:generate\n\n# Setup database dengan migration\npsql \"postgresql://postgres:EDUJUANDA12345@localhost:5432/travel\" -f migrations/001_initial_setup.sql\n\n# Atau gunakan Prisma push untuk development\nnpm run prisma:push\n```\n\nLihat [DATABASE_SETUP.md](./DATABASE_SETUP.md) untuk instruksi lengkap.\n\n### 3. Environment Variables\n\nFile `.env` sudah dikonfigurasi:\n\n```env\nDATABASE_URL=\"postgresql://postgres:EDUJUANDA12345@localhost:5432/travel\"\n```\n\nSesuaikan dengan credentials PostgreSQL Anda jika berbeda.\n\n### 4. Run Development Server\n\n```bash\nnpm run dev\n```\n\nBuka [http://localhost:3000](http://localhost:3000) untuk melihat website.\n\n### 5. Create Admin Account\n\nVisit [http://localhost:3000/admin/setup](http://localhost:3000/admin/setup) untuk membuat admin account pertama.\n\n## Available Scripts\n\n```bash\nnpm run dev              # Start development server\nnpm run build            # Build untuk production\nnpm run start            # Start production server\nnpm run lint             # Run linter\n\n# Prisma commands\nnpm run prisma:generate  # Generate Prisma Client\nnpm run prisma:push      # Push schema ke database (development)\nnpm run prisma:migrate   # Create migration (production)\nnpm run prisma:studio    # Open Prisma Studio (database GUI)\n```\n\n## Project Structure\n\n```\n├── src/\n│   ├── app/                    # NextJS App Router\n│   │   ├── api/               # API Routes\n│   │   │   ├── admin/         # Admin auth endpoints\n│   │   │   ├── cities/        # Cities CRUD\n│   │   │   ├── packages/      # Packages CRUD\n│   │   │   ├── flights/       # Flights CRUD\n│   │   │   └── payments/      # Payments CRUD\n│   │   ├── admin/             # Admin pages\n│   │   ├── packages/          # Public package pages\n│   │   └── flights/           # Public flight pages\n│   ├── components/            # React components\n│   │   ├── ui/                # shadcn/ui components\n│   │   ├── sections/          # Section components\n│   │   ├── packages/          # Package components\n│   │   └── flights/           # Flight components\n│   ├── lib/                   # Utility functions\n│   │   ├── prisma.ts          # Prisma client\n│   │   ├── auth.ts            # Auth helpers\n│   │   └── admin-auth.ts      # Admin auth\n│   └── types/                 # TypeScript types\n├── prisma/\n│   └── schema.prisma          # Prisma schema\n├── migrations/                # SQL migrations\n└── public/                    # Static files\n```\n\n## Database Schema\n\n### Main Tables\n\n- **cities** - Daftar kota destinasi\n- **packages** - Paket perjalanan dengan relasi ke cities\n- **payments** - Transaksi pembayaran\n- **flight_packages** - Paket penerbangan\n- **users** - User accounts\n- **admins** - Admin accounts\n\nLihat [MIGRATION_GUIDE.md](./MIGRATION_GUIDE.md) untuk detail lengkap.\n\n## API Routes\n\n### Public Endpoints\n\n```\nGET  /api/packages          # List all packages\nGET  /api/packages/[id]     # Get package details\nGET  /api/cities            # List all cities\nGET  /api/flights           # List flights (with filters)\nPOST /api/payments          # Create payment\n```\n\n### Admin Endpoints\n\n```\nPOST /api/admin/login       # Admin login\nPOST /api/admin/register    # Admin registration\n\nPOST   /api/cities          # Create city\nPUT    /api/cities/[id]     # Update city\nDELETE /api/cities/[id]     # Delete city\n\nPOST   /api/packages        # Create package\nPUT    /api/packages/[id]   # Update package\nDELETE /api/packages/[id]   # Delete package\n\n# Similar endpoints for flights\n```\n\n## Development Guide\n\n### Adding New Features\n\n1. **Create Prisma Model** di `prisma/schema.prisma`\n2. **Generate Prisma Client**: `npm run prisma:generate`\n3. **Create API Routes** di `src/app/api/`\n4. **Create Components** di `src/components/`\n5. **Create Pages** di `src/app/`\n\n### Database Management\n\n```bash\n# View data in Prisma Studio\nnpm run prisma:studio\n\n# Create new migration\nnpm run prisma:migrate\n\n# Reset database (development only)\nnpx prisma migrate reset\n```\n\n## Production Deployment\n\n### 1. Build Application\n\n```bash\nnpm run build\n```\n\n### 2. Setup Database\n\nJalankan migration di production database:\n\n```bash\nnpx prisma migrate deploy\n```\n\n### 3. Deploy\n\nDeploy ke platform pilihan (Vercel, Railway, dll):\n\n```bash\n# Vercel\nvercel deploy\n\n# Or any Node.js hosting\nnpm start\n```\n\n### Environment Variables untuk Production\n\n```env\nDATABASE_URL=\"your_production_database_url\"\nNODE_ENV=\"production\"\n```\n\n## Migration from Supabase\n\nWebsite ini telah dimigrasi dari Supabase ke PostgreSQL + Prisma. Lihat [MIGRATION_GUIDE.md](./MIGRATION_GUIDE.md) untuk detail lengkap proses migrasi.\n\n## Troubleshooting\n\n### Build Errors\n\n```bash\n# Clear cache dan rebuild\nrm -rf .next\nnpm run build\n```\n\n### Database Connection Issues\n\n```bash\n# Test connection\npsql $DATABASE_URL -c \"SELECT 1\"\n\n# Check Prisma connection\nnpx prisma db pull\n```\n\n### Prisma Issues\n\n```bash\n# Regenerate Prisma Client\nnpm run prisma:generate\n\n# Reset Prisma cache\nrm -rf node_modules/.prisma\nnpm run prisma:generate\n```\n\n## Contributing\n\n1. Fork repository\n2. Create feature branch\n3. Commit changes\n4. Push ke branch\n5. Create Pull Request\n\n## License\n\nMIT License - feel free to use for personal and commercial projects.\n\n## Support\n\nUntuk issue atau pertanyaan:\n1. Check [MIGRATION_GUIDE.md](./MIGRATION_GUIDE.md)\n2. Check [DATABASE_SETUP.md](./DATABASE_SETUP.md)\n3. Create GitHub issue\n\n---\n\nBuilt with ❤️ using NextJS + PostgreSQL + Prisma\n","size_bytes":6615},"src/components/ui/radio-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn(\"grid gap-3\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        \"border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1466},"src/app/admin/dashboard/hero-banners/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Plus, Edit, Trash2, X } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { HeroBanner } from \"@/types\";\n\nexport default function HeroBannersPage() {\n  const [banners, setBanners] = useState<HeroBanner[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingBanner, setEditingBanner] = useState<HeroBanner | null>(null);\n  const [formData, setFormData] = useState({\n    title: \"\",\n    subtitle: \"\",\n    imageUrl: \"\",\n    isActive: true,\n    order: \"\",\n  });\n  const [file, setFile] = useState<File | null>(null);\n\n  useEffect(() => {\n    loadBanners();\n  }, []);\n\n  const loadBanners = async () => {\n    try {\n      const response = await fetch('/api/hero-banners');\n      if (!response.ok) throw new Error('Failed to load hero banners');\n      const data = await response.json();\n      setBanners(data || []);\n    } catch (error) {\n      console.error(\"Error loading hero banners:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      if (editingBanner) {\n        if (file) {\n          const fd = new FormData();\n          fd.append('title', formData.title);\n          fd.append('subtitle', formData.subtitle);\n          fd.append('isActive', String(formData.isActive));\n          fd.append('order', String(parseInt(formData.order) || 0));\n          fd.append('image', file);\n          const response = await fetch(`/api/hero-banners/${editingBanner.id}`, { method: 'PUT', body: fd });\n          if (!response.ok) throw new Error('Failed to update hero banner');\n        } else {\n          const payload = {\n            title: formData.title,\n            subtitle: formData.subtitle,\n            imageUrl: formData.imageUrl,\n            isActive: formData.isActive,\n            order: parseInt(formData.order) || 0,\n          };\n          const response = await fetch(`/api/hero-banners/${editingBanner.id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n          });\n          if (!response.ok) throw new Error('Failed to update hero banner');\n        }\n      } else {\n        if (file) {\n          const fd = new FormData();\n          fd.append('title', formData.title);\n          fd.append('subtitle', formData.subtitle);\n          fd.append('isActive', String(formData.isActive));\n          fd.append('order', String(parseInt(formData.order) || 0));\n          fd.append('image', file);\n          const response = await fetch('/api/hero-banners', { method: 'POST', body: fd });\n          if (!response.ok) throw new Error('Failed to create hero banner');\n        } else {\n          const payload = {\n            title: formData.title,\n            subtitle: formData.subtitle,\n            imageUrl: formData.imageUrl,\n            isActive: formData.isActive,\n            order: parseInt(formData.order) || 0,\n          };\n          const response = await fetch('/api/hero-banners', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n          });\n          if (!response.ok) throw new Error('Failed to create hero banner');\n        }\n      }\n\n      resetForm();\n      loadBanners();\n    } catch (error) {\n      console.error(\"Error saving hero banner:\", error);\n      alert(\"Failed to save hero banner\");\n    }\n  };\n\n  const handleEdit = (banner: HeroBanner) => {\n    setEditingBanner(banner);\n    setFormData({\n      title: banner.title,\n      subtitle: banner.subtitle,\n      imageUrl: banner.imageUrl,\n      isActive: banner.isActive,\n      order: banner.order.toString(),\n    });\n    setFile(null);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm(\"Are you sure you want to delete this hero banner?\")) return;\n\n    try {\n      const response = await fetch(`/api/hero-banners/${id}`, { method: 'DELETE' });\n      if (!response.ok) throw new Error('Failed to delete hero banner');\n      loadBanners();\n    } catch (error) {\n      console.error(\"Error deleting hero banner:\", error);\n      alert(\"Failed to delete hero banner\");\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      subtitle: \"\",\n      imageUrl: \"\",\n      isActive: true,\n      order: \"\",\n    });\n    setFile(null);\n    setEditingBanner(null);\n    setShowForm(false);\n  };\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center p-12\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Hero Banners Management</h1>\n          <p className=\"text-muted-foreground\">Manage hero banners displayed on homepage</p>\n        </div>\n        <Button onClick={() => setShowForm(true)}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Hero Banner\n        </Button>\n      </div>\n\n      {showForm && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>{editingBanner ? \"Edit Hero Banner\" : \"Add New Hero Banner\"}</CardTitle>\n              <Button variant=\"ghost\" size=\"icon\" onClick={resetForm}>\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <label className=\"text-sm font-medium\">Title</label>\n                  <Input\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Order</label>\n                  <Input\n                    type=\"number\"\n                    value={formData.order}\n                    onChange={(e) => setFormData({ ...formData, order: e.target.value })}\n                    placeholder=\"0\"\n                  />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium\">Subtitle</label>\n                  <Textarea\n                    value={formData.subtitle}\n                    onChange={(e) => setFormData({ ...formData, subtitle: e.target.value })}\n                    rows={2}\n                  />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium\">Image URL (optional)</label>\n                  <Input\n                    value={formData.imageUrl}\n                    onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                    placeholder=\"https://example.com/image.jpg\"\n                  />\n                  <div className=\"mt-3\">\n                    <label className=\"text-sm font-medium\">Or Upload Image</label>\n                    <Input type=\"file\" accept=\"image/*\" onChange={(e) => setFile(e.target.files?.[0] || null)} />\n                    {file && (\n                      <p className=\"mt-1 text-xs text-gray-500\">Selected: {file.name}</p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                  />\n                  <label className=\"text-sm font-medium\">Active</label>\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\">\n                  {editingBanner ? \"Update\" : \"Create\"} Hero Banner\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {banners.map((banner) => (\n          <Card key={banner.id}>\n            <CardContent className=\"p-0\">\n              {banner.imageUrl && (\n                <div className=\"relative h-48 w-full\">\n                  <Image\n                    src={banner.imageUrl}\n                    alt={banner.title}\n                    fill\n                    className=\"rounded-t-lg object-cover\"\n                  />\n                </div>\n              )}\n              <div className=\"p-4 space-y-2\">\n                <div className=\"flex items-start justify-between\">\n                  <h3 className=\"font-bold text-lg\">{banner.title}</h3>\n                  <span className={`text-xs px-2 py-1 rounded ${banner.isActive ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'}`}>\n                    {banner.isActive ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n                <p className=\"text-sm text-muted-foreground line-clamp-2\">{banner.subtitle}</p>\n                <div className=\"flex items-center justify-between pt-2\">\n                  <p className=\"text-sm text-muted-foreground\">Order: {banner.order}</p>\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(banner)}>\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button size=\"sm\" variant=\"destructive\" onClick={() => handleDelete(banner.id)}>\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {banners.length === 0 && !showForm && (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-gray-600\">No hero banners found. Add your first hero banner to get started.</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":10607},"src/app/globals.css":{"content":"/* Updated: 2025-10-10T12:42:08.220Z */\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@import \"tailwindcss\";\n@import \"tailwindcss/utilities\" layer(utilities);\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n@theme {\n  /* Shadcn/UI colors */\n  --color-background: #ffffff;\n  --color-foreground: #112211; /* Dark Charcoal */\n\n  --color-card: #ffffff;\n  --color-card-foreground: #112211;\n\n  --color-popover: #ffffff;\n  --color-popover-foreground: #112211;\n\n  --color-primary: #dcac56; /* Primary Gold */\n  --color-primary-foreground: #112211; /* Dark Charcoal */\n\n  --color-secondary: #e6c07c; /* Gold Light */\n  --color-secondary-foreground: #112211; /* Dark Charcoal */\n\n  --color-muted: #E2E8F0; /* Light Gray */\n  --color-muted-foreground: #4A5568; /* Medium Gray */\n\n  --color-accent: #e6c07c; /* Gold Light */\n  --color-accent-foreground: #112211; /* Dark Charcoal */\n\n  --color-destructive: #ef4444;\n  --color-destructive-foreground: #fafafa;\n\n  --color-border: #E2E8F0; /* Light Gray */\n  --color-input: #E2E8F0; /* Light Gray */\n  --color-ring: #dcac56; /* Primary Gold */\n\n  --color-chart-1: #dcac56; /* Primary Gold */\n  --color-chart-2: #F7E9B5; /* Warning Yellow */\n  --color-chart-3: #D6E4F7; /* Info Blue */\n  --color-chart-4: #FFB800; /* Star Rating */\n  --color-chart-5: #dcac56; /* Primary Gold */\n\n  --color-sidebar: #f7f7f7;\n  --color-sidebar-foreground: #404040;\n  --color-sidebar-primary: #1a1a1a;\n  --color-sidebar-primary-foreground: #fafafa;\n  --color-sidebar-accent: #f0f0f0;\n  --color-sidebar-accent-foreground: #1a1a1a;\n  --color-sidebar-border: #d4d4d8;\n  --color-sidebar-ring: #3b82f6;\n\n  /* Additional design system colors */\n  --color-gold-light: #e6c07c;\n  --color-gold-pale: #f0d699;\n  --color-dark-charcoal: #112211;\n  --color-medium-gray: #4A5568;\n  --color-light-gray: #E2E8F0;\n  --color-background-white: #FAFAFA;\n  --color-success-gold: #dcac56;\n  --color-warning-yellow: #F7E9B5;\n  --color-info-blue: #D6E4F7;\n  --color-star-rating: #FFB800;\n  --color-black-overlay: #000000; /* For rgba usage */\n\n  /* Typography */\n  --font-sans: \"Inter\", sans-serif;\n  --font-display: \"Inter\", sans-serif;\n  --font-body: \"Inter\", sans-serif;\n\n  --radius-lg: 0.75rem; /* Adjusted for cards and larger elements */\n  --radius-md: 0.5rem; /* Adjusted for buttons and inputs */\n  --radius-sm: 0.25rem; /* Adjusted for small elements */\n\n  --animate-accordion-down: accordion-down 0.2s ease-out;\n  --animate-accordion-up: accordion-up 0.2s ease-out;\n\n  @keyframes accordion-down {\n    from {\n      height: 0;\n    }\n    to {\n      height: var(--radix-accordion-content-height);\n    }\n  }\n  @keyframes accordion-up {\n    from {\n      height: var(--radix-accordion-content-height);\n    }\n    to {\n      height: 0;\n    }\n  }\n}\n\n/*\n  The default border color has changed to `currentColor` in Tailwind CSS v4,\n  so we've added these compatibility styles to make sure everything still\n  looks the same as it did with Tailwind CSS v3.\n\n  If we ever want to remove these styles, we need to add an explicit border\n  color utility to any element that depends on these defaults.\n*/\n@layer base {\n  *,\n  ::after,\n  ::before,\n  ::backdrop,\n  ::file-selector-button {\n    border-color: var(--color-border);\n  }\n}\n\n@layer utilities {\n  body {\n    font-family: var(--font-body);\n  }\n}\n\n@layer base {\n  :root {\n    --background: var(--color-background);\n    --foreground: var(--color-foreground);\n    --card: var(--color-card);\n    --card-foreground: var(--color-card-foreground);\n    --popover: var(--color-popover);\n    --popover-foreground: var(--color-popover-foreground);\n    --primary: var(--color-primary);\n    --primary-foreground: var(--color-primary-foreground);\n    --secondary: var(--color-secondary);\n    --secondary-foreground: var(--color-secondary-foreground);\n    --muted: var(--color-muted);\n    --muted-foreground: var(--color-muted-foreground);\n    --accent: var(--color-accent);\n    --accent-foreground: var(--color-accent-foreground);\n    --destructive: var(--color-destructive);\n    --destructive-foreground: var(--color-destructive-foreground);\n    --border: var(--color-border);\n    --input: var(--color-input);\n    --ring: var(--color-ring);\n    --chart-1: var(--color-chart-1);\n    --chart-2: var(--color-chart-2);\n    --chart-3: var(--color-chart-3);\n    --chart-4: var(--color-chart-4);\n    --chart-5: var(--color-chart-5);\n    --radius: var(--radius-md); /* Default radius for shadcn components */\n    --sidebar-background: var(--color-sidebar);\n    --sidebar-foreground: var(--color-sidebar-foreground);\n    --sidebar-primary: var(--color-sidebar-primary);\n    --sidebar-primary-foreground: var(--color-sidebar-primary-foreground);\n    --sidebar-accent: var(--color-sidebar-accent);\n    --sidebar-accent-foreground: var(--color-sidebar-accent-foreground);\n    --sidebar-border: var(--color-sidebar-border);\n    --sidebar-ring: var(--color-sidebar-ring);\n  }\n\n  /* No dark theme detected, so no .dark block */\n\n  * {\n    border-color: var(--border);\n  }\n\n  body {\n    background-color: var(--background);\n    color: var(--foreground);\n    font-family: var(--font-body);\n    line-height: 1.5;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-display);\n    color: var(--color-dark-charcoal);\n    line-height: 1.2;\n  }\n\n  h1 {\n    font-size: 2.25rem; /* 36px */\n    font-weight: 700;\n  }\n  @media (min-width: 1024px) {\n    h1 {\n      font-size: 3rem; /* 48px */\n    }\n  }\n\n  h2 {\n    font-size: 1.5rem; /* 24px */\n    font-weight: 600;\n  }\n  @media (min-width: 1024px) {\n    h2 {\n      font-size: 2rem; /* 32px */\n    }\n  }\n\n  h3 {\n    font-size: 1.125rem; /* 18px */\n    font-weight: 600;\n  }\n  @media (min-width: 1024px) {\n    h3 {\n      font-size: 1.5rem; /* 24px */\n    }\n  }\n\n  p {\n    font-size: 1rem; /* 16px */\n    line-height: 1.5;\n    color: var(--color-medium-gray);\n  }\n\n  .text-body-large {\n    font-size: 1.125rem; /* 18px */\n    line-height: 1.6;\n  }\n\n  .text-body-regular {\n    font-size: 1rem; /* 16px */\n    line-height: 1.5;\n  }\n\n  .text-body-small {\n    font-size: 0.875rem; /* 14px */\n    line-height: 1.5;\n  }\n\n  .text-caption {\n    font-size: 0.75rem; /* 12px */\n    line-height: 1.4;\n  }\n\n  .container {\n    max-width: 1440px;\n    margin-left: auto;\n    margin-right: auto;\n    padding-left: 1.5rem; /* 24px */\n    padding-right: 1.5rem; /* 24px */\n  }\n  @media (min-width: 768px) {\n    .container {\n      padding-left: 3rem; /* 48px */\n      padding-right: 3rem; /* 48px */\n    }\n  }\n  @media (min-width: 1024px) {\n    .container {\n      padding-left: 5rem; /* 80px */\n      padding-right: 5rem; /* 80px */\n    }\n  }\n}\n\n/* Hide Next.js error overlay portal */\nnextjs-portal {\n  display: none !important;\n}","size_bytes":6737},"src/components/flights/new-flight-search-form.tsx":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useTranslations } from 'next-intl';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Plane, Repeat2 } from 'lucide-react';\nimport CitySelector from './city-selector';\nimport DateSelector from './date-selector';\nimport { type City } from '@/types';\nimport { formatDateToString } from '@/lib/format';\n\ninterface FlightSearchFormProps {\n  onSearch: (params: SearchParams) => void;\n  initialFilters?: SearchParams | null;\n}\n\nexport interface SearchParams {\n  from: City | null;\n  to: City | null;\n  departDate: Date | undefined;\n  returnDate: Date | undefined;\n  tripType: 'one-way' | 'round-trip' | 'multi-city';\n}\n\nexport default function NewFlightSearchForm({ onSearch, initialFilters }: FlightSearchFormProps) {\n  const t = useTranslations('flights');\n  const router = useRouter();\n  const [tripType, setTripType] = useState<'one-way' | 'round-trip' | 'multi-city'>('one-way');\n  const [fromCity, setFromCity] = useState<City | null>(null);\n  const [toCity, setToCity] = useState<City | null>(null);\n  const [departDate, setDepartDate] = useState<Date | undefined>(undefined);\n  const [returnDate, setReturnDate] = useState<Date | undefined>(undefined);\n\n  useEffect(() => {\n    const fetchCityData = async (cityId: string): Promise<City | null> => {\n      try {\n        const response = await fetch('/api/cities');\n        if (!response.ok) return null;\n        const cities = await response.json();\n        return cities.find((c: City) => c.id === cityId) || null;\n      } catch (error) {\n        console.error('Error fetching city data:', error);\n        return null;\n      }\n    };\n\n    const loadInitialData = async () => {\n      if (initialFilters) {\n        if (initialFilters.tripType) setTripType(initialFilters.tripType);\n        \n        // Fetch full city data if only ID is provided\n        if (initialFilters.from) {\n          if (initialFilters.from.name) {\n            setFromCity(initialFilters.from);\n          } else if (initialFilters.from.id) {\n            const cityData = await fetchCityData(initialFilters.from.id);\n            if (cityData) setFromCity(cityData);\n          }\n        }\n        \n        if (initialFilters.to) {\n          if (initialFilters.to.name) {\n            setToCity(initialFilters.to);\n          } else if (initialFilters.to.id) {\n            const cityData = await fetchCityData(initialFilters.to.id);\n            if (cityData) setToCity(cityData);\n          }\n        }\n        \n        if (initialFilters.departDate) setDepartDate(initialFilters.departDate);\n        if (initialFilters.returnDate) setReturnDate(initialFilters.returnDate);\n      }\n    };\n\n    loadInitialData();\n  }, [initialFilters]);\n\n  const handleSearch = () => {\n    // Call the onSearch callback for data fetching\n    onSearch({\n      from: fromCity,\n      to: toCity,\n      departDate,\n      returnDate,\n      tripType,\n    });\n\n    // Also update the URL with query parameters for proper navigation\n    const params = new URLSearchParams();\n    if (fromCity) params.set('from', fromCity.id);\n    if (toCity) params.set('to', toCity.id);\n    if (tripType) params.set('tripType', tripType);\n    if (departDate) {\n      const dateStr = formatDateToString(departDate);\n      if (dateStr) params.set('departDate', dateStr);\n    }\n    if (returnDate) {\n      const dateStr = formatDateToString(returnDate);\n      if (dateStr) params.set('returnDate', dateStr);\n    }\n    router.push(`/flights?${params.toString()}`);\n  };\n\n  return (\n    <Card className=\"shadow-xl border-none\">\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n            {/* From/To group */}\n            <div className=\"relative flex h-auto flex-col gap-2 rounded-[10px] border-2 border-primary md:flex-row\">\n              <span className=\"absolute -top-[10px] left-[10px] z-10 inline-block rounded-md bg-white px-1 text-sm font-medium leading-none\">\n                Dari <span className=\"text-red-600\">*</span> - Ke <span className=\"text-red-600\">*</span>\n              </span>\n              <div className=\"h-auto min-h-[100px] max-w-full grow rounded-none border-0 p-4 max-md:mx-1 max-md:border-b-2 md:my-1 md:w-1/2 md:border-r-2 border-[#E2E8F0]\">\n                <CitySelector\n                  label=\"From\"\n                  value={fromCity}\n                  onChange={setFromCity}\n                  placeholder=\"Select departure city\"\n                  minimal\n                  placeholderTitle=\"City\"\n                  placeholderSubtitle=\"Airport name\"\n                />\n              </div>\n              <button\n                type=\"button\"\n                aria-label=\"swap cities\"\n                onClick={() => {\n                  setFromCity(toCity);\n                  setToCity(fromCity);\n                }}\n                className=\"absolute left-1/2 top-1/2 flex h-10 w-10 -translate-x-1/2 -translate-y-1/2 items-center justify-center rounded-full bg-primary p-2 transition-all hover:border-2 hover:border-primary hover:bg-primary/90\"\n              >\n                <Repeat2 className=\"h-5 w-5 text-primary-foreground\" />\n              </button>\n              <div className=\"h-auto min-h-[100px] max-w-full grow rounded-none border-0 p-4 max-md:mx-1 max-md:border-t-2 md:my-1 md:w-1/2 md:border-l-2 border-[#E2E8F0]\">\n                <CitySelector\n                  label=\"To\"\n                  value={toCity}\n                  onChange={setToCity}\n                  placeholder=\"Select destination\"\n                  minimal\n                  placeholderTitle=\"City\"\n                  placeholderSubtitle=\"Airport name\"\n                />\n              </div>\n            </div>\n\n            {/* Depart/Return group */}\n            <div className=\"relative flex h-auto flex-col gap-2 rounded-[10px] border-2 border-primary md:flex-row\">\n              <span className=\"absolute -top-[10px] left-[10px] z-10 inline-block rounded-md bg-white px-1 text-sm font-medium leading-none\">\n                Berangkat <span className=\"text-red-600\">*</span> - Pulang <span className=\"text-red-600\">*</span>\n              </span>\n              <div className=\"h-auto min-h-[100px] max-w-full grow rounded-none border-0 p-4 max-md:mx-1 max-md:border-b-2 md:my-1 md:w-1/2 md:border-r-2\">\n                <DateSelector\n                  label=\"Depart *\"\n                  sublabel=\"Saturday\"\n                  value={departDate}\n                  onChange={setDepartDate}\n                  minimal\n                  placeholderTitle=\"DD MMM YY\"\n                  placeholderSubtitle=\"Weekday\"\n                />\n              </div>\n              <div className=\"h-auto min-h-[100px] max-w-full grow rounded-none border-0 p-4 max-md:mx-1 max-md:border-t-2 md:my-1 md:w-1/2 md:border-l-2\">\n                <DateSelector\n                  label=\"Return *\"\n                  sublabel=\"Weekday\"\n                  value={returnDate}\n                  onChange={setReturnDate}\n                  minDate={departDate}\n                  minimal\n                  placeholderTitle=\"DD MMM YY\"\n                  placeholderSubtitle=\"Weekday\"\n                />\n              </div>\n            </div>\n\n            {/** Travelers/Class group removed as requested */}\n          </div>\n\n          <div className=\"flex justify-end\">\n            <Button\n              size=\"lg\"\n              onClick={handleSearch}\n              className=\"bg-primary text-primary-foreground hover:bg-[#9BE0C8] active:bg-[#82CBB2] px-8\"\n            >\n              <Plane className=\"w-5 h-5 mr-2\" />\n              {t('searchFlightButton')}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7870},"src/components/packages/packages-list.tsx":{"content":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport PackageCard from './package-card';\n\ninterface City {\n  id: string;\n  name: string;\n  description: string;\n  imageUrl: string;\n  createdAt: Date;\n}\n\ninterface PackageWithCity {\n  id: string;\n  cityId: string;\n  name: string;\n  description: string;\n  price: number;\n  durationDays: number;\n  imageUrl: string;\n  features: string[];\n  createdAt: Date;\n  city: City;\n}\n\ninterface SearchParams {\n  from: { id: string } | null;\n  to: { id: string } | null;\n  departDate: Date | undefined;\n  returnDate: Date | undefined;\n  tripType: 'one-way' | 'round-trip' | 'multi-city';\n}\n\ninterface PackagesListProps {\n  filters?: SearchParams | null;\n}\n\nexport default function PackagesList({ filters }: PackagesListProps) {\n  const [packages, setPackages] = useState<PackageWithCity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [groupedPackages, setGroupedPackages] = useState<Record<string, PackageWithCity[]>>({});\n\n  useEffect(() => {\n    fetchPackages();\n  }, []);\n\n  useEffect(() => {\n    applyFilters();\n  }, [filters, packages]);\n\n  async function fetchPackages() {\n    try {\n      const response = await fetch('/api/packages');\n      if (!response.ok) throw new Error('Failed to fetch packages');\n\n      const data = await response.json();\n      setPackages(data);\n    } catch (error) {\n      console.error('Error fetching packages:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function applyFilters() {\n    let filteredPackages = [...packages];\n\n    if (filters?.from) {\n      filteredPackages = filteredPackages.filter(pkg => pkg.cityId === filters.from?.id);\n    }\n\n    const grouped = filteredPackages.reduce((acc: Record<string, PackageWithCity[]>, pkg: PackageWithCity) => {\n      const cityName = pkg.city.name;\n      if (!acc[cityName]) {\n        acc[cityName] = [];\n      }\n      acc[cityName].push(pkg);\n      return acc;\n    }, {});\n\n    setGroupedPackages(grouped);\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-20\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-12\">\n      {Object.entries(groupedPackages).map(([cityName, cityPackages]) => (\n        <section key={cityName} className=\"space-y-6\">\n          <div className=\"flex items-center gap-3\">\n            <h2 className=\"text-3xl font-bold\">{cityName}</h2>\n            <span className=\"text-muted-foreground\">\n              ({cityPackages.length} paket)\n            </span>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {cityPackages.map((pkg) => (\n              <PackageCard key={pkg.id} package={pkg} />\n            ))}\n          </div>\n        </section>\n      ))}\n\n      {packages.length === 0 && (\n        <div className=\"text-center py-20\">\n          <p className=\"text-muted-foreground text-lg\">\n            Belum ada paket perjalanan tersedia\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3097},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card text-card-foreground\",\n        destructive:\n          \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        \"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1614},"src/components/ui/carousel.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = \"horizontal\",\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n    },\n    plugins\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === \"ArrowLeft\") {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === \"ArrowRight\") {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext]\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -left-12 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -right-12 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":5556},"src/hooks/use-mobile.ts":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1097},"src/components/flights/flight-search-bar.tsx":{"content":"\"use client\";\n\nimport { Calendar, Plane, Users, ArrowLeftRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function FlightSearchBar() {\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 items-end\">\n        {/* From */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-foreground\">From</label>\n          <div className=\"relative\">\n            <Plane className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"City or Airport\"\n              className=\"pl-10\"\n              defaultValue=\"New York (JFK)\"\n            />\n          </div>\n        </div>\n\n        {/* Swap Button */}\n        <div className=\"flex items-center justify-center md:col-span-2 lg:col-span-1 lg:mb-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"rounded-full bg-primary hover:bg-primary/90\"\n          >\n            <ArrowLeftRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* To */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-foreground\">To</label>\n          <div className=\"relative\">\n            <Plane className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground rotate-90\" />\n            <Input\n              placeholder=\"City or Airport\"\n              className=\"pl-10\"\n              defaultValue=\"Los Angeles (LAX)\"\n            />\n          </div>\n        </div>\n\n        {/* Departure Date */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-foreground\">Departure</label>\n          <div className=\"relative\">\n            <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"date\"\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Return Date */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-foreground\">Return</label>\n          <div className=\"relative\">\n            <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"date\"\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Passengers */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-foreground\">Passengers</label>\n          <div className=\"relative\">\n            <Users className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"1 Passenger\"\n              className=\"pl-10\"\n              defaultValue=\"1 Passenger, Economy\"\n            />\n          </div>\n        </div>\n\n        {/* Search Button */}\n        <div className=\"lg:col-span-2\">\n          <Button className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\">\n            <Plane className=\"mr-2 h-4 w-4\" />\n            Search Flights\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3292},"src/lib/prisma.ts":{"content":"import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\nexport const db = prisma\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n","size_bytes":304},"src/components/ui/calendar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\"\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"]\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"flex gap-4 flex-col md:flex-row relative\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex flex-col w-full gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\n          \"absolute bg-popover inset-0 opacity-0\",\n          defaultClassNames.dropdown\n        ),\n        caption_label: cn(\n          \"select-none font-medium\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"flex w-full mt-2\", defaultClassNames.week),\n        week_number_header: cn(\n          \"select-none w-(--cell-size)\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-[0.8rem] select-none text-muted-foreground\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"rounded-l-md bg-accent\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"rounded-r-md bg-accent\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            )\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n","size_bytes":7660},"src/app/admin/dashboard/flight-packages/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Plus, Edit, Trash2, X, Plane } from \"lucide-react\";\nimport { FlightPackage } from \"@/types\";\n\nexport default function FlightPackagesManagementPage() {\n  const [flightPackages, setFlightPackages] = useState<FlightPackage[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingPackage, setEditingPackage] = useState<FlightPackage | null>(null);\n  const [formData, setFormData] = useState({\n    airline: \"\",\n    flightNumber: \"\",\n    origin: \"\",\n    destination: \"\",\n    departureTime: \"\",\n    arrivalTime: \"\",\n    price: \"\",\n    class: \"economy\",\n    availableSeats: \"\",\n    duration: \"\",\n    baggage: \"20kg\",\n    isActive: true,\n  });\n\n  useEffect(() => {\n    loadFlightPackages();\n  }, []);\n\n  const loadFlightPackages = async () => {\n    try {\n      const response = await fetch('/api/flight-packages');\n      if (!response.ok) throw new Error('Failed to load flight packages');\n      const data = await response.json();\n      setFlightPackages(data || []);\n    } catch (error) {\n      console.error(\"Error loading flight packages:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      const payload = {\n        airline: formData.airline,\n        flightNumber: formData.flightNumber,\n        origin: formData.origin,\n        destination: formData.destination,\n        departureTime: formData.departureTime,\n        arrivalTime: formData.arrivalTime,\n        price: parseFloat(formData.price),\n        class: formData.class,\n        availableSeats: parseInt(formData.availableSeats),\n        duration: formData.duration,\n        baggage: formData.baggage,\n        isActive: formData.isActive,\n      };\n\n      if (editingPackage) {\n        const response = await fetch(`/api/flight-packages/${editingPackage.id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(payload),\n        });\n        if (!response.ok) throw new Error('Failed to update flight package');\n      } else {\n        const response = await fetch('/api/flight-packages', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(payload),\n        });\n        if (!response.ok) throw new Error('Failed to create flight package');\n      }\n\n      resetForm();\n      loadFlightPackages();\n    } catch (error) {\n      console.error(\"Error saving flight package:\", error);\n      alert(\"Failed to save flight package\");\n    }\n  };\n\n  const handleEdit = (pkg: FlightPackage) => {\n    setEditingPackage(pkg);\n    setFormData({\n      airline: pkg.airline,\n      flightNumber: pkg.flightNumber,\n      origin: pkg.origin,\n      destination: pkg.destination,\n      departureTime: pkg.departureTime,\n      arrivalTime: pkg.arrivalTime,\n      price: pkg.price.toString(),\n      class: pkg.class,\n      availableSeats: pkg.availableSeats.toString(),\n      duration: pkg.duration,\n      baggage: pkg.baggage,\n      isActive: pkg.isActive,\n    });\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm(\"Are you sure you want to delete this flight package?\")) return;\n\n    try {\n      const response = await fetch(`/api/flight-packages/${id}`, { method: 'DELETE' });\n      if (!response.ok) throw new Error('Failed to delete flight package');\n      loadFlightPackages();\n    } catch (error) {\n      console.error(\"Error deleting flight package:\", error);\n      alert(\"Failed to delete flight package\");\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      airline: \"\",\n      flightNumber: \"\",\n      origin: \"\",\n      destination: \"\",\n      departureTime: \"\",\n      arrivalTime: \"\",\n      price: \"\",\n      class: \"economy\",\n      availableSeats: \"\",\n      duration: \"\",\n      baggage: \"20kg\",\n      isActive: true,\n    });\n    setEditingPackage(null);\n    setShowForm(false);\n  };\n\n  const formatDateTime = (dateTimeStr: string) => {\n    try {\n      const date = new Date(dateTimeStr);\n      return date.toLocaleString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n      });\n    } catch {\n      return dateTimeStr;\n    }\n  };\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center p-12\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Flight Packages Management</h1>\n          <p className=\"text-muted-foreground\">Manage flight packages</p>\n        </div>\n        <Button onClick={() => setShowForm(true)}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Flight Package\n        </Button>\n      </div>\n\n      {showForm && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>{editingPackage ? \"Edit Flight Package\" : \"Add New Flight Package\"}</CardTitle>\n              <Button variant=\"ghost\" size=\"icon\" onClick={resetForm}>\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <label className=\"text-sm font-medium\">Airline</label>\n                  <Input\n                    value={formData.airline}\n                    onChange={(e) => setFormData({ ...formData, airline: e.target.value })}\n                    placeholder=\"e.g., Emirates, Qatar Airways\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Flight Number</label>\n                  <Input\n                    value={formData.flightNumber}\n                    onChange={(e) => setFormData({ ...formData, flightNumber: e.target.value })}\n                    placeholder=\"e.g., EK001\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Origin</label>\n                  <Input\n                    value={formData.origin}\n                    onChange={(e) => setFormData({ ...formData, origin: e.target.value })}\n                    placeholder=\"e.g., New York (JFK)\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Destination</label>\n                  <Input\n                    value={formData.destination}\n                    onChange={(e) => setFormData({ ...formData, destination: e.target.value })}\n                    placeholder=\"e.g., Dubai (DXB)\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Departure Time</label>\n                  <Input\n                    type=\"datetime-local\"\n                    value={formData.departureTime}\n                    onChange={(e) => setFormData({ ...formData, departureTime: e.target.value })}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Arrival Time</label>\n                  <Input\n                    type=\"datetime-local\"\n                    value={formData.arrivalTime}\n                    onChange={(e) => setFormData({ ...formData, arrivalTime: e.target.value })}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Price (USD)</label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.price}\n                    onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n                    placeholder=\"e.g., 1200\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Class</label>\n                  <Select value={formData.class} onValueChange={(value) => setFormData({ ...formData, class: value })}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"economy\">Economy</SelectItem>\n                      <SelectItem value=\"business\">Business</SelectItem>\n                      <SelectItem value=\"first\">First Class</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Available Seats</label>\n                  <Input\n                    type=\"number\"\n                    value={formData.availableSeats}\n                    onChange={(e) => setFormData({ ...formData, availableSeats: e.target.value })}\n                    placeholder=\"e.g., 150\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Duration</label>\n                  <Input\n                    value={formData.duration}\n                    onChange={(e) => setFormData({ ...formData, duration: e.target.value })}\n                    placeholder=\"e.g., 14h 30m\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Baggage Allowance</label>\n                  <Input\n                    value={formData.baggage}\n                    onChange={(e) => setFormData({ ...formData, baggage: e.target.value })}\n                    placeholder=\"e.g., 30kg\"\n                    required\n                  />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"isActive\"\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                  />\n                  <Label htmlFor=\"isActive\">Active (visible to users)</Label>\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\">\n                  {editingPackage ? \"Update\" : \"Create\"} Flight Package\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {flightPackages.map((pkg) => (\n          <Card key={pkg.id} className={!pkg.isActive ? \"opacity-60\" : \"\"}>\n            <CardContent className=\"p-4 space-y-3\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Plane className=\"h-5 w-5 text-primary\" />\n                  <div>\n                    <h3 className=\"font-bold text-lg\">{pkg.airline}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{pkg.flightNumber}</p>\n                  </div>\n                </div>\n                {!pkg.isActive && (\n                  <span className=\"text-xs bg-gray-200 text-gray-700 px-2 py-1 rounded\">Inactive</span>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">From:</span>\n                  <span className=\"font-medium\">{pkg.origin}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">To:</span>\n                  <span className=\"font-medium\">{pkg.destination}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Departure:</span>\n                  <span className=\"font-medium\">{formatDateTime(pkg.departureTime)}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Arrival:</span>\n                  <span className=\"font-medium\">{formatDateTime(pkg.arrivalTime)}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Duration:</span>\n                  <span className=\"font-medium\">{pkg.duration}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Class:</span>\n                  <span className=\"font-medium capitalize\">{pkg.class}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Baggage:</span>\n                  <span className=\"font-medium\">{pkg.baggage}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Available Seats:</span>\n                  <span className=\"font-medium\">{pkg.availableSeats}</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between pt-3 border-t\">\n                <div>\n                  <p className=\"text-2xl font-bold\">${pkg.price}</p>\n                  <p className=\"text-xs text-muted-foreground\">per person</p>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(pkg)}>\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"destructive\" onClick={() => handleDelete(pkg.id)}>\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {flightPackages.length === 0 && !showForm && (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-gray-600\">No flight packages found. Add your first flight package to get started.</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":15257},"src/components/auth/login-form.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { Mail, Lock, Eye, EyeOff } from \"lucide-react\";\nimport { useTranslations } from \"next-intl\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function LoginForm() {\n  const t = useTranslations('login');\n  const [showPassword, setShowPassword] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const router = useRouter();\n\n  return (\n    <div className=\"w-full max-w-md\">\n      <div className=\"bg-white rounded-lg shadow-lg p-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n            {t('title')}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {t('subtitle')}\n          </p>\n        </div>\n\n        {/* Form */}\n        <form\n          className=\"space-y-6\"\n          onSubmit={async (e) => {\n            e.preventDefault();\n            setError(null);\n            setLoading(true);\n            try {\n              const res = await fetch('/api/login', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ email, password })\n              });\n              if (!res.ok) {\n                const data = await res.json().catch(() => ({}));\n                setError(data.error || 'Login failed');\n              } else {\n                router.push('/admin');\n              }\n            } catch (err) {\n              setError('Network error');\n            } finally {\n              setLoading(false);\n            }\n          }}\n        >\n          {/* Email */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">{t('email')}</Label>\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder={t('emailPlaceholder')}\n                className=\"pl-10\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n          </div>\n\n          {/* Password */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">{t('password')}</Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder={t('passwordPlaceholder')}\n                className=\"pl-10 pr-10\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </button>\n            </div>\n          </div>\n\n          {/* Remember Me & Forgot Password */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox id=\"remember\" />\n              <Label\n                htmlFor=\"remember\"\n                className=\"text-sm cursor-pointer font-normal\"\n              >\n                Remember me\n              </Label>\n            </div>\n            <Link\n              href=\"/forgot-password\"\n              className=\"text-sm text-primary hover:underline\"\n            >\n              {t('forgotPassword')}\n            </Link>\n          </div>\n\n          {/* Submit Button */}\n          {error && (\n            <div className=\"text-red-600 text-sm\">{error}</div>\n          )}\n          <Button\n            type=\"submit\"\n            disabled={loading}\n            className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\"\n          >\n            {loading ? 'Signing in...' : t('loginButton')}\n          </Button>\n\n          {/* Divider */}\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-white px-2 text-muted-foreground\">\n                Or continue with\n              </span>\n            </div>\n          </div>\n\n          {/* Social Login */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Button type=\"button\" variant=\"outline\" className=\"w-full\">\n              <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                <path\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                  fill=\"#4285F4\"\n                />\n                <path\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                  fill=\"#34A853\"\n                />\n                <path\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                  fill=\"#FBBC05\"\n                />\n                <path\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                  fill=\"#EA4335\"\n                />\n              </svg>\n              Google\n            </Button>\n            <Button type=\"button\" variant=\"outline\" className=\"w-full\">\n              <svg\n                className=\"mr-2 h-4 w-4\"\n                fill=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\n              </svg>\n              Facebook\n            </Button>\n          </div>\n        </form>\n\n        {/* Sign Up Link */}\n        <p className=\"mt-6 text-center text-sm text-muted-foreground\">\n          {t('noAccount')}{\" \"}\n          <Link href=\"/register\" className=\"text-primary hover:underline font-medium\">\n            {t('signupLink')}\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":7251},"src/components/ui/background-boxes.tsx":{"content":"\"use client\";\nimport React from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const BoxesCore = ({ className, ...rest }: { className?: string }) => {\n  const rows = new Array(150).fill(1);\n  const cols = new Array(100).fill(1);\n  let colors = [\n    \"#93c5fd\",\n    \"#f9a8d4\",\n    \"#86efac\",\n    \"#fde047\",\n    \"#fca5a5\",\n    \"#d8b4fe\",\n    \"#93c5fd\",\n    \"#a5b4fc\",\n    \"#c4b5fd\",\n  ];\n  const getRandomColor = () => {\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n\n  return (\n    <div\n      style={{\n        transform: `translate(-40%,-60%) skewX(-48deg) skewY(14deg) scale(0.675) rotate(0deg) translateZ(0)`,\n      }}\n      className={cn(\n        \"absolute -top-1/4 left-1/4 z-0 flex h-full w-full -translate-x-1/2 -translate-y-1/2 p-4\",\n        className,\n      )}\n      {...rest}\n    >\n      {rows.map((_, i) => (\n        <motion.div\n          key={`row` + i}\n          className=\"relative h-8 w-16 border-l border-slate-700\"\n        >\n          {cols.map((_, j) => (\n            <motion.div\n              whileHover={{\n                backgroundColor: `${getRandomColor()}`,\n                transition: { duration: 0 },\n              }}\n              animate={{\n                transition: { duration: 2 },\n              }}\n              key={`col` + j}\n              className=\"relative h-8 w-16 border-t border-r border-slate-700\"\n            >\n              {j % 2 === 0 && i % 2 === 0 ? (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  strokeWidth=\"1.5\"\n                  stroke=\"currentColor\"\n                  className=\"pointer-events-none absolute -top-[14px] -left-[22px] h-6 w-10 stroke-[1px] text-slate-700\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    d=\"M12 6v12m6-6H6\"\n                  />\n                </svg>\n              ) : null}\n            </motion.div>\n          ))}\n        </motion.div>\n      ))}\n    </div>\n  );\n};\n\nexport const Boxes = React.memo(BoxesCore);\n","size_bytes":2171},"ADMIN_SETUP.md":{"content":"# Admin Dashboard Setup Guide\n\n## Overview\n\nYour travel website now includes a full-featured admin dashboard with authentication and CMS capabilities.\n\n## Features\n\n### Admin Dashboard Includes:\n- Secure authentication system with email/password\n- CRUD operations for Cities\n- CRUD operations for Travel Packages\n- CMS for Hero Banners\n- CMS for Customer Reviews\n- CMS for Popular Destinations\n- Dashboard with statistics overview\n\n### Database Tables:\n- `admin_users` - Admin authentication\n- `cities` - City destinations\n- `packages` - Travel packages\n- `hero_banners` - Homepage hero content\n- `customer_reviews` - Customer testimonials\n- `popular_destinations` - Featured destinations\n- `payments` - Payment records\n\n## Getting Started\n\n### Step 1: Create Your First Admin Account\n\n1. Navigate to: `/admin/setup`\n2. Fill in your details:\n   - Full Name\n   - Email\n   - Password (min 6 characters)\n3. Click \"Create Admin Account\"\n\n### Step 2: Login\n\n1. Navigate to: `/admin/login`\n2. Enter your credentials\n3. Access the admin dashboard\n\n### Step 3: Manage Content\n\nOnce logged in, you can:\n- **Cities** - Add/edit/delete travel destinations\n- **Packages** - Create travel packages with prices, durations, and features\n- **Hero Banners** - Manage homepage banner content\n- **Reviews** - Add customer testimonials\n- **Popular Destinations** - Feature specific destinations for flights/hotels\n\n## Admin Routes\n\n- `/admin/setup` - Create first admin account\n- `/admin/login` - Admin login page\n- `/admin/dashboard` - Dashboard overview\n- `/admin/dashboard/cities` - Manage cities\n- `/admin/dashboard/packages` - Manage packages\n- `/admin/dashboard/hero-banners` - Manage hero banners\n- `/admin/dashboard/reviews` - Manage reviews\n- `/admin/dashboard/destinations` - Manage popular destinations\n\n## Security\n\n- All admin routes are protected with authentication\n- Row Level Security (RLS) enabled on all tables\n- Only authenticated admins can perform CRUD operations\n- Public users can only read content (cities, packages, reviews, etc.)\n\n## Notes\n\n- The newsletter subscribe button color has been changed to #dcac56\n- All database operations use Supabase\n- Authentication uses Supabase Auth\n- Password hashing uses bcrypt\n","size_bytes":2222},"src/components/ui/checkbox.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { CheckIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n","size_bytes":1226},"src/components/ui/navigation.tsx":{"content":"\"use client\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\n\nconst navItems = [\n  { href: \"/\", label: \"Gallery\" },\n  { href: \"/bento\", label: \"Bentos\" },\n  { href: \"/casestudies\", label: \"Case Studies\" },\n  { href: \"/contacts\", label: \"Contact\" },\n  { href: \"/ctas\", label: \"CTAs\" },\n  { href: \"/faqs\", label: \"FAQs\" },\n  { href: \"/feature\", label: \"Features\" },\n  { href: \"/footers\", label: \"Footers\" },\n  { href: \"/hero\", label: \"Hero\" },\n  { href: \"/navbars\", label: \"Navbars\" },\n  { href: \"/pricing\", label: \"Pricing\" },\n  { href: \"/stats\", label: \"Stats\" },\n  { href: \"/team\", label: \"Team\" },\n  { href: \"/testimonial\", label: \"Testimonials\" },\n];\n\nexport function Navigation() {\n  const pathname = usePathname();\n\n  return (\n    <nav className=\"sticky top-0 z-50 bg-white/80 backdrop-blur-sm border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center space-x-1\">\n            <Link \n              href=\"/\" \n              className=\"text-xl font-bold text-gray-900 hover:text-gray-700 transition-colors\"\n            >\n              Orchids\n            </Link>\n          </div>\n          <div className=\"flex items-center space-x-1 overflow-x-auto\">\n            {navItems.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors whitespace-nowrap ${\n                  pathname === item.href\n                    ? \"bg-gray-900 text-white\"\n                    : \"text-gray-700 hover:text-gray-900 hover:bg-gray-100\"\n                }`}\n              >\n                {item.label}\n              </Link>\n            ))}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n} ","size_bytes":1869},"src/app/api/flights/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const origin = searchParams.get('origin');\n    const destination = searchParams.get('destination');\n\n    const where: any = {\n      isActive: true,\n    };\n\n    if (origin) {\n      where.origin = {\n        contains: origin,\n        mode: 'insensitive',\n      };\n    }\n\n    if (destination) {\n      where.destination = {\n        contains: destination,\n        mode: 'insensitive',\n      };\n    }\n\n    const flights = await prisma.flightPackage.findMany({\n      where,\n      orderBy: {\n        price: 'asc',\n      },\n    });\n\n    return NextResponse.json(flights);\n  } catch (error) {\n    console.error('Error fetching flights:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch flights' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    const newFlight = await prisma.flightPackage.create({\n      data: {\n        airline: body.airline,\n        flightNumber: body.flightNumber,\n        origin: body.origin,\n        destination: body.destination,\n        departureTime: body.departureTime,\n        arrivalTime: body.arrivalTime,\n        price: body.price,\n        class: body.class || 'economy',\n        availableSeats: body.availableSeats || 0,\n        duration: body.duration || '0h 0m',\n        baggage: body.baggage || '20kg',\n        isActive: body.isActive !== undefined ? body.isActive : true,\n      },\n    });\n\n    return NextResponse.json(newFlight);\n  } catch (error) {\n    console.error('Error creating flight:', error);\n    return NextResponse.json(\n      { error: 'Failed to create flight' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1864},"src/app/api/cities/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nexport const runtime = 'nodejs';\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const contentType = request.headers.get('content-type') || '';\n    let name = '';\n    let description = '';\n    let imageUrl: string | undefined = undefined;\n\n    if (contentType.includes('multipart/form-data')) {\n      const form = await request.formData();\n      name = String(form.get('name') || '');\n      description = String(form.get('description') || '');\n      const file = form.get('image') as File | null;\n      if (file && file.size > 0) {\n        const arrayBuffer = await file.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        const uploadsDir = process.env.UPLOADS_DIR || path.join(process.cwd(), 'uploads');\n        await fs.mkdir(uploadsDir, { recursive: true });\n        const safeName = file.name.replace(/[^a-zA-Z0-9_.-]/g, '_');\n        const filename = `${Date.now()}_${safeName}`;\n        const outPath = path.join(uploadsDir, filename);\n        await fs.writeFile(outPath, buffer);\n        imageUrl = `/api/images/${filename}`;\n      } else {\n        const fromField = String(form.get('imageUrl') || '');\n        if (fromField) imageUrl = fromField;\n      }\n    } else {\n      const body = await request.json();\n      name = body.name;\n      description = body.description || '';\n      imageUrl = body.imageUrl;\n    }\n\n    const updatedCity = await prisma.city.update({\n      where: { id },\n      data: {\n        name,\n        description,\n        ...(imageUrl !== undefined ? { imageUrl } : {}),\n      },\n    });\n\n    return NextResponse.json(updatedCity);\n  } catch (error) {\n    console.error('Error updating city:', error);\n    return NextResponse.json(\n      { error: 'Failed to update city' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    await prisma.city.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting city:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete city' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":2460},"src/app/admin/dashboard/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plane, MapPin, Star, Route as RouteIcon } from \"lucide-react\";\n\ninterface DashboardStats {\n  flightRoutes: number;\n  cities: number;\n  reviews: number;\n}\n\nexport default function AdminDashboard() {\n  const [stats, setStats] = useState<DashboardStats>({\n    flightRoutes: 0,\n    cities: 0,\n    reviews: 0,\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadStats();\n  }, []);\n\n  const loadStats = async () => {\n    try {\n      const [routesRes, citiesRes, reviewsRes] = await Promise.all([\n        fetch('/api/flight-routes'),\n        fetch('/api/cities'),\n        fetch('/api/reviews'),\n      ]);\n\n      const [routes, cities, reviews] = await Promise.all([\n        routesRes.json(),\n        citiesRes.json(),\n        reviewsRes.json(),\n      ]);\n\n      setStats({\n        flightRoutes: routes?.length || 0,\n        cities: cities?.length || 0,\n        reviews: reviews?.length || 0,\n      });\n    } catch (error) {\n      console.error('Error loading stats:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Dashboard</h1>\n        <p className=\"text-muted-foreground\">Welcome to admin dashboard</p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Flight Routes</CardTitle>\n            <RouteIcon className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{loading ? '-' : stats.flightRoutes}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Cities</CardTitle>\n            <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{loading ? '-' : stats.cities}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Customer Reviews</CardTitle>\n            <Star className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{loading ? '-' : stats.reviews}</div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2792},"src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}\n\nfunction HoverCardTrigger({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  )\n}\n\nfunction HoverCardContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {\n  return (\n    <HoverCardPrimitive.Portal data-slot=\"hover-card-portal\">\n      <HoverCardPrimitive.Content\n        data-slot=\"hover-card-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1532},"src/app/admin/dashboard/layout.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter, usePathname } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { getCurrentAdmin, logoutAdmin, AdminUser } from \"@/lib/admin-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  LayoutDashboard,\n  MapPin,\n  Star,\n  LogOut,\n  Menu,\n  X,\n  CreditCard,\n  Route,\n  TrendingUp\n} from \"lucide-react\";\n\nexport default function AdminDashboardLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const router = useRouter();\n  const pathname = usePathname();\n  const [admin, setAdmin] = useState<AdminUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    const currentAdmin = await getCurrentAdmin();\n    if (!currentAdmin) {\n      router.push(\"/admin/login\");\n    } else {\n      setAdmin(currentAdmin);\n    }\n    setLoading(false);\n  };\n\n  const handleLogout = async () => {\n    await logoutAdmin();\n    router.push(\"/admin/login\");\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!admin) {\n    return null;\n  }\n\n  const menuItems = [\n    { href: \"/admin/dashboard\", icon: LayoutDashboard, label: \"Dashboard\" },\n    { href: \"/admin/dashboard/cities\", icon: MapPin, label: \"Cities\" },\n    { href: \"/admin/dashboard/flight-routes\", icon: Route, label: \"Flight Routes\" },\n    { href: \"/admin/dashboard/popular-routes\", icon: TrendingUp, label: \"Rute Populer\" },\n    { href: \"/admin/dashboard/reviews\", icon: Star, label: \"Reviews\" },\n    { href: \"/admin/dashboard/payment-settings\", icon: CreditCard, label: \"Pengaturan Pembayaran\" },\n  ];\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <aside\n        className={`fixed inset-y-0 left-0 z-50 w-64 transform bg-gray-900 text-white transition-transform duration-200 ease-in-out lg:static lg:translate-x-0 ${\n          sidebarOpen ? \"translate-x-0\" : \"-translate-x-full\"\n        }`}\n      >\n        <div className=\"flex h-16 items-center justify-between px-6\">\n          <h1 className=\"text-xl text-white font-bold\">Admin Panel</h1>\n          <button\n            onClick={() => setSidebarOpen(false)}\n            className=\"lg:hidden\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        <nav className=\"mt-8 space-y-1 px-3\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = pathname === item.href;\n            return (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`flex items-center gap-3 rounded-lg px-3 py-2 transition-colors ${\n                  isActive\n                    ? \"bg-gray-800 text-white\"\n                    : \"text-gray-300 hover:bg-gray-800 hover:text-white\"\n                }`}\n                onClick={() => setSidebarOpen(false)}\n              >\n                <Icon className=\"h-5 w-5\" />\n                <span>{item.label}</span>\n              </Link>\n            );\n          })}\n        </nav>\n\n        <div className=\"absolute bottom-0 w-full border-t border-gray-800 p-4\">\n          <div className=\"mb-3 px-2\">\n            <p className=\"text-sm font-medium\">{admin.name}</p>\n            <p className=\"text-xs text-gray-400\">{admin.email}</p>\n          </div>\n          <Button\n            onClick={handleLogout}\n            variant=\"outline\"\n            className=\"w-full justify-start gap-2 border-gray-700 bg-transparent text-white hover:bg-gray-800 hover:text-white\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n            Logout\n          </Button>\n        </div>\n      </aside>\n\n      {sidebarOpen && (\n        <div\n          className=\"fixed inset-0 z-40 bg-black bg-opacity-50 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n\n      <div className=\"flex-1\">\n        <header className=\"sticky top-0 z-30 flex h-16 items-center gap-4 border-b bg-white px-6\">\n          <button\n            onClick={() => setSidebarOpen(true)}\n            className=\"lg:hidden\"\n          >\n            <Menu className=\"h-6 w-6\" />\n          </button>\n          <h2 className=\"text-xl font-semibold\">Admin Dashboard</h2>\n        </header>\n\n        <main className=\"p-6\">{children}</main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4506},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1631},"src/components/ErrorReporter.tsx":{"content":"\"use client\";\n\nimport { useEffect, useRef } from \"react\";\n\ntype ReporterProps = {\n  /*  ⎯⎯ props are only provided on the global-error page ⎯⎯ */\n  error?: Error & { digest?: string };\n  reset?: () => void;\n};\n\nexport default function ErrorReporter({ error, reset }: ReporterProps) {\n  /* ─ instrumentation shared by every route ─ */\n  const lastOverlayMsg = useRef(\"\");\n  const pollRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    const inIframe = window.parent !== window;\n    if (!inIframe) return;\n\n    const send = (payload: unknown) => window.parent.postMessage(payload, \"*\");\n\n    const onError = (e: ErrorEvent) =>\n      send({\n        type: \"ERROR_CAPTURED\",\n        error: {\n          message: e.message,\n          stack: e.error?.stack,\n          filename: e.filename,\n          lineno: e.lineno,\n          colno: e.colno,\n          source: \"window.onerror\",\n        },\n        timestamp: Date.now(),\n      });\n\n    const onReject = (e: PromiseRejectionEvent) =>\n      send({\n        type: \"ERROR_CAPTURED\",\n        error: {\n          message: e.reason?.message ?? String(e.reason),\n          stack: e.reason?.stack,\n          source: \"unhandledrejection\",\n        },\n        timestamp: Date.now(),\n      });\n\n    const pollOverlay = () => {\n      const overlay = document.querySelector(\"[data-nextjs-dialog-overlay]\");\n      const node =\n        overlay?.querySelector(\n          \"h1, h2, .error-message, [data-nextjs-dialog-body]\"\n        ) ?? null;\n      const txt = node?.textContent ?? node?.innerHTML ?? \"\";\n      if (txt && txt !== lastOverlayMsg.current) {\n        lastOverlayMsg.current = txt;\n        send({\n          type: \"ERROR_CAPTURED\",\n          error: { message: txt, source: \"nextjs-dev-overlay\" },\n          timestamp: Date.now(),\n        });\n      }\n    };\n\n    window.addEventListener(\"error\", onError);\n    window.addEventListener(\"unhandledrejection\", onReject);\n    pollRef.current = setInterval(pollOverlay, 1000);\n\n    return () => {\n      window.removeEventListener(\"error\", onError);\n      window.removeEventListener(\"unhandledrejection\", onReject);\n      pollRef.current && clearInterval(pollRef.current);\n    };\n  }, []);\n\n  /* ─ extra postMessage when on the global-error route ─ */\n  useEffect(() => {\n    if (!error) return;\n    window.parent.postMessage(\n      {\n        type: \"global-error-reset\",\n        error: {\n          message: error.message,\n          stack: error.stack,\n          digest: error.digest,\n          name: error.name,\n        },\n        timestamp: Date.now(),\n        userAgent: navigator.userAgent,\n      },\n      \"*\"\n    );\n  }, [error]);\n\n  /* ─ ordinary pages render nothing ─ */\n  if (!error) return null;\n\n  /* ─ global-error UI ─ */\n  return (\n    <html>\n      <body className=\"min-h-screen bg-background text-foreground flex items-center justify-center p-4\">\n        <div className=\"max-w-md w-full text-center space-y-6\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-2xl font-bold text-destructive\">\n              Something went wrong!\n            </h1>\n            <p className=\"text-muted-foreground\">\n              An unexpected error occurred. Please try again fixing with Orchids\n            </p>\n          </div>\n          <div className=\"space-y-2\">\n            {process.env.NODE_ENV === \"development\" && (\n              <details className=\"mt-4 text-left\">\n                <summary className=\"cursor-pointer text-sm text-muted-foreground hover:text-foreground\">\n                  Error details\n                </summary>\n                <pre className=\"mt-2 text-xs bg-muted p-2 rounded overflow-auto\">\n                  {error.message}\n                  {error.stack && (\n                    <div className=\"mt-2 text-muted-foreground\">\n                      {error.stack}\n                    </div>\n                  )}\n                  {error.digest && (\n                    <div className=\"mt-2 text-muted-foreground\">\n                      Digest: {error.digest}\n                    </div>\n                  )}\n                </pre>\n              </details>\n            )}\n          </div>\n        </div>\n      </body>\n    </html>\n  );\n}\n","size_bytes":4186},"src/components/ui/table.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2448},"src/components/ui/item.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Separator } from \"@/components/ui/separator\"\n\nfunction ItemGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      role=\"list\"\n      data-slot=\"item-group\"\n      className={cn(\"group/item-group flex flex-col\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction ItemSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"item-separator\"\n      orientation=\"horizontal\"\n      className={cn(\"my-0\", className)}\n      {...props}\n    />\n  )\n}\n\nconst itemVariants = cva(\n  \"group/item flex items-center border border-transparent text-sm rounded-md transition-colors [a]:hover:bg-accent/50 [a]:transition-colors duration-100 flex-wrap outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline: \"border-border\",\n        muted: \"bg-muted/50\",\n      },\n      size: {\n        default: \"p-4 gap-4 \",\n        sm: \"py-3 px-4 gap-2.5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Item({\n  className,\n  variant = \"default\",\n  size = \"default\",\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> &\n  VariantProps<typeof itemVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n  return (\n    <Comp\n      data-slot=\"item\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(itemVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nconst itemMediaVariants = cva(\n  \"flex shrink-0 items-center justify-center gap-2 group-has-[[data-slot=item-description]]/item:self-start [&_svg]:pointer-events-none group-has-[[data-slot=item-description]]/item:translate-y-0.5\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        icon: \"size-8 border rounded-sm bg-muted [&_svg:not([class*='size-'])]:size-4\",\n        image:\n          \"size-10 rounded-sm overflow-hidden [&_img]:size-full [&_img]:object-cover\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction ItemMedia({\n  className,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof itemMediaVariants>) {\n  return (\n    <div\n      data-slot=\"item-media\"\n      data-variant={variant}\n      className={cn(itemMediaVariants({ variant, className }))}\n      {...props}\n    />\n  )\n}\n\nfunction ItemContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"item-content\"\n      className={cn(\n        \"flex flex-1 flex-col gap-1 [&+[data-slot=item-content]]:flex-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ItemTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"item-title\"\n      className={cn(\n        \"flex w-fit items-center gap-2 text-sm leading-snug font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ItemDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  return (\n    <p\n      data-slot=\"item-description\"\n      className={cn(\n        \"text-muted-foreground line-clamp-2 text-sm leading-normal font-normal text-balance\",\n        \"[&>a:hover]:text-primary [&>a]:underline [&>a]:underline-offset-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ItemActions({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"item-actions\"\n      className={cn(\"flex items-center gap-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction ItemHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"item-header\"\n      className={cn(\n        \"flex basis-full items-center justify-between gap-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ItemFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"item-footer\"\n      className={cn(\n        \"flex basis-full items-center justify-between gap-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Item,\n  ItemMedia,\n  ItemContent,\n  ItemActions,\n  ItemGroup,\n  ItemSeparator,\n  ItemTitle,\n  ItemDescription,\n  ItemHeader,\n  ItemFooter,\n}\n","size_bytes":4494},"src/components/ui/field.tsx":{"content":"\"use client\"\n\nimport { useMemo } from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\nimport { Separator } from \"@/components/ui/separator\"\n\nfunction FieldSet({ className, ...props }: React.ComponentProps<\"fieldset\">) {\n  return (\n    <fieldset\n      data-slot=\"field-set\"\n      className={cn(\n        \"flex flex-col gap-6\",\n        \"has-[>[data-slot=checkbox-group]]:gap-3 has-[>[data-slot=radio-group]]:gap-3\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldLegend({\n  className,\n  variant = \"legend\",\n  ...props\n}: React.ComponentProps<\"legend\"> & { variant?: \"legend\" | \"label\" }) {\n  return (\n    <legend\n      data-slot=\"field-legend\"\n      data-variant={variant}\n      className={cn(\n        \"mb-3 font-medium\",\n        \"data-[variant=legend]:text-base\",\n        \"data-[variant=label]:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"field-group\"\n      className={cn(\n        \"group/field-group @container/field-group flex w-full flex-col gap-7 data-[slot=checkbox-group]:gap-3 [&>[data-slot=field-group]]:gap-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nconst fieldVariants = cva(\n  \"group/field flex w-full gap-3 data-[invalid=true]:text-destructive\",\n  {\n    variants: {\n      orientation: {\n        vertical: [\"flex-col [&>*]:w-full [&>.sr-only]:w-auto\"],\n        horizontal: [\n          \"flex-row items-center\",\n          \"[&>[data-slot=field-label]]:flex-auto\",\n          \"has-[>[data-slot=field-content]]:items-start has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px\",\n        ],\n        responsive: [\n          \"flex-col [&>*]:w-full [&>.sr-only]:w-auto @md/field-group:flex-row @md/field-group:items-center @md/field-group:[&>*]:w-auto\",\n          \"@md/field-group:[&>[data-slot=field-label]]:flex-auto\",\n          \"@md/field-group:has-[>[data-slot=field-content]]:items-start @md/field-group:has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px\",\n        ],\n      },\n    },\n    defaultVariants: {\n      orientation: \"vertical\",\n    },\n  }\n)\n\nfunction Field({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof fieldVariants>) {\n  return (\n    <div\n      role=\"group\"\n      data-slot=\"field\"\n      data-orientation={orientation}\n      className={cn(fieldVariants({ orientation }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction FieldContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"field-content\"\n      className={cn(\n        \"group/field-content flex flex-1 flex-col gap-1.5 leading-snug\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof Label>) {\n  return (\n    <Label\n      data-slot=\"field-label\"\n      className={cn(\n        \"group/field-label peer/field-label flex w-fit gap-2 leading-snug group-data-[disabled=true]/field:opacity-50\",\n        \"has-[>[data-slot=field]]:w-full has-[>[data-slot=field]]:flex-col has-[>[data-slot=field]]:rounded-md has-[>[data-slot=field]]:border [&>*]:data-[slot=field]:p-4\",\n        \"has-data-[state=checked]:bg-primary/5 has-data-[state=checked]:border-primary dark:has-data-[state=checked]:bg-primary/10\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"field-label\"\n      className={cn(\n        \"flex w-fit items-center gap-2 text-sm leading-snug font-medium group-data-[disabled=true]/field:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  return (\n    <p\n      data-slot=\"field-description\"\n      className={cn(\n        \"text-muted-foreground text-sm leading-normal font-normal group-has-[[data-orientation=horizontal]]/field:text-balance\",\n        \"last:mt-0 nth-last-2:-mt-1 [[data-variant=legend]+&]:-mt-1.5\",\n        \"[&>a:hover]:text-primary [&>a]:underline [&>a]:underline-offset-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  children?: React.ReactNode\n}) {\n  return (\n    <div\n      data-slot=\"field-separator\"\n      data-content={!!children}\n      className={cn(\n        \"relative -my-2 h-5 text-sm group-data-[variant=outline]/field-group:-mb-2\",\n        className\n      )}\n      {...props}\n    >\n      <Separator className=\"absolute inset-0 top-1/2\" />\n      {children && (\n        <span\n          className=\"bg-background text-muted-foreground relative mx-auto block w-fit px-2\"\n          data-slot=\"field-separator-content\"\n        >\n          {children}\n        </span>\n      )}\n    </div>\n  )\n}\n\nfunction FieldError({\n  className,\n  children,\n  errors,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  errors?: Array<{ message?: string } | undefined>\n}) {\n  const content = useMemo(() => {\n    if (children) {\n      return children\n    }\n\n    if (!errors) {\n      return null\n    }\n\n    if (errors?.length === 1 && errors[0]?.message) {\n      return errors[0].message\n    }\n\n    return (\n      <ul className=\"ml-4 flex list-disc flex-col gap-1\">\n        {errors.map(\n          (error, index) =>\n            error?.message && <li key={index}>{error.message}</li>\n        )}\n      </ul>\n    )\n  }, [children, errors])\n\n  if (!content) {\n    return null\n  }\n\n  return (\n    <div\n      role=\"alert\"\n      data-slot=\"field-error\"\n      className={cn(\"text-destructive text-sm font-normal\", className)}\n      {...props}\n    >\n      {content}\n    </div>\n  )\n}\n\nexport {\n  Field,\n  FieldLabel,\n  FieldDescription,\n  FieldError,\n  FieldGroup,\n  FieldLegend,\n  FieldSeparator,\n  FieldSet,\n  FieldContent,\n  FieldTitle,\n}\n","size_bytes":6046},"DATABASE_SETUP.md":{"content":"# Database Setup Instructions\n\n## Prerequisites\n\n1. PostgreSQL installed dan running\n2. Database bernama `travel` sudah dibuat\n3. User `postgres` dengan password `EDUJUANDA12345`\n\n## Quick Setup\n\n### Option 1: Using Migration SQL File\n\n```bash\n# Pastikan Anda di root project\ncd /path/to/project\n\n# Jalankan migration\npsql -U postgres -d travel -f migrations/001_initial_setup.sql\n\n# Atau menggunakan connection string\npsql \"postgresql://postgres:EDUJUANDA12345@localhost:5432/travel\" -f migrations/001_initial_setup.sql\n```\n\n### Option 2: Using Prisma\n\n```bash\n# Generate Prisma Client\nnpm run prisma:generate\n\n# Push schema ke database (untuk development)\nnpm run prisma:push\n\n# Atau buat migration (untuk production)\nnpm run prisma:migrate\n```\n\n## Verify Setup\n\n1. Check apakah tables sudah dibuat:\n\n```bash\npsql -U postgres -d travel -c \"\\dt\"\n```\n\nExpected output:\n- cities\n- packages\n- payments\n- flight_packages\n- users\n- admins\n\n2. Check sample data:\n\n```bash\npsql -U postgres -d travel -c \"SELECT * FROM cities;\"\npsql -U postgres -d travel -c \"SELECT * FROM packages;\"\npsql -U postgres -d travel -c \"SELECT * FROM flight_packages;\"\n```\n\n## Connection Test\n\nTest koneksi dari aplikasi:\n\n```bash\n# Start development server\nnpm run dev\n\n# Visit http://localhost:3000\n# Homepage harus menampilkan packages yang tersedia\n```\n\n## Prisma Studio\n\nUntuk melihat dan mengedit data secara visual:\n\n```bash\nnpm run prisma:studio\n\n# Akan membuka browser di http://localhost:5555\n```\n\n## Troubleshooting\n\n### Error: relation \"cities\" does not exist\n\nSolution: Jalankan migration lagi\n```bash\npsql -U postgres -d travel -f migrations/001_initial_setup.sql\n```\n\n### Error: Can't reach database server\n\nSolution:\n1. Check apakah PostgreSQL running: `pg_isready`\n2. Check connection string di `.env`\n3. Check firewall settings\n\n### Error: password authentication failed\n\nSolution:\n1. Check password di `.env`\n2. Update password PostgreSQL jika berbeda\n3. Check pg_hba.conf untuk authentication method\n\n## Database Credentials\n\nJika Anda ingin menggunakan credentials berbeda:\n\n1. Update `.env`:\n```env\nDATABASE_URL=\"postgresql://USER:PASSWORD@HOST:PORT/DATABASE\"\n```\n\n2. Update `prisma/schema.prisma` jika diperlukan\n\n3. Regenerate Prisma Client:\n```bash\nnpm run prisma:generate\n```\n\n## Creating Admin User\n\nUntuk membuat admin user pertama:\n\n1. Visit http://localhost:3000/admin/setup\n2. Masukkan email dan password\n3. Submit form\n4. Login di http://localhost:3000/admin/login\n\nAtau menggunakan SQL:\n\n```bash\n# Generate password hash dulu (contoh untuk password: admin123)\n# Jalankan di Node.js REPL atau buat script kecil\nnode -e \"console.log(require('bcrypt').hashSync('admin123', 10))\"\n\n# Copy hash yang dihasilkan, lalu insert ke database\npsql -U postgres -d travel -c \"INSERT INTO admins (email, password, name) VALUES ('admin@example.com', 'PASTE_HASH_HERE', 'Admin');\"\n```\n","size_bytes":2871},"src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        \"bg-primary/20 relative h-2 w-full overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n","size_bytes":740},"src/lib/hooks/use-mobile.tsx":{"content":"import * as React from 'react';\n\nconst MOBILE_BREAKPOINT = 768;\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(\n    undefined,\n  );\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    };\n    mql.addEventListener('change', onChange);\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    return () => mql.removeEventListener('change', onChange);\n  }, []);\n\n  return !!isMobile;\n}\n","size_bytes":585},"src/components/sections/newsletter-subscription.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport Image from \"next/image\";\nimport { useTranslations } from \"next-intl\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\nconst NewsletterSubscription = () => {\n  const t = useTranslations('newsletter');\n  return (\n    <section>\n      <div className=\"flex flex-col-reverse items-center justify-between gap-16 rounded-[20px] bg-primary p-8 lg:flex-row lg:gap-8 lg:p-16\">\n        <div className=\"w-full lg:w-1/2\">\n          <h2 className=\"text-3xl font-bold uppercase tracking-wider text-[#112211] lg:text-5xl\">\n            {t('title')}\n          </h2>\n          <p className=\"mt-4 text-muted-foreground\">\n            {t('subtitle')}\n          </p>\n          <form className=\"mt-8 flex flex-col gap-4 sm:flex-row\">\n            <Input\n              type=\"email\"\n              placeholder={t('placeholder')}\n              className=\"h-14 w-full rounded-md border-foreground/20 bg-white placeholder:text-muted-foreground\"\n            />\n            <Button\n              className=\"h-14 w-full shrink-0 rounded-md bg-[#dcac56] text-white hover:bg-[#dcac56]/90 sm:w-32\"\n            >\n              {t('subscribe')}\n            </Button>\n          </form>\n        </div>\n\n        <div className=\"relative flex w-full justify-center lg:w-1/2 lg:justify-end\">\n          <Image\n            src=\"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/svgs/mailbox.e298bed9-5.svg?\"\n            alt=\"Mailbox illustration for newsletter\"\n            width={300}\n            height={300}\n            className=\"h-48 w-48 lg:h-64 lg:w-64\"\n          />\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default NewsletterSubscription;","size_bytes":1818},"src/app/global-error.tsx":{"content":"\"use client\";\n\nimport ErrorReporter from \"@/components/ErrorReporter\";\n\nexport default ErrorReporter;\n","size_bytes":102},"src/components/ui/ComponentSeparator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\n// Component separator for spacing between major sections\nfunction ComponentSeparator({ \n  className, \n  ...props \n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div \n      className={cn(\"w-full py-20 flex items-center justify-center\", className)}\n      {...props}\n    >\n      <div className=\"flex items-center justify-center space-x-4\">\n        {/* Left line */}\n        <div className=\"w-24 h-0.5 bg-gradient-to-r from-transparent to-primary/20\" />\n        \n        {/* Center decorative element */}\n        <div className=\"relative flex items-center justify-center\">\n          {/* Outer circle */}\n          <div className=\"w-12 h-12 rounded-full border-2 border-primary/20 bg-background flex items-center justify-center shadow-lg\">\n            {/* Inner circles */}\n            <div className=\"w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center\">\n              <div className=\"w-2 h-2 rounded-full bg-primary/30\" />\n            </div>\n          </div>\n          \n          {/* Corner dots */}\n          <div className=\"absolute -top-1 -left-1 w-1 h-1 rounded-full bg-primary/40\" />\n          <div className=\"absolute -top-1 -right-1 w-1 h-1 rounded-full bg-primary/40\" />\n          <div className=\"absolute -bottom-1 -left-1 w-1 h-1 rounded-full bg-primary/40\" />\n          <div className=\"absolute -bottom-1 -right-1 w-1 h-1 rounded-full bg-primary/40\" />\n        </div>\n        \n        {/* Right line */}\n        <div className=\"w-24 h-0.5 bg-gradient-to-l from-transparent to-primary/20\" />\n      </div>\n    </div>\n  )\n}\n\nexport { ComponentSeparator }\n","size_bytes":1668},"src/app/admin/setup/page.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { registerAdmin } from \"@/lib/admin-auth\";\n\nexport default function AdminSetupPage() {\n  const router = useRouter();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n\n    if (formData.password !== formData.confirmPassword) {\n      setError(\"Passwords do not match\");\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      setError(\"Password must be at least 6 characters\");\n      return;\n    }\n\n    setLoading(true);\n\n    const result = await registerAdmin(formData.email, formData.password, formData.name);\n\n    if (result.success) {\n      alert(\"Admin account created successfully! You can now login.\");\n      router.push(\"/admin/login\");\n    } else {\n      setError(result.error || \"Registration failed\");\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-50 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold\">Admin Setup</CardTitle>\n          <CardDescription>Create your first admin account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {error && (\n              <div className=\"rounded-md bg-red-50 p-3 text-sm text-red-800\">\n                {error}\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"name\" className=\"text-sm font-medium\">\n                Full Name\n              </label>\n              <Input\n                id=\"name\"\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"John Doe\"\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium\">\n                Email\n              </label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                placeholder=\"admin@example.com\"\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"password\" className=\"text-sm font-medium\">\n                Password\n              </label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                placeholder=\"At least 6 characters\"\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"confirmPassword\" className=\"text-sm font-medium\">\n                Confirm Password\n              </label>\n              <Input\n                id=\"confirmPassword\"\n                type=\"password\"\n                value={formData.confirmPassword}\n                onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}\n                placeholder=\"Confirm your password\"\n                required\n              />\n            </div>\n\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? \"Creating Account...\" : \"Create Admin Account\"}\n            </Button>\n\n            <div className=\"text-center text-sm text-gray-600\">\n              Already have an account?{\" \"}\n              <a href=\"/admin/login\" className=\"text-blue-600 hover:underline\">\n                Login here\n              </a>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4328},"src/components/sections/hero-banner.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useTranslations } from \"next-intl\";\n\ninterface SiteSettings {\n  heroImageUrl: string;\n}\n\nconst HeroBanner = () => {\n  const t = useTranslations(\"hero\");\n  const [settings, setSettings] = useState<SiteSettings>({\n    heroImageUrl:\n      'https://images.unsplash.com/photo-1476514525535-07fb3b4ae5f1?q=70&w=1920&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  });\n\n  useEffect(() => {\n    fetch('/api/settings')\n      .then(res => res.json())\n      .then(data => {\n        if (data) {\n          setSettings({\n            heroImageUrl: data.heroImageUrl,\n          });\n        }\n      })\n      .catch(error => console.error('Error fetching hero settings:', error));\n  }, []);\n\n  return (\n    <section className=\"relative flex h-[600px] w-full items-center\">\n      <div\n        className=\"absolute inset-0 z-0 bg-cover\"\n        style={{\n          backgroundImage: `url('${settings.heroImageUrl}')`,\n          backgroundPosition: \"center 40%\",\n        }}\n        aria-hidden=\"true\"\n      />\n      {/* Dark gradient overlay to improve contrast with navbar and hero text */}\n      <div className=\"absolute inset-0 z-10 pointer-events-none bg-gradient-to-b from-black/60 via-black/30 to-transparent\" aria-hidden=\"true\" />\n      <div className=\"relative z-20 w-full text-center text-white\">\n        <h1 className=\"text-white text-[3rem] font-bold uppercase md:text-[4rem] md:tracking-[.15em] lg:text-[5rem]\">\n          {t('title')}\n        </h1>\n        <p className=\"text-white text-[1rem] font-semibold lg:text-[1.25rem]\">\n          {t('subtitle')}\n        </p>\n      </div>\n    </section>\n  );\n};\n\nexport default HeroBanner;","size_bytes":1737},"src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        \"group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs\",\n        className\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  )\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &\n  VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        \"min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1925},"src/components/ui/aspect-ratio.tsx":{"content":"\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nfunction AspectRatio({\n  ...props\n}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {\n  return <AspectRatioPrimitive.Root data-slot=\"aspect-ratio\" {...props} />\n}\n\nexport { AspectRatio }\n","size_bytes":280},"src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          \"group/drawer-content bg-background fixed z-50 flex h-auto flex-col\",\n          \"data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b\",\n          \"data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t\",\n          \"data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm\",\n          \"data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm\",\n          className\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\n        \"flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":4255},"src/app/api/payments/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { cookies } from 'next/headers';\n\nexport async function GET() {\n  try {\n    const cookieStore = await cookies();\n    const role = cookieStore.get('session_role')?.value;\n\n    if (role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const payments = await prisma.payment.findMany({\n      include: {\n        flightRoute: {\n          include: {\n            departureCity: true,\n            arrivalCity: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    return NextResponse.json(payments);\n  } catch (error) {\n    console.error('Error fetching payments:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch payments' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    const newPayment = await prisma.payment.create({\n      data: {\n        flightRouteId: body.flightRouteId,\n        userId: body.userId || null,\n        userEmail: body.userEmail,\n        userName: body.userName,\n        status: body.status || 'pending',\n        amount: body.amount,\n      },\n      include: {\n        flightRoute: {\n          include: {\n            departureCity: true,\n            arrivalCity: true,\n          },\n        },\n      },\n    });\n\n    return NextResponse.json(newPayment);\n  } catch (error) {\n    console.error('Error creating payment:', error);\n    return NextResponse.json(\n      { error: 'Failed to create payment' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1669},"src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n","size_bytes":759},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2123},"src/components/ui/kbd.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Kbd({ className, ...props }: React.ComponentProps<\"kbd\">) {\n  return (\n    <kbd\n      data-slot=\"kbd\"\n      className={cn(\n        \"bg-muted text-muted-foreground pointer-events-none inline-flex h-5 w-fit min-w-5 items-center justify-center gap-1 rounded-sm px-1 font-sans text-xs font-medium select-none\",\n        \"[&_svg:not([class*='size-'])]:size-3\",\n        \"[[data-slot=tooltip-content]_&]:bg-background/20 [[data-slot=tooltip-content]_&]:text-background dark:[[data-slot=tooltip-content]_&]:bg-background/10\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction KbdGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <kbd\n      data-slot=\"kbd-group\"\n      className={cn(\"inline-flex items-center gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Kbd, KbdGroup }\n","size_bytes":862},"src/components/sections/footer.tsx":{"content":"\"use client\";\n\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Facebook, Twitter, Youtube, Instagram } from 'lucide-react';\nimport { useTranslations } from 'next-intl';\n\nconst GolobeLogo = () => (\n  <Link href=\"/\" aria-label=\"Golobe logo. Click to go to home page\">\n    <div className=\"flex items-center\">\n      <Image src=\"/logo.png\" alt=\"Golobe\" width={140} height={36} className=\"h-44 w-auto\" />\n    </div>\n  </Link>\n);\n\n\nconst Footer = () => {\n  const t = useTranslations('footer');\n  return (\n    <footer className=\"bg-primary px-4 py-10 text-white md:px-20 md:py-10\">\n      <div className=\"grid grid-cols-2 gap-8 md:grid-cols-5 md:gap-4\">\n        <div className=\"col-span-2 flex flex-col gap-4 md:col-span-1\">\n          <GolobeLogo />\n          <div className=\"flex gap-4\">\n            <a href=\"https://www.facebook.com\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Facebook\">\n              <Facebook className=\"h-6 w-6 text-white transition-opacity hover:opacity-80\" />\n            </a>\n            <a href=\"https://www.twitter.com\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Twitter\">\n              <Twitter className=\"h-6 w-6 text-white transition-opacity hover:opacity-80\" />\n            </a>\n            <a href=\"https://www.youtube.com\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Youtube\">\n              <Youtube className=\"h-6 w-6 text-white transition-opacity hover:opacity-80\" />\n            </a>\n            <a href=\"https://www.instagram.com\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Instagram\">\n              <Instagram className=\"h-6 w-6 text-white transition-opacity hover:opacity-80\" />\n            </a>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col gap-4 text-sm\">\n          <h3 className=\"font-bold\">{t('ourDestination')}</h3>\n          <Link href=\"#\" className=\"hover:underline\">{t('canada')}</Link>\n          <Link href=\"#\" className=\"hover:underline\">{t('alaska')}</Link>\n          <Link href=\"#\" className=\"hover:underline\">{t('france')}</Link>\n          <Link href=\"#\" className=\"hover:underline\">{t('iceland')}</Link>\n        </div>\n\n        <div className=\"flex flex-col gap-4 text-sm\">\n          <h3 className=\"font-bold\">{t('ourActivity')}</h3>\n          <Link href=\"#\" className=\"hover:underline\">{t('northernLights')}</Link>\n          <Link href=\"#\" className=\"hover:underline\">{t('cruisingSailing')}</Link>\n          <Link href=\"#\" className=\"hover:underline\">{t('multiActivities')}</Link>\n          <Link href=\"#\" className=\"hover:underline\">{t('kayaking')}</Link>\n        </div>\n\n        <div className=\"flex flex-col gap-4 text-sm\">\n          <h3 className=\"font-bold\">{t('travelBlogs')}</h3>\n          <Link href=\"#\" className=\"hover:underline\">{t('baliGuide')}</Link>\n          <Link href=\"#\" className=\"hover:underline\">{t('srilankaGuide')}</Link>\n          <Link href=\"#\" className=\"hover:underline\">{t('peruGuide')}</Link>\n        </div>\n\n        <div className=\"flex flex-col gap-8 text-sm\">\n          <div className=\"flex flex-col gap-4\">\n            <h3 className=\"font-bold\">{t('aboutUs')}</h3>\n            <Link href=\"#\" className=\"hover:underline\">{t('ourStory')}</Link>\n            <Link href=\"#\" className=\"hover:underline\">{t('workWithUs')}</Link>\n          </div>\n          <div className=\"flex flex-col gap-4\">\n            <h3 className=\"font-bold\">{t('contactSection')}</h3>\n            <Link href=\"/support\" className=\"hover:underline\">{t('supportCenter')}</Link>\n            <Link href=\"/privacy\" className=\"hover:underline\">{t('privacyPolicy')}</Link>\n            <Link href=\"/terms\" className=\"hover:underline\">{t('termsOfService')}</Link>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":3781},"src/app/login/page.tsx":{"content":"import HeaderNavigation from \"@/components/sections/header-navigation\";\nimport Footer from \"@/components/sections/footer\";\nimport LoginForm from \"@/components/auth/login-form\";\n\nexport default function LoginPage() {\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <HeaderNavigation />\n      \n      <main className=\"flex-1 flex items-center justify-center py-12 px-4\">\n        <LoginForm />\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":471},"src/components/flights/city-selector.tsx":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { City } from '@/types';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { MapPin, Search } from 'lucide-react';\n\ninterface CitySelectorProps {\n  label: string;\n  value: City | null;\n  onChange: (city: City) => void;\n  placeholder?: string;\n  minimal?: boolean;\n  placeholderTitle?: string;\n  placeholderSubtitle?: string;\n}\n\nexport default function CitySelector({\n  label,\n  value,\n  onChange,\n  placeholder = 'Select city',\n  minimal = false,\n  placeholderTitle = 'City',\n  placeholderSubtitle = 'Airport name',\n}: CitySelectorProps) {\n  const t = useTranslations('common');\n  const [open, setOpen] = useState(false);\n  const [cities, setCities] = useState<City[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchCities();\n  }, []);\n\n  async function fetchCities() {\n    try {\n      const response = await fetch('/api/cities');\n      if (!response.ok) throw new Error('Failed to fetch cities');\n\n      const data = await response.json();\n      setCities(data || []);\n    } catch (error) {\n      console.error('Error fetching cities:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const filteredCities = cities.filter((city) =>\n    city.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-2\">\n      <label className={minimal ? \"sr-only\" : \"text-sm font-medium text-muted-foreground\"}>{label}</label>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant={minimal ? \"ghost\" : \"outline\"}\n            role=\"combobox\"\n            aria-expanded={open}\n            className={minimal ? \"w-full justify-start text-left font-normal h-auto p-0 bg-transparent hover:bg-transparent border-0 shadow-none\" : \"w-full justify-start text-left font-normal h-auto py-3 px-4\"}\n          >\n            <div className=\"flex flex-col items-start w-full\">\n              {value ? (\n                <>\n                  <span className={minimal ? \"font-bold text-lg sm:text-2xl\" : \"font-bold text-lg\"}>{value.name}</span>\n                  <span className={minimal ? \"text-xs sm:text-sm text-muted-foreground\" : \"text-xs text-muted-foreground\"}>\n                    {value.description.substring(0, 40)}...\n                  </span>\n                </>\n              ) : (\n                <div className=\"flex flex-col items-start w-full\">\n                  <span className={minimal ? \"font-bold text-lg sm:text-2xl\" : \"text-muted-foreground\"}>\n                    {minimal ? placeholderTitle : placeholder}\n                  </span>\n                  {minimal && (\n                    <span className=\"text-xs sm:text-sm text-muted-foreground whitespace-pre-line\">{placeholderSubtitle}</span>\n                  )}\n                </div>\n              )}\n            </div>\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[calc(100vw-2rem)] sm:w-[400px] p-0\" align=\"start\">\n          <div className=\"p-3 border-b\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder={t('searchCity')}\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n          </div>\n          <div className=\"max-h-[300px] overflow-y-auto p-2\">\n            {loading ? (\n              <div className=\"p-4 text-center text-muted-foreground\">{t('loading')}</div>\n            ) : filteredCities.length === 0 ? (\n              <div className=\"p-4 text-center text-muted-foreground\">{t('noCitiesFound')}</div>\n            ) : (\n              <div className=\"space-y-1\">\n                {filteredCities.map((city) => (\n                  <button\n                    key={city.id}\n                    onClick={() => {\n                      onChange(city);\n                      setOpen(false);\n                      setSearchQuery('');\n                    }}\n                    className=\"w-full text-left p-3 rounded-lg hover:bg-accent transition-colors\"\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <MapPin className=\"w-5 h-5 text-muted-foreground mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <div className=\"font-semibold\">{city.name}</div>\n                        <div className=\"text-sm text-muted-foreground line-clamp-1\">\n                          {city.description}\n                        </div>\n                      </div>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n","size_bytes":5127},"MIGRATION_GUIDE.md":{"content":"# Migration Guide: Supabase to PostgreSQL + Prisma\n\nWebsite ini telah berhasil dimigrasi dari Supabase ke PostgreSQL + Prisma dengan NextJS sebagai full-stack framework.\n\n## Perubahan Teknologi\n\n### Sebelum\n- **Database**: Supabase (PostgreSQL dengan authentication bawaan)\n- **ORM**: Supabase Client\n- **Authentication**: Supabase Auth\n\n### Sesudah\n- **Database**: PostgreSQL (standalone)\n- **ORM**: Prisma\n- **Authentication**: Custom dengan bcrypt\n\n## Setup Database\n\n### 1. Jalankan Migration\n\nPastikan database PostgreSQL Anda sudah berjalan, kemudian jalankan migration:\n\n```bash\n# Setup database dengan connection string Anda\npsql postgresql://postgres:EDUJUANDA12345@localhost:5432/travel < migrations/001_initial_setup.sql\n```\n\nAtau menggunakan Prisma:\n\n```bash\n# Generate Prisma Client\nnpx prisma generate\n\n# Push schema ke database (hanya untuk development)\nnpx prisma db push\n```\n\n### 2. Environment Variables\n\nFile `.env` sudah dikonfigurasi dengan:\n\n```env\nDATABASE_URL=\"postgresql://postgres:EDUJUANDA12345@localhost:5432/travel\"\n```\n\n## Struktur Database\n\n### Tables\n\n1. **cities** - Daftar kota destinasi\n   - id, name, description, image_url, created_at\n\n2. **packages** - Paket perjalanan\n   - id, city_id, name, description, price, duration_days, image_url, features (JSONB), created_at\n\n3. **payments** - Transaksi pembayaran\n   - id, package_id, user_email, user_name, status, amount, created_at\n\n4. **flight_packages** - Paket penerbangan\n   - id, airline, flight_number, origin, destination, departure_time, arrival_time, price, class, available_seats, duration, baggage, is_active, created_at, updated_at\n\n5. **users** - User accounts\n   - id, email, password (hashed), name, created_at\n\n6. **admins** - Admin accounts\n   - id, email, password (hashed), name, created_at\n\n## API Routes\n\nSemua akses database sekarang melalui API routes:\n\n### Packages\n- `GET /api/packages` - List semua packages\n- `POST /api/packages` - Create package baru\n- `GET /api/packages/[id]` - Get package by ID\n- `PUT /api/packages/[id]` - Update package\n- `DELETE /api/packages/[id]` - Delete package\n\n### Cities\n- `GET /api/cities` - List semua cities\n- `POST /api/cities` - Create city baru\n- `PUT /api/cities/[id]` - Update city\n- `DELETE /api/cities/[id]` - Delete city\n\n### Flights\n- `GET /api/flights` - List semua flights (dengan filter origin/destination)\n- `POST /api/flights` - Create flight baru\n- `PUT /api/flights/[id]` - Update flight\n- `DELETE /api/flights/[id]` - Delete flight\n\n### Payments\n- `GET /api/payments` - List semua payments\n- `POST /api/payments` - Create payment baru\n\n### Authentication\n- `POST /api/admin/login` - Admin login\n- `POST /api/admin/register` - Admin registration\n\n## Fitur Yang Berfungsi\n\n✅ Homepage dengan hero banner\n✅ Package listings dengan city grouping\n✅ Package detail page\n✅ Payment modal dan flow\n✅ Flight listings\n✅ Cities management (Admin)\n✅ Authentication (Admin)\n✅ API routes untuk CRUD operations\n\n## Fitur Admin Dashboard\n\nHalaman admin tersedia di `/admin/dashboard`:\n\n- **Dashboard** - Overview statistik (placeholder)\n- **Cities** - Management kota destinasi (fully functional)\n- **Packages** - Management paket perjalanan (placeholder)\n- **Flight Packages** - Management paket penerbangan (placeholder)\n- **Destinations** - Popular destinations (placeholder)\n- **Hero Banners** - Banner management (placeholder)\n- **Reviews** - Customer reviews (placeholder)\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Generate Prisma Client\nnpx prisma generate\n\n# Run development server\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm start\n```\n\n## Prisma Commands\n\n```bash\n# Generate Prisma Client\nnpx prisma generate\n\n# Push schema changes to database (development only)\nnpx prisma db push\n\n# Create a new migration\nnpx prisma migrate dev --name migration_name\n\n# Apply migrations to production\nnpx prisma migrate deploy\n\n# Open Prisma Studio (database GUI)\nnpx prisma studio\n```\n\n## Notes\n\n1. Database harus running di `localhost:5432` dengan credentials yang sesuai\n2. Pastikan extension `uuid-ossp` sudah enabled di PostgreSQL\n3. Untuk production, gunakan proper session management dengan JWT atau cookies\n4. Admin pages yang masih placeholder perlu di-implement sesuai kebutuhan\n\n## Security\n\n- Passwords di-hash menggunakan bcrypt dengan salt rounds 10\n- API routes bisa ditambahkan middleware authentication jika diperlukan\n- Gunakan environment variables untuk sensitive data\n\n## Next Steps\n\n1. Implement proper session management untuk authentication\n2. Complete remaining admin dashboard features\n3. Add middleware untuk protect admin routes\n4. Setup proper logging dan error handling\n5. Add data validation dengan Zod atau Yup\n6. Implement caching strategy untuk performance\n","size_bytes":4806},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":276},"src/app/page.tsx":{"content":"import HeaderNavigation from \"@/components/sections/header-navigation\";\nimport HeroBanner from \"@/components/sections/hero-banner\";\nimport FlightSearchForm from \"@/components/sections/flight-search-form\";\nimport PopularFlightDestinations from \"@/components/sections/popular-flight-destinations\";\nimport CtaCards from \"@/components/sections/cta-cards\";\nimport CustomerReviewsCarousel from \"@/components/sections/customer-reviews-carousel\";\nimport NewsletterSubscription from \"@/components/sections/newsletter-subscription\";\nimport Footer from \"@/components/sections/footer\";\n\nexport default function Page() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"relative\">\n        <HeaderNavigation />\n        <HeroBanner />\n        <FlightSearchForm />\n      </div>\n\n      <main className=\"container mx-auto px-4 sm:px-6 lg:px-20 space-y-20 py-20\">\n        <PopularFlightDestinations />\n        <CtaCards />\n        <CustomerReviewsCarousel />\n        <NewsletterSubscription />\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":1057},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1989},"src/types/index.ts":{"content":"export interface City {\n  id: string;\n  name: string;\n  description: string;\n  imageUrl: string;\n  createdAt: Date;\n}\n\nexport interface Package {\n  id: string;\n  cityId: string;\n  name: string;\n  description: string;\n  price: number;\n  durationDays: number;\n  imageUrl: string;\n  features: string[];\n  createdAt: Date;\n}\n\nexport interface PackageWithCity extends Package {\n  city: City;\n}\n\nexport interface FlightPackage {\n  id: string;\n  airline: string;\n  flightNumber: string;\n  origin: string;\n  destination: string;\n  departureTime: string;\n  arrivalTime: string;\n  price: number;\n  class: string;\n  availableSeats: number;\n  duration: string;\n  baggage: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Payment {\n  id: string;\n  packageId: string;\n  userEmail: string;\n  userName: string;\n  status: string;\n  amount: number;\n  createdAt: Date;\n}\n\nexport interface PaymentWithPackage extends Payment {\n  package: PackageWithCity;\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  name?: string;\n  createdAt: Date;\n}\n\nexport interface Admin {\n  id: string;\n  email: string;\n  name?: string;\n  createdAt: Date;\n}\n\nexport interface HeroBanner {\n  id: string;\n  title: string;\n  subtitle: string;\n  imageUrl: string;\n  isActive: boolean;\n  order: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface CustomerReview {\n  id: string;\n  customerName: string;\n  rating: number;\n  comment: string;\n  imageUrl?: string;\n  location?: string;\n  isActive: boolean;\n  createdAt: Date;\n}\n\nexport interface PopularDestination {\n  id: string;\n  city: string;\n  country: string;\n  airportCode: string;\n  imageUrl: string;\n  description?: string;\n  isActive: boolean;\n  order: number;\n  createdAt: Date;\n}\n","size_bytes":1752},"src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDownIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction NavigationMenu({\n  className,\n  children,\n  viewport = true,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {\n  viewport?: boolean\n}) {\n  return (\n    <NavigationMenuPrimitive.Root\n      data-slot=\"navigation-menu\"\n      data-viewport={viewport}\n      className={cn(\n        \"group/navigation-menu relative flex max-w-max flex-1 items-center justify-center\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      {viewport && <NavigationMenuViewport />}\n    </NavigationMenuPrimitive.Root>\n  )\n}\n\nfunction NavigationMenuList({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {\n  return (\n    <NavigationMenuPrimitive.List\n      data-slot=\"navigation-menu-list\"\n      className={cn(\n        \"group flex flex-1 list-none items-center justify-center gap-1\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {\n  return (\n    <NavigationMenuPrimitive.Item\n      data-slot=\"navigation-menu-item\"\n      className={cn(\"relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1\"\n)\n\nfunction NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n      {...props}\n    >\n      {children}{\" \"}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\"\n      />\n    </NavigationMenuPrimitive.Trigger>\n  )\n}\n\nfunction NavigationMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        \"data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto\",\n        \"group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuViewport({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {\n  return (\n    <div\n      className={cn(\n        \"absolute top-full left-0 isolate z-50 flex justify-center\"\n      )}\n    >\n      <NavigationMenuPrimitive.Viewport\n        data-slot=\"navigation-menu-viewport\"\n        className={cn(\n          \"origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction NavigationMenuLink({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {\n  return (\n    <NavigationMenuPrimitive.Link\n      data-slot=\"navigation-menu-link\"\n      className={cn(\n        \"data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuIndicator({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {\n  return (\n    <NavigationMenuPrimitive.Indicator\n      data-slot=\"navigation-menu-indicator\"\n      className={cn(\n        \"data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md\" />\n    </NavigationMenuPrimitive.Indicator>\n  )\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  navigationMenuTriggerStyle,\n}\n","size_bytes":6664},"src/components/sections/cta-cards.tsx":{"content":"\"use client\";\n\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { useTranslations } from \"next-intl\";\n\nconst CtaCards = () => {\n  const t = useTranslations('nav');\n  const tCta = useTranslations('ctaCards');\n  return (\n    <section className=\"grid grid-cols-1 md:grid-cols-2 gap-5\">\n      <div className=\"relative group overflow-hidden rounded-2xl h-[440px]\">\n        <Image\n          src=\"/flight.jpeg\"\n          alt=\"Airport tarmac with plane and ground vehicle\"\n          fill\n          priority\n          sizes=\"(max-width: 768px) 100vw, 50vw\"\n          className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n          style={{ zIndex: 0 }}\n        />\n        <div className=\"absolute inset-0 bg-black/40\" style={{ zIndex: 1 }} />\n        <div className=\"relative flex h-full flex-col justify-center text-white px-5 py-10\" style={{ zIndex: 2 }}>\n          <h3 className=\"mb-2 text-[2.5rem] font-bold text-white\">{tCta('flightsTitle')}</h3>\n          <p className=\"mb-5 max-w-[40ch] text-lg text-white leading-6 line-clamp-2\">\n            {tCta('flightsDescription')}\n          </p>\n          <Link\n            href=\"/flights\"\n            className=\"inline-flex items-center justify-center whitespace-nowrap text-sm font-semibold ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-[#9BE0C8] active:bg-[#82CBB2] focus:bg-[#A5EBD3] h-[48px] px-[16px] rounded-[4px] py-[8px] mt-auto w-fit gap-[6px]\"\n          >\n            <Image\n              src=\"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/svgs/paper-plane-filled-4.svg?\"\n              alt=\"paper plane icon\"\n              width={24}\n              height={24}\n            />\n            {t('findFlights')}\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default CtaCards;","size_bytes":2092},"src/components/sections/customer-reviews-carousel.tsx":{"content":"\"use client\";\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useTranslations } from 'next-intl';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { Star, Users, BadgePercent, BarChart3 as TrendingUp, Quote, ChevronLeft, ChevronRight } from 'lucide-react';\n\ntype Stat = { icon: React.ComponentType<any>; value: string; labelKey: string; bgColor: string };\n\nconst stats: Stat[] = [\n  {\n    icon: Star,\n    value: \"5.0\",\n    labelKey: \"averageRating\",\n    bgColor: \"bg-chart-1/20\",\n  },\n  {\n    icon: Users,\n    value: \"1+\",\n    labelKey: \"satisfiedCustomers\",\n    bgColor: \"bg-primary/20\",\n  },\n  {\n    icon: BadgePercent,\n    value: \"100%\",\n    labelKey: \"satisfactionRate\",\n    bgColor: \"bg-chart-2/40\",\n  },\n  {\n    icon: TrendingUp,\n    value: \"1+\",\n    labelKey: \"fiveStarReviews\",\n    bgColor: \"bg-chart-3/40\",\n  },\n];\n\nconst StatCard = React.memo(({ icon: Icon, value, labelKey, bgColor }: Stat) => {\n  const t = useTranslations('stats');\n  return (\n    <div className={`p-4 rounded-xl border border-gray-200 flex flex-col items-center justify-center gap-2 text-center shadow-sm ${bgColor}`}>\n      <Icon className=\"w-8 h-8 text-primary\" strokeWidth={1.5} />\n      <p className=\"text-3xl font-bold text-dark-charcoal\">{value}</p>\n      <p className=\"text-sm text-medium-gray\">{t(labelKey as any)}</p>\n    </div>\n  );\n});\nStatCard.displayName = 'StatCard';\n\ntype ReviewTextProps = { text: string };\n\nconst ReviewText = ({ text }: ReviewTextProps) => {\n  const t = useTranslations('reviews');\n  const [isExpanded, setIsExpanded] = useState(false);\n  const shortText = text.length > 250 ? text.substring(0, 250) + \"...\" : text;\n\n  return (\n    <p className=\"mt-5 text-justify text-base text-medium-gray\">\n      {isExpanded ? text : shortText}\n      {text.length > 250 && (\n         <button\n            onClick={() => setIsExpanded(!isExpanded)}\n            className=\"ml-1 font-semibold text-primary underline underline-offset-4\"\n        >\n            {isExpanded ? t('viewLess', { default: 'View less' }) : t('viewMore', { default: 'View more' })}\n        </button>\n      )}\n    </p>\n  );\n};\n\ntype Review = { name: string; title: string; rating: number; text: string };\n\nconst EmblaCarousel = ({ reviews }: { reviews: Review[] }) => {\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true });\n  const [prevBtnDisabled, setPrevBtnDisabled] = useState(true);\n  const [nextBtnDisabled, setNextBtnDisabled] = useState(true);\n\n  const scrollPrev = useCallback(() => emblaApi && emblaApi.scrollPrev(), [emblaApi]);\n  const scrollNext = useCallback(() => emblaApi && emblaApi.scrollNext(), [emblaApi]);\n\n  const onSelect = useCallback(() => {\n    if (!emblaApi) return;\n    setPrevBtnDisabled(!emblaApi.canScrollPrev());\n    setNextBtnDisabled(!emblaApi.canScrollNext());\n  }, [emblaApi]);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n    onSelect();\n    emblaApi.on('select', onSelect);\n    emblaApi.on('reInit', onSelect);\n  }, [emblaApi, onSelect]);\n\n  return (\n    <div className=\"relative mx-auto mt-8 max-w-4xl\">\n        <button\n          className=\"embla__prev absolute -left-4 top-1/2 z-10 -translate-y-1/2 rounded-full bg-primary p-3 text-white shadow-lg transition-opacity hover:opacity-80 disabled:opacity-30 sm:-left-6 md:-left-10 lg:-left-16\"\n          onClick={scrollPrev}\n          aria-label=\"Previous review\"\n        >\n          <ChevronLeft className=\"h-6 w-6\" />\n        </button>\n\n      <div className=\"embla overflow-hidden\" ref={emblaRef}>\n        <div className=\"embla__container flex\">\n          {reviews.map((review: Review, index: number) => (\n            <div key={index} className=\"embla__slide min-w-0 flex-[0_0_100%] px-4\">\n              <div className=\"rounded-2xl border border-gray-200 bg-white p-6 shadow-sm\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex flex-1 flex-col\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"font-bold text-dark-charcoal\">{review.name}</h3>\n                      <div className=\"flex flex-col items-end\">\n                        <div className=\"flex items-center gap-1\">\n                          <Star className=\"h-5 w-5 fill-amber-400 text-amber-400\" />\n                          <span className=\"font-bold text-dark-charcoal\">{review.rating.toFixed(1)}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-medium-gray\">{review.title}</p>\n                    <ReviewText text={review.text} />\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n        <button\n          className=\"embla__next absolute -right-4 top-1/2 z-10 -translate-y-1/2 rounded-full bg-primary p-3 text-white shadow-lg transition-opacity hover:opacity-80 disabled:opacity-30 sm:-right-6 md:-right-10 lg:-right-16\"\n          onClick={scrollNext}\n          aria-label=\"Next review\"\n        >\n          <ChevronRight className=\"h-6 w-6\" />\n        </button>\n    </div>\n  );\n};\n\nconst CustomerReviewsCarousel = () => {\n  const t = useTranslations('reviews');\n  const tCommon = useTranslations('common');\n  const [reviews, setReviews] = useState([\n    {\n      name: tCommon('loading'),\n      title: tCommon('pleaseWait'),\n      rating: 5.0,\n      text: tCommon('loadingReviews'),\n    }\n  ]);\n\n  useEffect(() => {\n    fetch('/api/reviews')\n      .then(res => res.json())\n      .then(data => {\n        if (Array.isArray(data) && data.length > 0) {\n          const formattedReviews = data\n            .filter(review => review.isActive)\n            .map(review => ({\n              name: review.customerName,\n              title: review.location || tCommon('verifiedCustomer'),\n              rating: review.rating,\n              text: review.comment,\n            }));\n          setReviews(formattedReviews);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching reviews:', error);\n        setReviews([\n          {\n            name: \"Mojahid\",\n            title: tCommon('verifiedCustomer'),\n            rating: 5.0,\n            text: \"Using this travel agency's website has been a seamless experience. The platform is user-friendly and professional, making it easy to search and book flights and hotels.\",\n          }\n        ]);\n      });\n  }, []);\n\n  return (\n    <section className=\"py-16\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"mb-12 text-center text-3xl font-bold\">\n          {t('title', { default: 'What Our Customers Say' })}\n        </h2>\n\n        <div className=\"mb-8 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4\">\n          {stats.map((stat, index) => (\n            <StatCard key={index} {...stat} />\n          ))}\n        </div>\n\n        <EmblaCarousel reviews={reviews} />\n      </div>\n    </section>\n  );\n};\n\nexport default CustomerReviewsCarousel;\n","size_bytes":6990},"src/components/ui/scroll-area.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1645},"src/components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={cn(\n          \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n        )}\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n","size_bytes":1177},"src/components/ui/container-scroll-animation.tsx":{"content":"\"use client\";\nimport React, { useRef } from \"react\";\nimport { useScroll, useTransform, motion, MotionValue } from \"motion/react\";\n\nexport const ContainerScroll = ({\n  titleComponent,\n  children,\n}: {\n  titleComponent: string | React.ReactNode;\n  children: React.ReactNode;\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: containerRef,\n  });\n  const [isMobile, setIsMobile] = React.useState(false);\n\n  React.useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    checkMobile();\n    window.addEventListener(\"resize\", checkMobile);\n    return () => {\n      window.removeEventListener(\"resize\", checkMobile);\n    };\n  }, []);\n\n  const scaleDimensions = () => {\n    return isMobile ? [0.7, 0.9] : [1.05, 1];\n  };\n\n  const rotate = useTransform(scrollYProgress, [0, 1], [20, 0]);\n  const scale = useTransform(scrollYProgress, [0, 1], scaleDimensions());\n  const translate = useTransform(scrollYProgress, [0, 1], [0, -100]);\n\n  return (\n    <div\n      className=\"h-[60rem] md:h-[80rem] flex items-center justify-center relative p-2 md:p-20\"\n      ref={containerRef}\n    >\n      <div\n        className=\"py-10 md:py-40 w-full relative\"\n        style={{\n          perspective: \"1000px\",\n        }}\n      >\n        <Header translate={translate} titleComponent={titleComponent} />\n        <Card rotate={rotate} translate={translate} scale={scale}>\n          {children}\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport const Header = ({ translate, titleComponent }: any) => {\n  return (\n    <motion.div\n      style={{\n        translateY: translate,\n      }}\n      className=\"div max-w-5xl mx-auto text-center\"\n    >\n      {titleComponent}\n    </motion.div>\n  );\n};\n\nexport const Card = ({\n  rotate,\n  scale,\n  children,\n}: {\n  rotate: MotionValue<number>;\n  scale: MotionValue<number>;\n  translate: MotionValue<number>;\n  children: React.ReactNode;\n}) => {\n  return (\n    <motion.div\n      style={{\n        rotateX: rotate,\n        scale,\n        boxShadow:\n          \"0 0 #0000004d, 0 9px 20px #0000004a, 0 37px 37px #00000042, 0 84px 50px #00000026, 0 149px 60px #0000000a, 0 233px 65px #00000003\",\n      }}\n      className=\"max-w-5xl -mt-12 mx-auto h-[30rem] md:h-[40rem] w-full border-4 border-[#6C6C6C] p-2 md:p-6 bg-[#222222] rounded-[30px] shadow-2xl\"\n    >\n      <div className=\" h-full w-full  overflow-hidden rounded-2xl bg-gray-100 dark:bg-zinc-900 md:rounded-2xl md:p-4 \">\n        {children}\n      </div>\n    </motion.div>\n  );\n};\n","size_bytes":2555},"src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","size_bytes":6253},"src/components/ui/context-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ContextMenu({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {\n  return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />\n}\n\nfunction ContextMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {\n  return (\n    <ContextMenuPrimitive.Trigger data-slot=\"context-menu-trigger\" {...props} />\n  )\n}\n\nfunction ContextMenuGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {\n  return (\n    <ContextMenuPrimitive.Group data-slot=\"context-menu-group\" {...props} />\n  )\n}\n\nfunction ContextMenuPortal({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {\n  return (\n    <ContextMenuPrimitive.Portal data-slot=\"context-menu-portal\" {...props} />\n  )\n}\n\nfunction ContextMenuSub({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {\n  return <ContextMenuPrimitive.Sub data-slot=\"context-menu-sub\" {...props} />\n}\n\nfunction ContextMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {\n  return (\n    <ContextMenuPrimitive.RadioGroup\n      data-slot=\"context-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      data-slot=\"context-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto\" />\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction ContextMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {\n  return (\n    <ContextMenuPrimitive.SubContent\n      data-slot=\"context-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {\n  return (\n    <ContextMenuPrimitive.Portal>\n      <ContextMenuPrimitive.Content\n        data-slot=\"context-menu-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </ContextMenuPrimitive.Portal>\n  )\n}\n\nfunction ContextMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <ContextMenuPrimitive.Item\n      data-slot=\"context-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {\n  return (\n    <ContextMenuPrimitive.CheckboxItem\n      data-slot=\"context-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction ContextMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {\n  return (\n    <ContextMenuPrimitive.RadioItem\n      data-slot=\"context-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}\n\nfunction ContextMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.Label\n      data-slot=\"context-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {\n  return (\n    <ContextMenuPrimitive.Separator\n      data-slot=\"context-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"context-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":8222},"src/app/api/packages/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nexport const runtime = 'nodejs';\n\nexport async function GET() {\n  try {\n    const packages = await prisma.package.findMany({\n      include: {\n        city: true,\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    return NextResponse.json(packages);\n  } catch (error) {\n    console.error('Error fetching packages:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch packages' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const contentType = request.headers.get('content-type') || '';\n    let cityId = '';\n    let name = '';\n    let description = '';\n    let price = 0;\n    let durationDays = 1;\n    let imageUrl = '';\n    let features: string[] = [];\n\n    if (contentType.includes('multipart/form-data')) {\n      const form = await request.formData();\n      cityId = String(form.get('cityId') || '');\n      name = String(form.get('name') || '');\n      description = String(form.get('description') || '');\n      price = parseFloat(String(form.get('price') || '0'));\n      durationDays = parseInt(String(form.get('durationDays') || '1')) || 1;\n      const featuresRaw = String(form.get('features') || '').split('\\n').map(s => s.trim()).filter(Boolean);\n      features = featuresRaw;\n      const file = form.get('image') as File | null;\n      if (file && file.size > 0) {\n        const arrayBuffer = await file.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        const uploadsDir = path.join(process.cwd(), 'public', 'uploads');\n        await fs.mkdir(uploadsDir, { recursive: true });\n        const safeName = file.name.replace(/[^a-zA-Z0-9_.-]/g, '_');\n        const filename = `${ Date.now() }_${ safeName }`;\n        const outPath = path.join(uploadsDir, filename);\n        await fs.writeFile(outPath, buffer);\n        imageUrl = `/uploads/${filename}`;\n      } else {\n        imageUrl = String(form.get('imageUrl') || '');\n      }\n    } else {\n      const body = await request.json();\n      cityId = body.cityId;\n      name = body.name;\n      description = body.description || '';\n      price = body.price;\n      durationDays = body.durationDays || 1;\n      imageUrl = body.imageUrl || '';\n      features = body.features || [];\n    }\n\n    const newPackage = await prisma.package.create({\n      data: {\n        cityId,\n        name,\n        description,\n        price,\n        durationDays,\n        imageUrl,\n        features,\n      },\n      include: {\n        city: true,\n      },\n    });\n\n    return NextResponse.json(newPackage);\n  } catch (error) {\n    console.error('Error creating package:', error);\n    return NextResponse.json(\n      { error: 'Failed to create package' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":2896},"src/components/sections/popular-flight-destinations.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { MapPin } from \"lucide-react\";\nimport { useTranslations } from \"next-intl\";\n\ninterface City {\n  id: string;\n  name: string;\n}\n\ninterface FlightRoute {\n  id: string;\n  airline: string;\n  departureCity: City;\n  arrivalCity: City;\n  totalPrice: number;\n  imageUrl: string;\n  duration: string;\n}\n\ninterface PopularFlightRoute {\n  id: string;\n  flightRouteId: string;\n  displayOrder: number;\n  isActive: boolean;\n  imageUrl?: string | null;\n  flightRoute: FlightRoute;\n}\n\ntype Destination = {\n  city: string;\n  routeName: string;\n  imageUrl: string;\n  href: string;\n  price: number;\n  duration: string;\n};\n\nconst PopularFlightDestinations = () => {\n  const t = useTranslations('destinations');\n  const [destinations, setDestinations] = useState<Destination[]>([]);\n\n  useEffect(() => {\n    fetch('/api/popular-flight-routes')\n      .then(res => res.json())\n      .then((data: PopularFlightRoute[]) => {\n        if (Array.isArray(data)) {\n          const formattedDestinations = data\n            .sort((a, b) => a.displayOrder - b.displayOrder)\n            .map(popRoute => ({\n              city: popRoute.flightRoute.arrivalCity.name,\n              routeName: `${popRoute.flightRoute.departureCity.name} → ${popRoute.flightRoute.arrivalCity.name}`,\n              imageUrl: popRoute.imageUrl || popRoute.flightRoute.imageUrl || 'https://images.pexels.com/photos/46148/aircraft-jet-landing-cloud-46148.jpeg',\n              price: Number(popRoute.flightRoute.totalPrice),\n              duration: popRoute.flightRoute.duration,\n              href: `/flights/${popRoute.flightRoute.id}/book`,\n            }));\n          setDestinations(formattedDestinations);\n        }\n      })\n      .catch(error => console.error('Error fetching popular flight routes:', error));\n  }, []);\n\n  return (\n    <section className=\"mx-auto\">\n      <div className=\"mx-auto mb-5 flex items-center justify-between max-md:flex-col max-md:gap-4 md:mb-10\">\n        <div className=\"md:w-1/2\">\n          <h2 className=\"mb-2 text-[2rem] font-semibold text-dark-charcoal max-md:text-center md:mb-4\">\n            {t('popularFlights')}\n          </h2>\n          <p className=\"text-medium-gray max-md:text-center\">\n            {t('exploreDeals')}\n          </p>\n        </div>\n      </div>\n      <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-4\">\n        {destinations.map((destination, index) => (\n          <Link href={destination.href} key={`${destination.city}-${index}`}>\n            <div className=\"group overflow-hidden rounded-lg border bg-card text-card-foreground shadow-sm transition-all duration-300 hover:shadow-lg\">\n              <div className=\"relative h-48 overflow-hidden\">\n                <Image\n                  alt={`${destination.routeName}`}\n                  src={destination.imageUrl}\n                  fill\n                  className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent\" />\n                <div className=\"absolute bottom-4 left-4 text-white\">\n                  <div className=\"mb-2 flex items-center gap-2\">\n                    <MapPin className=\"h-5 w-5\" />\n                    <span className=\"text-sm font-semibold uppercase tracking-wide\">\n                      {destination.city.substring(0, 3).toUpperCase()}\n                    </span>\n                  </div>\n                  <h3 className=\"text-xl text-white font-bold leading-tight\">\n                    {destination.routeName}\n                  </h3>\n                </div>\n              </div>\n            </div>\n          </Link>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default PopularFlightDestinations;\n","size_bytes":3873},"src/app/admin/dashboard/cities/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Edit, Trash2, X } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { City } from \"@/types\";\n\nexport default function CitiesPage() {\n  const [cities, setCities] = useState<City[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingCity, setEditingCity] = useState<City | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    imageUrl: \"\",\n  });\n  const [file, setFile] = useState<File | null>(null);\n\n  useEffect(() => {\n    loadCities();\n  }, []);\n\n  const loadCities = async () => {\n    try {\n      const response = await fetch('/api/cities');\n      if (!response.ok) throw new Error('Failed to load cities');\n      const data = await response.json();\n      setCities(data || []);\n    } catch (error) {\n      console.error(\"Error loading cities:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      if (editingCity) {\n        // Update existing city\n        if (file) {\n          const fd = new FormData();\n          fd.append('name', formData.name);\n          fd.append('description', formData.description);\n          fd.append('image', file);\n          const response = await fetch(`/api/cities/${editingCity.id}`, {\n            method: 'PUT',\n            body: fd,\n          });\n          if (!response.ok) throw new Error('Failed to update city');\n        } else {\n          const payload = { ...formData };\n          const response = await fetch(`/api/cities/${editingCity.id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n          });\n          if (!response.ok) throw new Error('Failed to update city');\n        }\n      } else {\n        // Create new city\n        if (file) {\n          const fd = new FormData();\n          fd.append('name', formData.name);\n          fd.append('description', formData.description);\n          fd.append('image', file);\n          const response = await fetch('/api/cities', {\n            method: 'POST',\n            body: fd,\n          });\n          if (!response.ok) throw new Error('Failed to create city');\n        } else {\n          const response = await fetch('/api/cities', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData),\n          });\n          if (!response.ok) throw new Error('Failed to create city');\n        }\n      }\n\n      resetForm();\n      loadCities();\n    } catch (error) {\n      console.error(\"Error saving city:\", error);\n      alert(\"Failed to save city\");\n    }\n  };\n\n  const handleEdit = (city: City) => {\n    setEditingCity(city);\n    setFormData({\n      name: city.name,\n      description: city.description,\n      imageUrl: city.imageUrl,\n    });\n    setFile(null);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm(\"Are you sure you want to delete this city?\")) return;\n\n    try {\n      const response = await fetch(`/api/cities/${id}`, { method: 'DELETE' });\n      if (!response.ok) throw new Error('Failed to delete city');\n      loadCities();\n    } catch (error) {\n      console.error(\"Error deleting city:\", error);\n      alert(\"Failed to delete city\");\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({ name: \"\", description: \"\", imageUrl: \"\" });\n    setFile(null);\n    setEditingCity(null);\n    setShowForm(false);\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-6 flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Manage Cities</h1>\n        <Button onClick={() => setShowForm(true)} className=\"gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          Add City\n        </Button>\n      </div>\n\n      {showForm && (\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>{editingCity ? \"Edit City\" : \"Add New City\"}</CardTitle>\n              <Button variant=\"ghost\" size=\"icon\" onClick={resetForm}>\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <label className=\"mb-2 block text-sm font-medium\">City Name</label>\n                <Input\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  placeholder=\"e.g., Jakarta\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"mb-2 block text-sm font-medium\">Description</label>\n                <Textarea\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  placeholder=\"City description\"\n                  rows={3}\n                />\n              </div>\n\n              <div>\n                <label className=\"mb-2 block text-sm font-medium\">Image URL (optional)</label>\n                <Input\n                  value={formData.imageUrl}\n                  onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                  placeholder=\"https://images.pexels.com/...\"\n                />\n                <div className=\"mt-3\">\n                  <label className=\"mb-2 block text-sm font-medium\">Or Upload Image</label>\n                  <Input type=\"file\" accept=\"image/*\" onChange={(e) => setFile(e.target.files?.[0] || null)} />\n                  {file && (\n                    <p className=\"mt-1 text-xs text-gray-500\">Selected: {file.name}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\">\n                  {editingCity ? \"Update City\" : \"Add City\"}\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {cities.map((city) => (\n          <Card key={city.id}>\n            <CardContent className=\"p-4\">\n              {city.imageUrl && (\n                <div className=\"relative mb-4 h-48 w-full overflow-hidden rounded-lg\">\n                  <Image\n                    src={city.imageUrl}\n                    alt={city.name}\n                    fill\n                    className=\"object-cover\"\n                  />\n                </div>\n              )}\n              <h3 className=\"mb-2 text-xl font-bold\">{city.name}</h3>\n              <p className=\"mb-4 text-sm text-gray-600\">{city.description}</p>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => handleEdit(city)}\n                  className=\"gap-2\"\n                >\n                  <Edit className=\"h-4 w-4\" />\n                  Edit\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"destructive\"\n                  onClick={() => handleDelete(city.id)}\n                  className=\"gap-2\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                  Delete\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {cities.length === 0 && (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-gray-600\">No cities found. Add your first city to get started.</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":8300},"src/components/ui/button-group.tsx":{"content":"import { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Separator } from \"@/components/ui/separator\"\n\nconst buttonGroupVariants = cva(\n  \"flex w-fit items-stretch [&>*]:focus-visible:z-10 [&>*]:focus-visible:relative [&>[data-slot=select-trigger]:not([class*='w-'])]:w-fit [&>input]:flex-1 has-[select[aria-hidden=true]:last-child]:[&>[data-slot=select-trigger]:last-of-type]:rounded-r-md has-[>[data-slot=button-group]]:gap-2\",\n  {\n    variants: {\n      orientation: {\n        horizontal:\n          \"[&>*:not(:first-child)]:rounded-l-none [&>*:not(:first-child)]:border-l-0 [&>*:not(:last-child)]:rounded-r-none\",\n        vertical:\n          \"flex-col [&>*:not(:first-child)]:rounded-t-none [&>*:not(:first-child)]:border-t-0 [&>*:not(:last-child)]:rounded-b-none\",\n      },\n    },\n    defaultVariants: {\n      orientation: \"horizontal\",\n    },\n  }\n)\n\nfunction ButtonGroup({\n  className,\n  orientation,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof buttonGroupVariants>) {\n  return (\n    <div\n      role=\"group\"\n      data-slot=\"button-group\"\n      data-orientation={orientation}\n      className={cn(buttonGroupVariants({ orientation }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction ButtonGroupText({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      className={cn(\n        \"bg-muted flex items-center gap-2 rounded-md border px-4 text-sm font-medium shadow-xs [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ButtonGroupSeparator({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"button-group-separator\"\n      orientation={orientation}\n      className={cn(\n        \"bg-input relative !m-0 self-stretch data-[orientation=vertical]:h-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ButtonGroup,\n  ButtonGroupSeparator,\n  ButtonGroupText,\n  buttonGroupVariants,\n}\n","size_bytes":2209},"src/components/sections/language-toggle.tsx":{"content":"\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { useLocale } from \"next-intl\";\nimport { useTransition } from \"react\";\n\ntype LanguageToggleProps = {\n  variant?: \"default\" | \"ghost\";\n  className?: string;\n};\n\nexport default function LanguageToggle({ variant = \"ghost\", className = \"\" }: LanguageToggleProps) {\n  const locale = useLocale();\n  const [isPending, startTransition] = useTransition();\n\n  const handleToggle = () => {\n    const newLocale = locale === 'id' ? 'en' : 'id';\n\n    startTransition(() => {\n      document.cookie = `NEXT_LOCALE=${newLocale}; path=/; max-age=31536000`;\n      window.location.reload();\n    });\n  };\n\n  return (\n    <Button\n      variant={variant}\n      onClick={handleToggle}\n      disabled={isPending}\n      className={className}\n    >\n      {locale === 'id' ? 'EN' : 'ID'}\n    </Button>\n  );\n}\n","size_bytes":852},"src/components/sections/flight-search-form.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport Image from \"next/image\";\nimport { useTranslations } from \"next-intl\";\nimport { useRouter } from \"next/navigation\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport CitySelector from \"@/components/flights/city-selector\";\nimport DateSelector from \"@/components/flights/date-selector\";\nimport { Repeat2 } from \"lucide-react\";\nimport { type City } from \"@/types\";\nimport { formatDateToString } from \"@/lib/format\";\n\nconst FlightSearchForm = () => {\n  const t = useTranslations('search');\n  const router = useRouter();\n  const [fromCity, setFromCity] = React.useState<City | null>(null);\n  const [toCity, setToCity] = React.useState<City | null>(null);\n  const [departDate, setDepartDate] = React.useState<Date | undefined>(undefined);\n  const [returnDate, setReturnDate] = React.useState<Date | undefined>(undefined);\n  const [tripType, setTripType] = React.useState<string>(\"one-way\");\n  return (\n    <div className=\"relative left-1/2 top-full w-[95%] sm:w-[90%] -translate-x-1/2 -translate-y-[20%] rounded-lg bg-white px-3 py-4 shadow-lg sm:px-8 md:rounded-2xl lg:-translate-y-[25%] xl:-translate-y-[30%]\">\n      <Tabs defaultValue=\"flights\" className=\"w-full\">\n        <TabsList className=\"h-auto items-center justify-start gap-1 rounded-md bg-transparent p-0 text-muted-foreground\">\n          <TabsTrigger\n            value=\"flights\"\n            className=\"h-14 w-full gap-[6px] rounded-lg border px-4 font-bold text-gray-700 transition-all duration-300 hover:bg-gray-100 hover:text-gray-900 data-[state=active]:border-b-4 data-[state=active]:border-primary data-[state=active]:bg-white data-[state=active]:text-primary data-[state=active]:shadow-sm sm:h-16 sm:w-auto\"\n          >\n            <Image\n              src=\"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/svgs/airplane-filled.df1ad365-1.svg?\"\n              alt=\"airplane_icon\"\n              width={24}\n              height={24}\n            />\n            <span>{t('searchFlights')}</span>\n          </TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"flights\" className=\"mt-2\">\n          <form>\n            <div className=\"my-5 grid grid-cols-1 gap-4 md:grid-cols-2 xl:grid-cols-4\">\n              <div className=\"relative col-span-full flex h-auto flex-col gap-2 rounded-lg border-2 border-primary md:flex-row lg:col-span-2\">\n                <span className=\"absolute -top-[10px] left-[10px] z-10 inline-block rounded-md bg-white px-1 text-sm font-medium leading-none\">\n                  {t('from')} <span className=\"text-red-600\">*</span> - {t('to')} <span className=\"text-red-600\">*</span>\n                </span>\n                <div className=\"h-auto min-h-[80px] sm:min-h-[100px] max-w-full grow rounded-none border-0 p-3 sm:p-4 max-md:mx-1 max-md:border-b-2 md:my-1 md:w-1/2 md:border-r-2 border-[#E2E8F0]\">\n                  <CitySelector\n                    label=\"From\"\n                    value={fromCity}\n                    onChange={setFromCity}\n                    placeholder=\"Select departure city\"\n                    minimal\n                    placeholderTitle=\"City\"\n                    placeholderSubtitle=\"Airport name\"\n                  />\n                </div>\n                <button\n                  type=\"button\"\n                  aria-label=\"swap airport names\"\n                  onClick={() => { const a = fromCity; setFromCity(toCity); setToCity(a); }}\n                  className=\"absolute left-1/2 top-1/2 flex h-10 w-10 -translate-x-1/2 -translate-y-1/2 items-center justify-center rounded-full bg-primary p-2 transition-all hover:border-2 hover:border-primary hover:bg-primary/90\"\n                >\n                  <Repeat2 className=\"h-5 w-5 text-primary-foreground\" />\n                </button>\n                <div className=\"h-auto min-h-[80px] sm:min-h-[100px] max-w-full grow rounded-none border-0 p-3 sm:p-4 max-md:mx-1 max-md:border-t-2 md:my-1 md:w-1/2 md:border-l-2 border-[#E2E8F0]\">\n                  <CitySelector\n                    label=\"To\"\n                    value={toCity}\n                    onChange={setToCity}\n                    placeholder=\"Select destination\"\n                    minimal\n                    placeholderTitle=\"City\"\n                    placeholderSubtitle=\"Airport name\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"relative col-span-full flex h-auto flex-col gap-2 rounded-lg border-2 border-primary md:flex-row lg:col-span-2\">\n                <span className=\"absolute -top-[10px] left-[10px] z-10 inline-block rounded-md bg-white px-1 text-sm font-medium leading-none\">\n                  {t('departure')} <span className=\"text-red-600\">*</span> - {t('return')}\n                </span>\n                <div className=\"h-auto min-h-[80px] sm:min-h-[100px] max-w-full grow rounded-none border-0 p-3 sm:p-4 max-md:mx-1 max-md:border-b-2 md:my-1 md:w-1/2 md:border-r-2 border-[#E2E8F0]\">\n                  <DateSelector\n                    label=\"Depart *\"\n                    sublabel=\"Saturday\"\n                    value={departDate}\n                    onChange={setDepartDate}\n                    minimal\n                    placeholderTitle=\"DD MMM YY\"\n                    placeholderSubtitle=\"Weekday\"\n                  />\n                </div>\n                <div className=\"h-auto min-h-[80px] sm:min-h-[100px] max-w-full grow rounded-none border-0 p-3 sm:p-4 max-md:mx-1 max-md:border-t-2 md:my-1 md:w-1/2 md:border-l-2 border-[#E2E8F0]\">\n                  <DateSelector\n                    label=\"Return *\"\n                    sublabel=\"Weekday\"\n                    value={returnDate}\n                    onChange={setReturnDate}\n                    minDate={departDate}\n                    minimal\n                    placeholderTitle=\"DD MMM YY\"\n                    placeholderSubtitle=\"Weekday\"\n                  />\n                </div>\n              </div>\n\n              {/** Travelers/Class removed as requested */}\n            </div>\n\n            <div className=\"flex flex-wrap justify-end gap-6\">\n              <Button\n                type=\"button\"\n                onClick={() => {\n                  const params = new URLSearchParams();\n                  if (fromCity) params.set('from', fromCity.id);\n                  if (toCity) params.set('to', toCity.id);\n                  if (tripType) params.set('tripType', tripType);\n                  if (departDate) {\n                    const dateStr = formatDateToString(departDate);\n                    if (dateStr) params.set('departDate', dateStr);\n                  }\n                  if (returnDate) {\n                    const dateStr = formatDateToString(returnDate);\n                    if (dateStr) params.set('returnDate', dateStr);\n                  }\n                  router.push(`/flights?${params.toString()}`);\n                }}\n                className=\"h-[48px] w-[150px] gap-1 rounded-sm bg-primary px-[16px] py-[8px] text-primary-foreground hover:bg-[#9BE0C8] active:bg-[#82CBB2]\"\n              >\n                <Image\n                  src=\"https://slelguoygbfzlpylpxfs.supabase.co/storage/v1/object/public/test-clones/7365a454-8401-4e16-a806-259d074b2966-golob-travel-agency-vercel-app/assets/svgs/paper-plane-filled-4.svg?\"\n                  alt=\"paper_plane_icon\"\n                  width={24}\n                  height={24}\n                />\n                <span>{t('searchFlights')}</span>\n              </Button>\n            </div>\n          </form>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default FlightSearchForm;","size_bytes":7791},"src/app/api/destinations/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const destination = await prisma.popularDestination.findUnique({\n      where: { id },\n    });\n\n    if (!destination) {\n      return NextResponse.json(\n        { error: 'Destination not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(destination);\n  } catch (error) {\n    console.error('Error fetching destination:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch destination' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    const updatedDestination = await prisma.popularDestination.update({\n      where: { id },\n      data: {\n        city: body.city,\n        country: body.country,\n        airportCode: body.airportCode,\n        imageUrl: body.imageUrl,\n        description: body.description,\n        isActive: body.isActive,\n        order: body.order,\n      },\n    });\n\n    return NextResponse.json(updatedDestination);\n  } catch (error) {\n    console.error('Error updating destination:', error);\n    return NextResponse.json(\n      { error: 'Failed to update destination' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    await prisma.popularDestination.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting destination:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete destination' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1960},"src/app/api/destinations/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET() {\n  try {\n    const destinations = await prisma.popularDestination.findMany({\n      orderBy: { order: 'asc' },\n    });\n\n    return NextResponse.json(destinations);\n  } catch (error) {\n    console.error('Error fetching destinations:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch destinations' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    const newDestination = await prisma.popularDestination.create({\n      data: {\n        city: body.city,\n        country: body.country,\n        airportCode: body.airportCode,\n        imageUrl: body.imageUrl,\n        description: body.description,\n        isActive: body.isActive !== undefined ? body.isActive : true,\n        order: body.order || 0,\n      },\n    });\n\n    return NextResponse.json(newDestination);\n  } catch (error) {\n    console.error('Error creating destination:', error);\n    return NextResponse.json(\n      { error: 'Failed to create destination' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1187},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"src/app/api/hero-banners/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nexport const runtime = 'nodejs';\n\nexport async function GET() {\n  try {\n    const heroBanners = await prisma.heroBanner.findMany({\n      orderBy: { order: 'asc' },\n    });\n\n    return NextResponse.json(heroBanners);\n  } catch (error) {\n    console.error('Error fetching hero banners:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch hero banners' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const contentType = request.headers.get('content-type') || '';\n    let title = '';\n    let subtitle = '';\n    let imageUrl = '';\n    let isActive = true;\n    let order = 0;\n\n    if (contentType.includes('multipart/form-data')) {\n      const form = await request.formData();\n      title = String(form.get('title') || '');\n      subtitle = String(form.get('subtitle') || '');\n      isActive = String(form.get('isActive') || 'true') === 'true';\n      order = parseInt(String(form.get('order') || '0')) || 0;\n      const file = form.get('image') as File | null;\n      if (file && file.size > 0) {\n        const arrayBuffer = await file.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        const uploadsDir = path.join(process.cwd(), 'public', 'uploads');\n        await fs.mkdir(uploadsDir, { recursive: true });\n        const safeName = file.name.replace(/[^a-zA-Z0-9_.-]/g, '_');\n        const filename = `${Date.now()}_${safeName}`;\n        const outPath = path.join(uploadsDir, filename);\n        await fs.writeFile(outPath, buffer);\n        imageUrl = `/uploads/${filename}`;\n      } else {\n        imageUrl = String(form.get('imageUrl') || '');\n      }\n    } else {\n      const body = await request.json();\n      title = body.title;\n      subtitle = body.subtitle || '';\n      imageUrl = body.imageUrl || '';\n      isActive = body.isActive !== undefined ? body.isActive : true;\n      order = body.order || 0;\n    }\n\n    const newHeroBanner = await prisma.heroBanner.create({\n      data: { title, subtitle, imageUrl, isActive, order },\n    });\n\n    return NextResponse.json(newHeroBanner);\n  } catch (error) {\n    console.error('Error creating hero banner:', error);\n    return NextResponse.json(\n      { error: 'Failed to create hero banner' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":2431},"src/app/api/reviews/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const review = await prisma.customerReview.findUnique({\n      where: { id },\n    });\n\n    if (!review) {\n      return NextResponse.json(\n        { error: 'Review not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(review);\n  } catch (error) {\n    console.error('Error fetching review:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch review' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    const updatedReview = await prisma.customerReview.update({\n      where: { id },\n      data: {\n        customerName: body.customerName,\n        rating: body.rating,\n        comment: body.comment,\n        imageUrl: body.imageUrl,\n        location: body.location,\n        isActive: body.isActive,\n      },\n    });\n\n    return NextResponse.json(updatedReview);\n  } catch (error) {\n    console.error('Error updating review:', error);\n    return NextResponse.json(\n      { error: 'Failed to update review' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    await prisma.customerReview.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting review:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete review' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1861},"src/app/api/reviews/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nexport const runtime = 'nodejs';\n\nexport async function GET() {\n  try {\n    const reviews = await prisma.customerReview.findMany({\n      orderBy: { createdAt: 'desc' },\n    });\n\n    return NextResponse.json(reviews);\n  } catch (error) {\n    console.error('Error fetching reviews:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch reviews' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const contentType = request.headers.get('content-type') || '';\n    let customerName = '';\n    let rating = 5;\n    let comment = '';\n    let imageUrl = '';\n    let location = '';\n    let isActive = true;\n\n    if (contentType.includes('multipart/form-data')) {\n      const form = await request.formData();\n      customerName = String(form.get('customerName') || '');\n      rating = parseInt(String(form.get('rating') || '5')) || 5;\n      comment = String(form.get('comment') || '');\n      location = String(form.get('location') || '');\n      isActive = String(form.get('isActive') || 'true') === 'true';\n      const file = form.get('image') as File | null;\n      if (file && file.size > 0) {\n        const arrayBuffer = await file.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        const uploadsDir = process.env.UPLOADS_DIR || path.join(process.cwd(), 'uploads');\n        await fs.mkdir(uploadsDir, { recursive: true });\n        const safeName = file.name.replace(/[^a-zA-Z0-9_.-]/g, '_');\n        const filename = `${Date.now()}_${safeName}`;\n        const outPath = path.join(uploadsDir, filename);\n        await fs.writeFile(outPath, buffer);\n        imageUrl = `/api/images/${filename}`;\n      } else {\n        imageUrl = String(form.get('imageUrl') || '');\n      }\n    } else {\n      const body = await request.json();\n      customerName = body.customerName;\n      rating = body.rating || 5;\n      comment = body.comment;\n      imageUrl = body.imageUrl || '';\n      location = body.location || '';\n      isActive = body.isActive !== undefined ? body.isActive : true;\n    }\n\n    const newReview = await prisma.customerReview.create({\n      data: { customerName, rating, comment, imageUrl, location, isActive },\n    });\n\n    return NextResponse.json(newReview);\n  } catch (error) {\n    console.error('Error creating review:', error);\n    return NextResponse.json(\n      { error: 'Failed to create review' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":2588},"src/app/api/flight-packages/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET() {\n  try {\n    const flightPackages = await prisma.flightPackage.findMany({\n      where: { isActive: true },\n      orderBy: { createdAt: 'desc' },\n    });\n\n    return NextResponse.json(flightPackages);\n  } catch (error) {\n    console.error('Error fetching flight packages:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch flight packages' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    const newFlightPackage = await prisma.flightPackage.create({\n      data: {\n        airline: body.airline,\n        flightNumber: body.flightNumber,\n        origin: body.origin,\n        destination: body.destination,\n        departureTime: body.departureTime,\n        arrivalTime: body.arrivalTime,\n        price: body.price,\n        class: body.class || 'economy',\n        availableSeats: body.availableSeats || 0,\n        duration: body.duration || '0h 0m',\n        baggage: body.baggage || '20kg',\n        isActive: body.isActive !== undefined ? body.isActive : true,\n      },\n    });\n\n    return NextResponse.json(newFlightPackage);\n  } catch (error) {\n    console.error('Error creating flight package:', error);\n    return NextResponse.json(\n      { error: 'Failed to create flight package' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1460},"src/app/api/hero-banners/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nexport const runtime = 'nodejs';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const heroBanner = await prisma.heroBanner.findUnique({\n      where: { id },\n    });\n\n    if (!heroBanner) {\n      return NextResponse.json(\n        { error: 'Hero banner not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(heroBanner);\n  } catch (error) {\n    console.error('Error fetching hero banner:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch hero banner' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const contentType = request.headers.get('content-type') || '';\n    let title = '';\n    let subtitle = '';\n    let imageUrl: string | undefined = undefined;\n    let isActive: boolean | undefined = undefined;\n    let order: number | undefined = undefined;\n\n    if (contentType.includes('multipart/form-data')) {\n      const form = await request.formData();\n      title = String(form.get('title') || '');\n      subtitle = String(form.get('subtitle') || '');\n      const isActiveRaw = form.get('isActive');\n      if (isActiveRaw !== null) isActive = String(isActiveRaw) === 'true';\n      const orderRaw = form.get('order');\n      if (orderRaw !== null) order = parseInt(String(orderRaw)) || 0;\n      const file = form.get('image') as File | null;\n      if (file && file.size > 0) {\n        const arrayBuffer = await file.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        const uploadsDir = path.join(process.cwd(), 'public', 'uploads');\n        await fs.mkdir(uploadsDir, { recursive: true });\n        const safeName = file.name.replace(/[^a-zA-Z0-9_.-]/g, '_');\n        const filename = `${Date.now()}_${safeName}`;\n        const outPath = path.join(uploadsDir, filename);\n        await fs.writeFile(outPath, buffer);\n        imageUrl = `/uploads/${filename}`;\n      } else {\n        const fromField = String(form.get('imageUrl') || '');\n        if (fromField) imageUrl = fromField;\n      }\n    } else {\n      const body = await request.json();\n      title = body.title;\n      subtitle = body.subtitle;\n      imageUrl = body.imageUrl;\n      isActive = body.isActive;\n      order = body.order;\n    }\n\n    const data: any = { title, subtitle, updatedAt: new Date() };\n    if (imageUrl !== undefined) data.imageUrl = imageUrl;\n    if (isActive !== undefined) data.isActive = isActive;\n    if (order !== undefined) data.order = order;\n\n    const updatedHeroBanner = await prisma.heroBanner.update({\n      where: { id },\n      data,\n    });\n\n    return NextResponse.json(updatedHeroBanner);\n  } catch (error) {\n    console.error('Error updating hero banner:', error);\n    return NextResponse.json(\n      { error: 'Failed to update hero banner' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    await prisma.heroBanner.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting hero banner:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete hero banner' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":3604},"src/app/api/flight-packages/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const flightPackage = await prisma.flightPackage.findUnique({\n      where: { id },\n    });\n\n    if (!flightPackage) {\n      return NextResponse.json(\n        { error: 'Flight package not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(flightPackage);\n  } catch (error) {\n    console.error('Error fetching flight package:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch flight package' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    const updatedFlightPackage = await prisma.flightPackage.update({\n      where: { id },\n      data: {\n        airline: body.airline,\n        flightNumber: body.flightNumber,\n        origin: body.origin,\n        destination: body.destination,\n        departureTime: body.departureTime,\n        arrivalTime: body.arrivalTime,\n        price: body.price,\n        class: body.class,\n        availableSeats: body.availableSeats,\n        duration: body.duration,\n        baggage: body.baggage,\n        isActive: body.isActive,\n        updatedAt: new Date(),\n      },\n    });\n\n    return NextResponse.json(updatedFlightPackage);\n  } catch (error) {\n    console.error('Error updating flight package:', error);\n    return NextResponse.json(\n      { error: 'Failed to update flight package' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    await prisma.flightPackage.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting flight package:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete flight package' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":2198},"replit.md":{"content":"# Travel Agency Website - Replit Project\n\n## Overview\nThis is a full-stack travel agency website built with Next.js 15, Prisma ORM, and Neon PostgreSQL. The application allows users to browse travel packages, flight options, and make bookings.\n\n## Recent Changes\n\n### October 16, 2025 - SSO Integration\n- ✅ Added SSO authentication from Darulgs (https://ssoauth.darulgs.co.id)\n- ✅ Created User model in Prisma with SSO fields (ssoUserId, username, phoneNumber, lastLogin)\n- ✅ Implemented SSO callback route (`/api/auth/callback`)\n- ✅ Created SSO auth utilities (`src/lib/sso-auth.ts`)\n- ✅ Updated booking page to check login and redirect to SSO\n- ✅ Added `/api/auth/me` endpoint for session verification\n- ✅ Fixed open redirect vulnerability with URL validation\n- ✅ Fixed httpOnly cookie detection issue with non-httpOnly email flag\n\n**Security Note**: Current session management uses cookies without signing/encryption. For production:\n- Implement signed JWT tokens or server-managed sessions\n- Add session verification against database\n- Consider using established auth libraries (NextAuth.js, Lucia, etc.)\n\n### October 13, 2025 - Database Migration\n- ✅ Successfully migrated from Supabase to Replit Neon PostgreSQL\n- ✅ Configured Prisma ORM with PostgreSQL database\n- ✅ Removed incorrect Drizzle configuration (server/db.ts)\n- ✅ Pushed database schema to Neon PostgreSQL\n- ✅ Seeded database with sample data:\n  - 6 cities (Jakarta, Bandung, Yogyakarta, Bali, Surabaya, Medan)\n  - 4 flight routes with complete fare breakdown\n  - 3 bank accounts for payments\n  - 3 customer reviews\n  - 1 admin user (admin@example.com / Admin123!)\n- ✅ Fixed translation keys (added viewMore/viewLess to reviews)\n- ✅ Created popular-packages API endpoint\n- ✅ Fixed bank-accounts API (corrected field name to displayOrder)\n- ✅ All pages tested and working correctly\n- ✅ Build completed successfully (npm run build)\n\n## Project Architecture\n\n### Technology Stack\n- **Frontend**: Next.js 15 with React 19, Tailwind CSS\n- **Backend**: Next.js API Routes\n- **Database**: Neon PostgreSQL (Replit-hosted)\n- **ORM**: Prisma\n- **Authentication**: \n  - Admin: Custom auth with bcrypt\n  - Users: SSO from Darulgs (https://ssoauth.darulgs.co.id)\n\n### Database Schema\n- **cities**: Travel destination cities\n- **flight_routes**: Flight routes with fare breakdown\n- **payments**: Payment/booking records\n- **users**: Customer accounts (SSO-enabled)\n- **admins**: Admin accounts\n- **customer_reviews**: Customer testimonials\n- **site_settings**: Site configuration\n- **bank_accounts**: Payment bank accounts\n- **popular_flight_routes**: Featured flight routes\n\n### Key Files\n- `prisma/schema.prisma`: Database schema definition\n- `src/lib/prisma.ts`: Prisma client singleton\n- `src/app/api/*`: API route handlers\n- `package.json`: Dependencies and scripts\n\n### Environment Variables\n- `DATABASE_URL`: PostgreSQL connection string (configured)\n- Admin credentials: admin@example.com / Admin123!\n\n## Development Commands\n\n```bash\n# Start development server\nnpm run dev\n\n# Generate Prisma client\nnpm run prisma:generate\n\n# Push schema to database\nnpm run prisma:push\n\n# Seed database\nnpm run db:seed\n\n# Open Prisma Studio\nnpm run prisma:studio\n```\n\n## User Preferences\n- Project uses Indonesian language for content\n- Already fully migrated from Supabase\n- Uses Prisma ORM (not Drizzle)\n\n## Testing Summary (October 13, 2025)\n- ✅ All pages load correctly (Home, Flights, Admin Login)\n- ✅ All API endpoints working:\n  - /api/settings ✓\n  - /api/cities ✓\n  - /api/flight-routes ✓\n  - /api/reviews ✓\n  - /api/bank-accounts ✓\n  - /api/popular-packages ✓\n- ✅ Translation system working (Indonesian & English)\n- ✅ Production build successful\n- ✅ No critical errors or bugs\n\n## SSO Integration Details\n\n### How SSO Works\n1. User clicks \"Pay Now\" on booking page (`/flights/:id/book`)\n2. If not logged in, redirects to Darulgs SSO: `https://ssoauth.darulgs.co.id/login?redirectUrl=...`\n3. After successful login, SSO redirects back to `/auth/callback?code=...`\n4. Callback validates code, creates/updates user in database\n5. Sets session cookies and redirects user back to booking page\n6. User can now complete payment\n\n### SSO Files\n- `src/lib/sso-auth.ts`: Client-side auth utilities\n- `src/app/api/auth/callback/route.ts`: SSO callback handler\n- `src/app/api/auth/me/route.ts`: Session verification endpoint\n- User model in `prisma/schema.prisma`: Includes SSO fields\n\n### Security Considerations\n- Open redirect protection: URLs are validated\n- HttpOnly cookies for session data\n- Non-httpOnly email flag for client-side login detection\n- ⚠️ **TODO**: Implement signed tokens or server-managed sessions for production\n\n## Next Steps\n- Application is ready for development and deployment\n- Admin dashboard available at /admin/login\n- SSO login integrated for user authentication\n- Sample data is loaded and ready to use\n- Consider adding:\n  - Signed/encrypted session tokens (JWT or similar)\n  - Automated API tests for regression prevention\n  - Request validation for mutation endpoints\n  - Rate limiting for API endpoints\n","size_bytes":5147},"src/app/api/settings/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET() {\n  try {\n    let settings = await prisma.siteSettings.findFirst();\n    \n    if (!settings) {\n      settings = await prisma.siteSettings.create({\n        data: {\n          logoUrl: '/logo.png',\n          siteName: 'Travel Indonesia',\n          metaTitle: 'Travel Indonesia - Jelajahi Dunia Bersama Kami',\n          metaDescription: 'Temukan penawaran terbaik untuk penerbangan, hotel, dan paket liburan',\n          heroTitle: 'JELAJAHI DUNIA BERSAMA KAMI',\n          heroSubtitle: 'Temukan penawaran terbaik untuk penerbangan, hotel, dan paket liburan',\n          heroImageUrl: 'https://images.unsplash.com/photo-1476514525535-07fb3b4ae5f1',\n          flightHeroTitle: 'Make your travel wishlist, we\\'ll do the rest',\n          flightHeroSubtitle: 'Special offers to suit your plan',\n          flightHeroImageUrl: 'https://images.unsplash.com/photo-1542296332-2e4473faf563',\n        },\n      });\n    }\n\n    return NextResponse.json(settings);\n  } catch (error) {\n    console.error('Error fetching settings:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch settings' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    \n    const settings = await prisma.siteSettings.findFirst();\n    \n    if (!settings) {\n      const newSettings = await prisma.siteSettings.create({\n        data: body,\n      });\n      return NextResponse.json(newSettings);\n    }\n\n    const updatedSettings = await prisma.siteSettings.update({\n      where: { id: settings.id },\n      data: body,\n    });\n\n    return NextResponse.json(updatedSettings);\n  } catch (error) {\n    console.error('Error updating settings:', error);\n    return NextResponse.json(\n      { error: 'Failed to update settings' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1940},"src/app/api/bank-accounts/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET() {\n  try {\n    const bankAccounts = await prisma.bankAccount.findMany({\n      where: { isActive: true },\n      orderBy: { displayOrder: 'asc' },\n    });\n\n    return NextResponse.json(bankAccounts);\n  } catch (error) {\n    console.error('Error fetching bank accounts:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch bank accounts' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { bankName, accountNumber, accountName, displayOrder = 0 } = body;\n\n    const bankAccount = await prisma.bankAccount.create({\n      data: {\n        bankName,\n        accountNumber,\n        accountName,\n        displayOrder,\n      },\n    });\n\n    return NextResponse.json(bankAccount);\n  } catch (error) {\n    console.error('Error creating bank account:', error);\n    return NextResponse.json(\n      { error: 'Failed to create bank account' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1103},"src/app/api/popular-packages/route.ts":{"content":"import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET() {\n  try {\n    const flightRoutes = await prisma.flightRoute.findMany({\n      take: 4,\n      include: {\n        departureCity: true,\n        arrivalCity: true,\n      },\n      orderBy: {\n        totalPrice: 'asc',\n      },\n    });\n\n    const popularPackages = flightRoutes.map((route, index) => ({\n      id: route.id,\n      packageId: route.id,\n      order: index + 1,\n      package: {\n        id: route.id,\n        cityId: route.arrivalCityId,\n        name: `${route.departureCity.name} - ${route.arrivalCity.name}`,\n        description: route.description,\n        price: Number(route.totalPrice),\n        durationDays: route.returnDate \n          ? Math.ceil((new Date(route.returnDate).getTime() - new Date(route.departureDate).getTime()) / (1000 * 60 * 60 * 24))\n          : 1,\n        imageUrl: route.imageUrl || route.arrivalCity.imageUrl,\n        features: [route.airline, route.flightClass, route.baggageInfo],\n        createdAt: route.createdAt,\n        city: {\n          id: route.arrivalCity.id,\n          name: route.arrivalCity.name,\n          description: route.arrivalCity.description,\n          imageUrl: route.arrivalCity.imageUrl,\n          createdAt: route.arrivalCity.createdAt,\n        },\n      },\n    }));\n\n    return NextResponse.json(popularPackages);\n  } catch (error) {\n    console.error('Error fetching popular packages:', error);\n    return NextResponse.json({ error: 'Failed to fetch popular packages' }, { status: 500 });\n  }\n}\n","size_bytes":1568},"src/app/api/popular-packages/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    await prisma.popularPackage.delete({\n      where: { id: params.id },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting popular package:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete popular package' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":534},"src/app/api/bank-accounts/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    const updatedBankAccount = await prisma.bankAccount.update({\n      where: { id },\n      data: body,\n    });\n\n    return NextResponse.json(updatedBankAccount);\n  } catch (error) {\n    console.error('Error updating bank account:', error);\n    return NextResponse.json(\n      { error: 'Failed to update bank account' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    await prisma.bankAccount.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting bank account:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete bank account' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1099},"src/lib/format.ts":{"content":"export function formatRupiah(amount: number | string): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n\n  return new Intl.NumberFormat('id-ID', {\n    style: 'currency',\n    currency: 'IDR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(numAmount);\n}\n\nexport function parseRupiah(rupiahString: string): number {\n  const cleanString = rupiahString.replace(/[^0-9]/g, '');\n  return parseInt(cleanString) || 0;\n}\n\n/**\n * Format Date to YYYY-MM-DD string without timezone conversion\n * This ensures the date stays the same regardless of timezone\n */\nexport function formatDateToString(date: Date | undefined): string {\n  if (!date) return '';\n  \n  // Use local date values to avoid timezone shift\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  \n  return `${year}-${month}-${day}`;\n}\n","size_bytes":950},"src/components/flights/advanced-flight-filters.tsx":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\nimport { formatRupiah } from '@/lib/format';\n\ninterface FilterState {\n  priceRange: [number, number];\n  departureTimeRange: [number, number];\n  ratings: number[];\n  airlines: string[];\n}\n\ninterface AdvancedFlightFiltersProps {\n  filters: FilterState;\n  onFiltersChange: (filters: FilterState) => void;\n  availableAirlines: string[];\n  minPrice: number;\n  maxPrice: number;\n}\n\nexport function AdvancedFlightFilters({\n  filters,\n  onFiltersChange,\n  availableAirlines,\n  minPrice,\n  maxPrice,\n}: AdvancedFlightFiltersProps) {\n  const t = useTranslations('flights');\n  const [expandedSections, setExpandedSections] = useState({\n    price: true,\n    departureTime: true,\n    rating: true,\n    airlines: true,\n  });\n\n  const toggleSection = (section: keyof typeof expandedSections) => {\n    setExpandedSections((prev) => ({\n      ...prev,\n      [section]: !prev[section],\n    }));\n  };\n\n  const handlePriceChange = (value: number[]) => {\n    onFiltersChange({\n      ...filters,\n      priceRange: [value[0], value[1]],\n    });\n  };\n\n  const handleDepartureTimeChange = (value: number[]) => {\n    onFiltersChange({\n      ...filters,\n      departureTimeRange: [value[0], value[1]],\n    });\n  };\n\n  const handleRatingToggle = (rating: number) => {\n    const newRatings = filters.ratings.includes(rating)\n      ? filters.ratings.filter((r) => r !== rating)\n      : [...filters.ratings, rating];\n    onFiltersChange({\n      ...filters,\n      ratings: newRatings,\n    });\n  };\n\n  const handleAirlineToggle = (airline: string) => {\n    const newAirlines = filters.airlines.includes(airline)\n      ? filters.airlines.filter((a) => a !== airline)\n      : [...filters.airlines, airline];\n    onFiltersChange({\n      ...filters,\n      airlines: newAirlines,\n    });\n  };\n\n  const formatTime = (hours: number) => {\n    const h = Math.floor(hours);\n    const m = Math.round((hours - h) * 60);\n    return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card className=\"overflow-hidden\">\n        <button\n          onClick={() => toggleSection('price')}\n          className=\"w-full px-6 py-4 flex items-center justify-between bg-primary/10 hover:bg-primary/20 transition-colors\"\n        >\n          <span className=\"font-semibold text-foreground\">{t('priceRange')}</span>\n          {expandedSections.price ? (\n            <ChevronUp className=\"w-5 h-5\" />\n          ) : (\n            <ChevronDown className=\"w-5 h-5\" />\n          )}\n        </button>\n        {expandedSections.price && (\n          <div className=\"p-6 space-y-4\">\n            <div className=\"space-y-2\">\n              <Slider\n                min={100000}\n                max={100000000}\n                step={100000}\n                value={filters.priceRange}\n                onValueChange={handlePriceChange}\n                className=\"w-full\"\n              />\n              <div className=\"flex justify-between text-sm text-muted-foreground\">\n                <span>{formatRupiah(filters.priceRange[0])}</span>\n                <span>{formatRupiah(filters.priceRange[1])}</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      <Card className=\"overflow-hidden\">\n        <button\n          onClick={() => toggleSection('departureTime')}\n          className=\"w-full px-6 py-4 flex items-center justify-between bg-primary/10 hover:bg-primary/20 transition-colors\"\n        >\n          <span className=\"font-semibold text-foreground\">{t('departureTime')}</span>\n          {expandedSections.departureTime ? (\n            <ChevronUp className=\"w-5 h-5\" />\n          ) : (\n            <ChevronDown className=\"w-5 h-5\" />\n          )}\n        </button>\n        {expandedSections.departureTime && (\n          <div className=\"p-6 space-y-4\">\n            <div className=\"space-y-2\">\n              <Slider\n                min={0}\n                max={23.99}\n                step={0.25}\n                value={filters.departureTimeRange}\n                onValueChange={handleDepartureTimeChange}\n                className=\"w-full\"\n              />\n              <div className=\"flex justify-between text-sm text-muted-foreground\">\n                <span>{formatTime(filters.departureTimeRange[0])}</span>\n                <span>{formatTime(filters.departureTimeRange[1])}</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      <Card className=\"overflow-hidden\">\n        <button\n          onClick={() => toggleSection('rating')}\n          className=\"w-full px-6 py-4 flex items-center justify-between bg-primary/10 hover:bg-primary/20 transition-colors\"\n        >\n          <span className=\"font-semibold text-foreground\">{t('rating')}</span>\n          {expandedSections.rating ? (\n            <ChevronUp className=\"w-5 h-5\" />\n          ) : (\n            <ChevronDown className=\"w-5 h-5\" />\n          )}\n        </button>\n        {expandedSections.rating && (\n          <div className=\"p-6\">\n            <div className=\"flex flex-wrap gap-3\">\n              {[1, 2, 3, 4, 5].map((rating) => (\n                <button\n                  key={rating}\n                  onClick={() => handleRatingToggle(rating)}\n                  className={`px-6 py-3 text-sm font-medium rounded-lg border-2 transition-all ${\n                    filters.ratings.includes(rating)\n                      ? 'bg-primary border-primary text-primary-foreground'\n                      : 'bg-background border-border hover:border-primary hover:bg-muted'\n                  }`}\n                >\n                  {rating}+\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n      </Card>\n\n      <Card className=\"overflow-hidden\">\n        <button\n          onClick={() => toggleSection('airlines')}\n          className=\"w-full px-6 py-4 flex items-center justify-between bg-primary/10 hover:bg-primary/20 transition-colors\"\n        >\n          <span className=\"font-semibold text-foreground\">{t('airlines')}</span>\n          {expandedSections.airlines ? (\n            <ChevronUp className=\"w-5 h-5\" />\n          ) : (\n            <ChevronDown className=\"w-5 h-5\" />\n          )}\n        </button>\n        {expandedSections.airlines && (\n          <div className=\"p-6 space-y-3\">\n            {availableAirlines.map((airline) => (\n              <div key={airline} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`airline-${airline}`}\n                  checked={filters.airlines.includes(airline)}\n                  onCheckedChange={() => handleAirlineToggle(airline)}\n                />\n                <label\n                  htmlFor={`airline-${airline}`}\n                  className=\"text-sm cursor-pointer\"\n                >\n                  {airline}\n                </label>\n              </div>\n            ))}\n          </div>\n        )}\n      </Card>\n\n      <Button\n        onClick={() => onFiltersChange({ ...filters })}\n        variant=\"default\"\n        className=\"w-full\"\n      >\n        {t('applyFilters')}\n      </Button>\n    </div>\n  );\n}\n","size_bytes":7446},"src/app/flights/[id]/page.tsx":{"content":"'use client';\n\nimport { useState, useEffect, use } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useTranslations } from 'next-intl';\nimport HeaderNavigation from \"@/components/sections/header-navigation\";\nimport Footer from \"@/components/sections/footer\";\nimport { AdvancedFlightFilters } from \"@/components/flights/advanced-flight-filters\";\nimport { FlightResultCard } from \"@/components/flights/flight-result-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { ArrowLeft, Plane, Calendar } from 'lucide-react';\nimport { formatRupiah, formatDateToString } from '@/lib/format';\nimport FlightPaymentModal from '@/components/flights/flight-payment-modal';\n\ninterface OtherFee {\n  id: string;\n  name: string;\n  amount: number;\n}\n\ninterface FlightRoute {\n  id: string;\n  departureCityId: string;\n  arrivalCityId: string;\n  departureDate: string;\n  returnDate: string | null;\n  price: number;\n  airline: string;\n  departureTime: string;\n  arrivalTime: string;\n  duration: string;\n  rating: number;\n  availableSeats: number;\n  flightClass: string;\n  imageUrl?: string;\n  otherFees?: OtherFee[];\n  departureCity: { id: string; name: string };\n  arrivalCity: { id: string; name: string };\n}\n\ninterface FilterState {\n  priceRange: [number, number];\n  departureTimeRange: [number, number];\n  ratings: number[];\n  airlines: string[];\n}\n\nexport default function FlightDetailPage({\n  params,\n}: {\n  params: Promise<{ id: string }>;\n}) {\n  const t = useTranslations('flights');\n  const router = useRouter();\n  const resolvedParams = use(params);\n  const [flightRoute, setFlightRoute] = useState<FlightRoute | null>(null);\n  const [similarFlights, setSimilarFlights] = useState<FlightRoute[]>([]);\n  const [filteredFlights, setFilteredFlights] = useState<FlightRoute[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [sortBy, setSortBy] = useState<'cheapest' | 'fastest'>('cheapest');\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [displayCount, setDisplayCount] = useState(5);\n\n  const [filters, setFilters] = useState<FilterState>({\n    priceRange: [100000, 100000000],\n    departureTimeRange: [0, 23.99],\n    ratings: [],\n    airlines: [],\n  });\n\n  useEffect(() => {\n    fetchFlightRoute();\n  }, [resolvedParams.id]);\n\n  useEffect(() => {\n    if (flightRoute) {\n      fetchSimilarFlights();\n    }\n  }, [flightRoute]);\n\n  useEffect(() => {\n    applyFilters();\n  }, [similarFlights, filters, sortBy]);\n\n  const fetchFlightRoute = async () => {\n    try {\n      const response = await fetch(`/api/flight-routes/${resolvedParams.id}`);\n      const data = await response.json();\n      setFlightRoute(data);\n    } catch (error) {\n      console.error('Error fetching flight route:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchSimilarFlights = async () => {\n    if (!flightRoute) return;\n\n    try {\n      const params = new URLSearchParams();\n      params.append('departureCityId', flightRoute.departureCityId);\n      params.append('arrivalCityId', flightRoute.arrivalCityId);\n      \n      // Include date filters to match the original search criteria\n      if (flightRoute.departureDate) {\n        const departureDate = new Date(flightRoute.departureDate);\n        const dateStr = formatDateToString(departureDate);\n        if (dateStr) params.append('departureDate', dateStr);\n      }\n      \n      if (flightRoute.returnDate) {\n        const returnDate = new Date(flightRoute.returnDate);\n        const dateStr = formatDateToString(returnDate);\n        if (dateStr) params.append('returnDate', dateStr);\n      }\n\n      const response = await fetch(`/api/flight-routes?${params.toString()}`);\n      const data = await response.json();\n      setSimilarFlights(data.filter((r: FlightRoute) => r.id !== flightRoute.id));\n\n      if (data.length > 0) {\n        const prices = data.map((r: FlightRoute) => parseFloat(r.price.toString()));\n        const minPrice = Math.min(...prices);\n        const maxPrice = Math.max(...prices);\n        setFilters((prev) => ({\n          ...prev,\n          priceRange: [minPrice, maxPrice],\n        }));\n      }\n    } catch (error) {\n      console.error('Error fetching similar flights:', error);\n    }\n  };\n\n  const applyFilters = () => {\n    let filtered = [...similarFlights];\n\n    filtered = filtered.filter((route) => {\n      const price = parseFloat(route.price.toString());\n      if (price < filters.priceRange[0] || price > filters.priceRange[1]) {\n        return false;\n      }\n\n      // Parse departure time from datetime string\n      if (route.departureTime) {\n        try {\n          const date = new Date(route.departureTime);\n          const hours = date.getHours();\n          const minutes = date.getMinutes();\n          const departureHours = hours + minutes / 60;\n          \n          if (\n            departureHours < filters.departureTimeRange[0] ||\n            departureHours > filters.departureTimeRange[1]\n          ) {\n            return false;\n          }\n        } catch (error) {\n          console.error('Error parsing departure time:', error);\n        }\n      }\n\n      if (filters.ratings.length > 0 && !filters.ratings.includes(route.rating)) {\n        return false;\n      }\n\n      if (filters.airlines.length > 0 && !filters.airlines.includes(route.airline)) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (sortBy === 'cheapest') {\n      filtered.sort((a, b) => parseFloat(a.price.toString()) - parseFloat(b.price.toString()));\n    } else {\n      filtered.sort((a, b) => {\n        const getDurationMinutes = (duration: string) => {\n          const [hours, minutes] = duration.split('h');\n          return parseInt(hours) * 60 + parseInt(minutes.replace('m', '').trim());\n        };\n        return getDurationMinutes(a.duration) - getDurationMinutes(b.duration);\n      });\n    }\n\n    setFilteredFlights(filtered);\n  };\n\n  const availableAirlines = Array.from(new Set(similarFlights.map((r) => r.airline)));\n  const minPrice = similarFlights.length > 0\n    ? Math.min(...similarFlights.map((r) => parseFloat(r.price.toString())))\n    : 0;\n  const maxPrice = similarFlights.length > 0\n    ? Math.max(...similarFlights.map((r) => parseFloat(r.price.toString())))\n    : 10000000;\n\n  const cheapestPrice = filteredFlights.length > 0\n    ? Math.min(...filteredFlights.map((r) => parseFloat(r.price.toString())))\n    : 0;\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!flightRoute) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-lg\">Flight not found</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <HeaderNavigation mode=\"hero\" />\n\n      <main className=\"py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-20\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => router.back()}\n            className=\"mb-6\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            {t('back') || 'Back'}\n          </Button>\n\n          <Card className=\"p-8 mb-8\">\n            <div className=\"flex items-start justify-between gap-8\">\n              <div className=\"flex-1 space-y-6\">\n                <div>\n                  <h1 className=\"text-3xl font-bold mb-2\">\n                    {flightRoute.departureCity.name} to {flightRoute.arrivalCity.name}\n                  </h1>\n                  <p className=\"text-gray-600\">{flightRoute.airline}</p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"flex items-start gap-3\">\n                    <Calendar className=\"w-5 h-5 text-gray-400 mt-1\" />\n                    <div>\n                      <div className=\"text-sm text-gray-600\">{t('departure')} Date</div>\n                      <div className=\"font-semibold\">\n                        {new Date(flightRoute.departureDate).toLocaleDateString('id-ID', {\n                          weekday: 'long',\n                          year: 'numeric',\n                          month: 'long',\n                          day: 'numeric',\n                        })}\n                      </div>\n                    </div>\n                  </div>\n\n                  {flightRoute.returnDate && (\n                    <div className=\"flex items-start gap-3\">\n                      <Calendar className=\"w-5 h-5 text-gray-400 mt-1\" />\n                      <div>\n                        <div className=\"text-sm text-gray-600\">{t('return')} Date</div>\n                        <div className=\"font-semibold\">\n                          {new Date(flightRoute.returnDate).toLocaleDateString('id-ID', {\n                            weekday: 'long',\n                            year: 'numeric',\n                            month: 'long',\n                            day: 'numeric',\n                          })}\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex items-start gap-3\">\n                    <Plane className=\"w-5 h-5 text-gray-400 mt-1\" />\n                    <div>\n                      <div className=\"text-sm text-gray-600\">Flight Time</div>\n                      <div className=\"font-semibold\">\n                        {flightRoute.departureTime} - {flightRoute.arrivalTime}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">Duration: {flightRoute.duration}</div>\n                    </div>\n                  </div>\n                </div>\n\n                {flightRoute.flightClass && (\n                  <div className=\"mt-4 pt-4 border-t\">\n                    <div className=\"text-sm text-gray-600 mb-1\">Tipe Penumpang</div>\n                    <div className=\"font-semibold capitalize\">\n                      {flightRoute.flightClass === 'economy' ? 'Ekonomi' : flightRoute.flightClass === 'business' ? 'Bisnis' : flightRoute.flightClass === 'first' ? 'First Class' : flightRoute.flightClass}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"text-right space-y-4\">\n                <div>\n                  <div className=\"text-sm text-gray-600\">{t('startingFrom')}</div>\n                  <div className=\"text-3xl font-bold text-primary\">\n                    {formatRupiah(parseFloat(flightRoute.price.toString()))}\n                  </div>\n                </div>\n                <Button \n                  onClick={() => setShowPaymentModal(true)}\n                  className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\"\n                >\n                  {t('payNow')}\n                </Button>\n              </div>\n            </div>\n          </Card>\n\n          <h2 className=\"text-2xl font-bold mb-6\">{t('similarFlights')}</h2>\n\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            <aside className=\"w-full lg:w-80 flex-shrink-0\">\n              <AdvancedFlightFilters\n                filters={filters}\n                onFiltersChange={setFilters}\n                availableAirlines={availableAirlines}\n                minPrice={minPrice}\n                maxPrice={maxPrice}\n              />\n            </aside>\n\n            <div className=\"flex-1\">\n              <div className=\"mb-6 flex items-center justify-between\">\n                <div className=\"text-sm text-gray-600\">\n                  {t('showing')} {filteredFlights.length} {t('of')} {similarFlights.length} {filteredFlights.length === 1 ? t('result') : t('results_plural')}\n                </div>\n              </div>\n\n              {filteredFlights.length > 0 ? (\n                <>\n                  <div className=\"space-y-4\">\n                    {filteredFlights.slice(0, displayCount).map((route) => (\n                      <FlightResultCard\n                        key={route.id}\n                        id={route.id}\n                        airline={route.airline}\n                        departureCity={route.departureCity.name}\n                        arrivalCity={route.arrivalCity.name}\n                        departureTime={route.departureTime}\n                        arrivalTime={route.arrivalTime}\n                        duration={route.duration}\n                        price={parseFloat(route.price.toString())}\n                        rating={route.rating}\n                        reviewCount={0}\n                        imageUrl={route.imageUrl}\n                        otherFees={route.otherFees}\n                        flightClass={route.flightClass}\n                        departureDate={route.departureDate}\n                      />\n                    ))}\n                  </div>\n                  {displayCount < filteredFlights.length && (\n                    <div className=\"mt-8 text-center\">\n                      <Button\n                        onClick={() => setDisplayCount(prev => prev + 5)}\n                        variant=\"outline\"\n                        size=\"lg\"\n                        className=\"min-w-[200px]\"\n                      >\n                        {t('loadMore')}\n                      </Button>\n                    </div>\n                  )}\n                </>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <p className=\"text-gray-500\">No similar flights found.</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n\n      {flightRoute && (\n        <FlightPaymentModal\n          isOpen={showPaymentModal}\n          onClose={() => setShowPaymentModal(false)}\n          flightRoute={flightRoute}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":13888},"src/app/admin/dashboard/flight-routes/page.tsx":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { toast } from 'sonner';\nimport { Plane, Plus, Edit, Trash2, Upload, X } from 'lucide-react';\nimport DynamicFeesManager, { OtherFee } from '@/components/admin/dynamic-fees-manager';\nimport Image from 'next/image';\n\ninterface City {\n  id: string;\n  name: string;\n}\n\ninterface FlightRoute {\n  id: string;\n  departureCityId: string;\n  arrivalCityId: string;\n  departureDate: string;\n  returnDate: string | null;\n  airline: string;\n  departureTime: string;\n  arrivalTime: string;\n  duration: string;\n  rating: number;\n  availableSeats: number;\n  flightClass: string;\n  imageUrl: string;\n  description: string;\n  baseFare: number;\n  tax: number;\n  serviceFee: number;\n  baggageFee: number;\n  wifiFee: number;\n  mealFee: number;\n  insuranceFee: number;\n  otherFees: OtherFee[];\n  discount: number;\n  totalPrice: number;\n  departureCity: City;\n  arrivalCity: City;\n}\n\nexport default function FlightRoutesPage() {\n  const [flightRoutes, setFlightRoutes] = useState<FlightRoute[]>([]);\n  const [cities, setCities] = useState<City[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [editingRoute, setEditingRoute] = useState<FlightRoute | null>(null);\n  const [formData, setFormData] = useState({\n    departureCityId: '',\n    arrivalCityId: '',\n    departureDate: '',\n    returnDate: '',\n    airline: '',\n    departureTime: '',\n    arrivalTime: '',\n    duration: '',\n    rating: '5',\n    availableSeats: '0',\n    flightClass: 'economy',\n    imageUrl: 'https://images.pexels.com/photos/46148/aircraft-jet-landing-cloud-46148.jpeg',\n    description: '',\n    discount: '0',\n  });\n  const [otherFees, setOtherFees] = useState<OtherFee[]>([]);\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string>('');\n  const [uploading, setUploading] = useState(false);\n\n  useEffect(() => {\n    fetchFlightRoutes();\n    fetchCities();\n  }, []);\n\n  const fetchFlightRoutes = async () => {\n    try {\n      const response = await fetch('/api/flight-routes');\n      const data = await response.json();\n      setFlightRoutes(data);\n    } catch (error) {\n      console.error('Error fetching flight routes:', error);\n      toast.error('Gagal memuat data rute penerbangan');\n    }\n  };\n\n  const fetchCities = async () => {\n    try {\n      const response = await fetch('/api/cities');\n      const data = await response.json();\n      setCities(data);\n    } catch (error) {\n      console.error('Error fetching cities:', error);\n      toast.error('Gagal memuat data kota');\n    }\n  };\n\n  const calculateTotalPrice = (fees: OtherFee[], discount: string) => {\n    const otherFeesTotal = fees.reduce((sum, fee) => sum + fee.amount, 0);\n    const discountAmount = parseFloat(discount) || 0;\n    return otherFeesTotal - discountAmount;\n  };\n\n  // Calculate duration from departure and arrival time\n  const calculateDuration = (departureTime: string, arrivalTime: string): string => {\n    if (!departureTime || !arrivalTime) return '';\n    \n    const [depHour, depMin] = departureTime.split(':').map(Number);\n    const [arrHour, arrMin] = arrivalTime.split(':').map(Number);\n    \n    let totalMinutes = (arrHour * 60 + arrMin) - (depHour * 60 + depMin);\n    \n    // Handle overnight flights (arrival time is next day)\n    if (totalMinutes < 0) {\n      totalMinutes += 24 * 60;\n    }\n    \n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    \n    return `${hours}h ${minutes}m`;\n  };\n\n  // Extract time from datetime string (format: HH:mm)\n  const extractTimeFromDateTime = (datetime: string): string => {\n    if (!datetime) return '';\n    try {\n      const date = new Date(datetime);\n      const hours = date.getHours().toString().padStart(2, '0');\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      return `${hours}:${minutes}`;\n    } catch {\n      return '';\n    }\n  };\n\n  // Format time to 12-hour format with AM/PM\n  const formatTimeToAMPM = (datetime: string): string => {\n    if (!datetime) return '';\n    try {\n      const date = new Date(datetime);\n      let hours = date.getHours();\n      const minutes = date.getMinutes();\n      const ampm = hours >= 12 ? 'PM' : 'AM';\n      \n      // Convert 24-hour to 12-hour format\n      hours = hours % 12;\n      hours = hours ? hours : 12; // 0 should be 12\n      \n      const minutesStr = minutes.toString().padStart(2, '0');\n      return `${hours}:${minutesStr} ${ampm}`;\n    } catch {\n      return '';\n    }\n  };\n\n  const handleImageSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setSelectedImage(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const uploadImage = async (): Promise<string | null> => {\n    if (!selectedImage) return null;\n\n    setUploading(true);\n    try {\n      const formData = new FormData();\n      formData.append('file', selectedImage);\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        return data.url;\n      } else {\n        toast.error('Gagal upload gambar');\n        return null;\n      }\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      toast.error('Gagal upload gambar');\n      return null;\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Validasi tanggal keberangkatan wajib diisi\n    if (!formData.departureDate) {\n      toast.error('Tanggal keberangkatan wajib diisi!');\n      return;\n    }\n\n    // Validasi tanggal pulang wajib diisi\n    if (!formData.returnDate) {\n      toast.error('Tanggal pulang wajib diisi!');\n      return;\n    }\n\n    // Validasi tanggal pulang harus setelah tanggal keberangkatan\n    const departureDate = new Date(formData.departureDate);\n    const returnDate = new Date(formData.returnDate);\n    if (returnDate <= departureDate) {\n      toast.error('Tanggal pulang harus setelah tanggal keberangkatan!');\n      return;\n    }\n\n    const totalPrice = calculateTotalPrice(otherFees, formData.discount);\n\n    try {\n      // Upload image first if selected\n      let imageUrl = formData.imageUrl;\n      if (selectedImage) {\n        const uploadedUrl = await uploadImage();\n        if (uploadedUrl) {\n          imageUrl = uploadedUrl;\n        }\n      }\n\n      const url = editingRoute\n        ? `/api/flight-routes/${editingRoute.id}`\n        : '/api/flight-routes';\n      const method = editingRoute ? 'PUT' : 'POST';\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...formData,\n          imageUrl,\n          baseFare: 0,\n          tax: 0,\n          serviceFee: 0,\n          baggageFee: 0,\n          wifiFee: 0,\n          mealFee: 0,\n          insuranceFee: 0,\n          otherFees: otherFees,\n          discount: parseFloat(formData.discount),\n          totalPrice,\n          rating: parseInt(formData.rating),\n          availableSeats: parseInt(formData.availableSeats),\n          returnDate: formData.returnDate,\n        }),\n      });\n\n      if (response.ok) {\n        toast.success(\n          editingRoute\n            ? 'Rute penerbangan berhasil diperbarui'\n            : 'Rute penerbangan berhasil ditambahkan'\n        );\n        setIsOpen(false);\n        resetForm();\n        fetchFlightRoutes();\n      } else {\n        throw new Error('Failed to save flight route');\n      }\n    } catch (error) {\n      console.error('Error saving flight route:', error);\n      toast.error('Gagal menyimpan rute penerbangan');\n    }\n  };\n\n  const handleEdit = (route: FlightRoute) => {\n    setEditingRoute(route);\n    \n    // Extract time properly from datetime strings\n    const depTime = extractTimeFromDateTime(route.departureTime);\n    const arrTime = extractTimeFromDateTime(route.arrivalTime);\n    \n    setFormData({\n      departureCityId: route.departureCityId,\n      arrivalCityId: route.arrivalCityId,\n      departureDate: route.departureDate.split('T')[0],\n      returnDate: route.returnDate ? route.returnDate.split('T')[0] : '',\n      airline: route.airline,\n      departureTime: depTime,\n      arrivalTime: arrTime,\n      duration: route.duration,\n      rating: route.rating.toString(),\n      availableSeats: route.availableSeats.toString(),\n      flightClass: route.flightClass,\n      imageUrl: route.imageUrl,\n      description: route.description,\n      discount: route.discount.toString(),\n    });\n    setOtherFees(route.otherFees || []);\n    setImagePreview(route.imageUrl);\n    setSelectedImage(null);\n    setIsOpen(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Apakah Anda yakin ingin menghapus rute penerbangan ini?')) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/flight-routes/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        toast.success('Rute penerbangan berhasil dihapus');\n        fetchFlightRoutes();\n      } else {\n        throw new Error('Failed to delete flight route');\n      }\n    } catch (error) {\n      console.error('Error deleting flight route:', error);\n      toast.error('Gagal menghapus rute penerbangan');\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      departureCityId: '',\n      arrivalCityId: '',\n      departureDate: '',\n      returnDate: '',\n      airline: '',\n      departureTime: '',\n      arrivalTime: '',\n      duration: '',\n      rating: '5',\n      availableSeats: '0',\n      flightClass: 'economy',\n      imageUrl: 'https://images.pexels.com/photos/46148/aircraft-jet-landing-cloud-46148.jpeg',\n      description: '',\n      discount: '0',\n    });\n    setOtherFees([]);\n    setEditingRoute(null);\n    setSelectedImage(null);\n    setImagePreview('');\n  };\n\n  const formatRupiah = (price: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Rute Penerbangan</h1>\n          <p className=\"text-gray-600\">Kelola rute penerbangan dengan rincian tarif lengkap</p>\n        </div>\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Tambah Rute\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingRoute ? 'Edit Rute Penerbangan' : 'Tambah Rute Penerbangan'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"font-semibold text-lg\">Informasi Penerbangan</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"departureCityId\">Kota Keberangkatan</Label>\n                    <Select\n                      value={formData.departureCityId}\n                      onValueChange={(value) =>\n                        setFormData({ ...formData, departureCityId: value })\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Pilih kota\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {cities.map((city) => (\n                          <SelectItem key={city.id} value={city.id}>\n                            {city.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"arrivalCityId\">Kota Tujuan</Label>\n                    <Select\n                      value={formData.arrivalCityId}\n                      onValueChange={(value) =>\n                        setFormData({ ...formData, arrivalCityId: value })\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Pilih kota\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {cities.map((city) => (\n                          <SelectItem key={city.id} value={city.id}>\n                            {city.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"departureDate\">\n                      Tanggal Keberangkatan <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <Input\n                      type=\"date\"\n                      id=\"departureDate\"\n                      value={formData.departureDate}\n                      onChange={(e) =>\n                        setFormData({ ...formData, departureDate: e.target.value })\n                      }\n                      required\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Wajib diisi untuk pencarian dengan tanggal\n                    </p>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"returnDate\">\n                      Tanggal Pulang <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <Input\n                      type=\"date\"\n                      id=\"returnDate\"\n                      value={formData.returnDate}\n                      onChange={(e) =>\n                        setFormData({ ...formData, returnDate: e.target.value })\n                      }\n                      min={formData.departureDate}\n                      required\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Wajib diisi dan harus setelah tanggal keberangkatan\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"airline\">Maskapai</Label>\n                  <Input\n                    type=\"text\"\n                    id=\"airline\"\n                    value={formData.airline}\n                    onChange={(e) =>\n                      setFormData({ ...formData, airline: e.target.value })\n                    }\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"departureTime\">Waktu Berangkat</Label>\n                    <Input\n                      type=\"time\"\n                      id=\"departureTime\"\n                      value={formData.departureTime}\n                      onChange={(e) => {\n                        const newDepartureTime = e.target.value;\n                        const newDuration = calculateDuration(newDepartureTime, formData.arrivalTime);\n                        setFormData({ \n                          ...formData, \n                          departureTime: newDepartureTime,\n                          duration: newDuration || formData.duration\n                        });\n                      }}\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"arrivalTime\">Waktu Tiba</Label>\n                    <Input\n                      type=\"time\"\n                      id=\"arrivalTime\"\n                      value={formData.arrivalTime}\n                      onChange={(e) => {\n                        const newArrivalTime = e.target.value;\n                        const newDuration = calculateDuration(formData.departureTime, newArrivalTime);\n                        setFormData({ \n                          ...formData, \n                          arrivalTime: newArrivalTime,\n                          duration: newDuration || formData.duration\n                        });\n                      }}\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"duration\">Durasi (Otomatis)</Label>\n                    <Input\n                      type=\"text\"\n                      id=\"duration\"\n                      placeholder=\"2h 30m\"\n                      value={formData.duration}\n                      readOnly\n                      className=\"bg-muted\"\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Dikalkulasi otomatis dari waktu berangkat dan tiba\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"flightClass\">Kelas Penerbangan</Label>\n                    <Select\n                      value={formData.flightClass}\n                      onValueChange={(value) =>\n                        setFormData({ ...formData, flightClass: value })\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"economy\">Economy</SelectItem>\n                        <SelectItem value=\"business\">Business</SelectItem>\n                        <SelectItem value=\"first\">First Class</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"rating\">Rating (1-5)</Label>\n                    <Input\n                      type=\"number\"\n                      id=\"rating\"\n                      min=\"1\"\n                      max=\"5\"\n                      value={formData.rating}\n                      onChange={(e) =>\n                        setFormData({ ...formData, rating: e.target.value })\n                      }\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"availableSeats\">Kursi Tersedia</Label>\n                    <Input\n                      type=\"number\"\n                      id=\"availableSeats\"\n                      min=\"0\"\n                      value={formData.availableSeats}\n                      onChange={(e) =>\n                        setFormData({ ...formData, availableSeats: e.target.value })\n                      }\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Deskripsi</Label>\n                  <Textarea\n                    id=\"description\"\n                    placeholder=\"Deskripsi penerbangan...\"\n                    value={formData.description}\n                    onChange={(e) =>\n                      setFormData({ ...formData, description: e.target.value })\n                    }\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Gambar Penerbangan</Label>\n                  <div className=\"border-2 border-dashed rounded-lg p-4 hover:border-primary transition-colors cursor-pointer\">\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleImageSelect}\n                      className=\"hidden\"\n                      id=\"flight-image-upload\"\n                    />\n                    <label htmlFor=\"flight-image-upload\" className=\"cursor-pointer\">\n                      {imagePreview || formData.imageUrl ? (\n                        <div className=\"space-y-2\">\n                          <div className=\"relative w-full h-48\">\n                            <Image\n                              src={imagePreview || formData.imageUrl}\n                              alt=\"Flight preview\"\n                              fill\n                              className=\"object-cover rounded-lg\"\n                            />\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.preventDefault();\n                                document.getElementById('flight-image-upload')?.click();\n                              }}\n                            >\n                              <Upload className=\"w-4 h-4 mr-2\" />\n                              Ganti Gambar\n                            </Button>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.preventDefault();\n                                setSelectedImage(null);\n                                setImagePreview('');\n                                setFormData({ ...formData, imageUrl: '' });\n                              }}\n                            >\n                              <X className=\"w-4 h-4 mr-2\" />\n                              Hapus\n                            </Button>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"flex flex-col items-center gap-2 py-8\">\n                          <Upload className=\"w-12 h-12 text-gray-400\" />\n                          <div className=\"text-center\">\n                            <p className=\"text-sm font-medium\">Klik untuk upload gambar penerbangan</p>\n                            <p className=\"text-xs text-gray-500\">PNG, JPG, WEBP hingga 5MB</p>\n                          </div>\n                        </div>\n                      )}\n                    </label>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Gambar ini akan ditampilkan di halaman detail penerbangan\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"space-y-4 border-t pt-4\">\n                <h3 className=\"font-semibold text-lg\">Rincian Tarif</h3>\n                \n                {/* Dynamic Fees Manager - Semua biaya dikelola di sini */}\n                <DynamicFeesManager\n                  fees={otherFees}\n                  onChange={setOtherFees}\n                />\n\n                {/* Discount Section */}\n                <div className=\"border-t pt-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"discount\">Diskon (Rp)</Label>\n                    <Input\n                      type=\"number\"\n                      id=\"discount\"\n                      min=\"0\"\n                      value={formData.discount}\n                      onChange={(e) =>\n                        setFormData({ ...formData, discount: e.target.value })\n                      }\n                      placeholder=\"0\"\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Diskon akan mengurangi dari total semua biaya\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-gradient-to-r from-primary/10 to-primary/20 rounded-lg border-2 border-primary/30\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center text-sm text-muted-foreground\">\n                      <span>Subtotal Biaya:</span>\n                      <span>{formatRupiah(otherFees.reduce((sum, fee) => sum + fee.amount, 0))}</span>\n                    </div>\n                    {parseFloat(formData.discount) > 0 && (\n                      <div className=\"flex justify-between items-center text-sm text-red-600\">\n                        <span>Diskon:</span>\n                        <span>- {formatRupiah(parseFloat(formData.discount))}</span>\n                      </div>\n                    )}\n                    <div className=\"border-t pt-2 flex justify-between items-center\">\n                      <span className=\"font-semibold text-lg\">Total Harga:</span>\n                      <span className=\"font-bold text-2xl text-primary\">\n                        {formatRupiah(calculateTotalPrice(otherFees, formData.discount))}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-2 border-t pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsOpen(false);\n                    resetForm();\n                  }}\n                  disabled={uploading}\n                >\n                  Batal\n                </Button>\n                <Button type=\"submit\" disabled={uploading}>\n                  {uploading ? 'Mengupload...' : editingRoute ? 'Update' : 'Tambah'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {flightRoutes.map((route) => (\n          <Card key={route.id} className=\"p-6\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex items-start space-x-4 flex-1\">\n                <div className=\"bg-primary/20 p-3 rounded-lg\">\n                  <Plane className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div className=\"space-y-2 flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <h3 className=\"text-xl font-bold\">\n                      {route.departureCity.name} → {route.arrivalCity.name}\n                    </h3>\n                    <span className=\"px-2 py-1 bg-gray-100 rounded text-sm\">\n                      {route.airline}\n                    </span>\n                    <span className=\"px-2 py-1 bg-primary/20 rounded text-sm text-primary\">\n                      {route.flightClass}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">{route.description}</p>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600\">\n                    <div>\n                      <span className=\"font-medium\">Berangkat:</span>{' '}\n                      {new Date(route.departureDate).toLocaleDateString('id-ID')}\n                    </div>\n                    {route.returnDate && (\n                      <div>\n                        <span className=\"font-medium\">Kembali:</span>{' '}\n                        {new Date(route.returnDate).toLocaleDateString('id-ID')}\n                      </div>\n                    )}\n                    <div>\n                      <span className=\"font-medium\">Waktu:</span>{' '}\n                      {formatTimeToAMPM(route.departureTime)} - {formatTimeToAMPM(route.arrivalTime)}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Durasi:</span> {route.duration}\n                    </div>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2 text-xs\">\n                    {route.otherFees && route.otherFees.length > 0 ? (\n                      route.otherFees.map((fee) => (\n                        <span key={fee.id} className=\"px-2 py-1 bg-primary/20 rounded text-primary\">\n                          {fee.name}: {formatRupiah(fee.amount)}\n                        </span>\n                      ))\n                    ) : (\n                      <span className=\"px-2 py-1 bg-gray-100 rounded text-gray-500\">\n                        Belum ada rincian biaya\n                      </span>\n                    )}\n                    {route.discount > 0 && (\n                      <span className=\"px-2 py-1 bg-red-100 rounded text-red-700\">\n                        Diskon: -{formatRupiah(route.discount)}\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-4 text-sm\">\n                    <span className=\"font-bold text-xl text-primary\">\n                      {formatRupiah(route.totalPrice)}\n                    </span>\n                    <span>Rating: {route.rating}/5</span>\n                    <span>Kursi: {route.availableSeats}</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => handleEdit(route)}\n                >\n                  <Edit className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => handleDelete(route.id)}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </Card>\n        ))}\n        {flightRoutes.length === 0 && (\n          <Card className=\"p-12 text-center\">\n            <p className=\"text-gray-500\">Belum ada rute penerbangan</p>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":30868},"src/app/api/flight-routes/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/lib/prisma';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const departureCityId = searchParams.get('departureCityId');\n    const arrivalCityId = searchParams.get('arrivalCityId');\n    const departureDate = searchParams.get('departureDate');\n    const returnDate = searchParams.get('returnDate');\n    const minPrice = searchParams.get('minPrice');\n    const maxPrice = searchParams.get('maxPrice');\n    const airline = searchParams.get('airline');\n    const minRating = searchParams.get('minRating');\n\n    const where: any = {};\n\n    if (departureCityId) {\n      where.departureCityId = departureCityId;\n    }\n\n    if (arrivalCityId) {\n      where.arrivalCityId = arrivalCityId;\n    }\n\n    // Date filtering with timezone-safe parsing\n    if (departureDate) {\n      try {\n        // Handle both ISO format and simple date format\n        let dateStr = departureDate;\n        if (dateStr.includes('T')) {\n          dateStr = dateStr.split('T')[0]; // Extract date part from ISO string\n        }\n        \n        const [year, month, day] = dateStr.split('-').map(Number);\n        if (!year || !month || !day || month < 1 || month > 12 || day < 1 || day > 31) {\n          throw new Error('Invalid date format');\n        }\n        \n        const searchDate = new Date(Date.UTC(year, month - 1, day));\n        const nextDay = new Date(Date.UTC(year, month - 1, day + 1));\n        \n        where.departureDate = {\n          gte: searchDate,\n          lt: nextDay\n        };\n      } catch (error) {\n        console.error('Error parsing departure date:', departureDate, error);\n        // Skip date filter if invalid\n      }\n    }\n\n    // For round trip, optionally filter by return date\n    if (returnDate) {\n      try {\n        let dateStr = returnDate;\n        if (dateStr.includes('T')) {\n          dateStr = dateStr.split('T')[0];\n        }\n        \n        const [year, month, day] = dateStr.split('-').map(Number);\n        if (!year || !month || !day || month < 1 || month > 12 || day < 1 || day > 31) {\n          throw new Error('Invalid date format');\n        }\n        \n        const searchReturnDate = new Date(Date.UTC(year, month - 1, day));\n        const nextDay = new Date(Date.UTC(year, month - 1, day + 1));\n        \n        where.returnDate = {\n          gte: searchReturnDate,\n          lt: nextDay\n        };\n      } catch (error) {\n        console.error('Error parsing return date:', returnDate, error);\n        // Skip date filter if invalid\n      }\n    }\n\n    if (minPrice || maxPrice) {\n      where.totalPrice = {};\n      if (minPrice) where.totalPrice.gte = parseFloat(minPrice);\n      if (maxPrice) where.totalPrice.lte = parseFloat(maxPrice);\n    }\n\n    if (airline) {\n      where.airline = airline;\n    }\n\n    if (minRating) {\n      where.rating = {\n        gte: parseInt(minRating)\n      };\n    }\n\n    const flightRoutes = await db.flightRoute.findMany({\n      where,\n      include: {\n        departureCity: true,\n        arrivalCity: true,\n      },\n      orderBy: {\n        departureDate: 'asc',\n      },\n    });\n\n    // Map totalPrice to price for frontend compatibility\n    const mappedRoutes = flightRoutes.map(route => ({\n      ...route,\n      price: route.totalPrice, // Frontend expects 'price' field\n    }));\n\n    return NextResponse.json(mappedRoutes);\n  } catch (error) {\n    console.error('Error fetching flight routes:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch flight routes' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Parse dates safely without timezone issues\n    const [depYear, depMonth, depDay] = body.departureDate.split('-').map(Number);\n    const departureDateUTC = new Date(Date.UTC(depYear, depMonth - 1, depDay));\n    \n    let returnDateUTC = null;\n    if (body.returnDate) {\n      const [retYear, retMonth, retDay] = body.returnDate.split('-').map(Number);\n      returnDateUTC = new Date(Date.UTC(retYear, retMonth - 1, retDay));\n    }\n\n    const flightRoute = await db.flightRoute.create({\n      data: {\n        departureCityId: body.departureCityId,\n        arrivalCityId: body.arrivalCityId,\n        departureDate: departureDateUTC,\n        returnDate: returnDateUTC,\n        airline: body.airline,\n        departureTime: new Date(`1970-01-01T${body.departureTime}`),\n        arrivalTime: new Date(`1970-01-01T${body.arrivalTime}`),\n        duration: body.duration,\n        rating: body.rating || 0,\n        availableSeats: body.availableSeats || 0,\n        flightClass: body.flightClass || 'economy',\n        baggageInfo: body.baggageInfo || null,\n        imageUrl: body.imageUrl || '',\n        description: body.description || '',\n        baseFare: body.baseFare || 0,\n        tax: body.tax || 0,\n        serviceFee: body.serviceFee || 0,\n        baggageFee: body.baggageFee || 0,\n        wifiFee: body.wifiFee || 0,\n        mealFee: body.mealFee || 0,\n        insuranceFee: body.insuranceFee || 0,\n        otherFees: body.otherFees || [],\n        discount: body.discount || 0,\n        totalPrice: body.totalPrice || 0,\n      },\n      include: {\n        departureCity: true,\n        arrivalCity: true,\n      },\n    });\n\n    // Map totalPrice to price for frontend compatibility\n    const mappedRoute = {\n      ...flightRoute,\n      price: flightRoute.totalPrice,\n    };\n\n    return NextResponse.json(mappedRoute, { status: 201 });\n  } catch (error) {\n    console.error('Error creating flight route:', error);\n    return NextResponse.json(\n      { error: 'Failed to create flight route' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":5756},"src/app/api/flight-routes/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/lib/prisma';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const flightRoute = await db.flightRoute.findUnique({\n      where: { id },\n      include: {\n        departureCity: true,\n        arrivalCity: true,\n      },\n    });\n\n    if (!flightRoute) {\n      return NextResponse.json(\n        { error: 'Flight route not found' },\n        { status: 404 }\n      );\n    }\n\n    // Map totalPrice to price for frontend compatibility\n    const mappedRoute = {\n      ...flightRoute,\n      price: flightRoute.totalPrice,\n    };\n\n    return NextResponse.json(mappedRoute);\n  } catch (error) {\n    console.error('Error fetching flight route:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch flight route' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    const updateData: any = {\n      updatedAt: new Date(),\n    };\n\n    // Handle city relations with connect syntax\n    if (body.departureCityId) {\n      updateData.departureCity = { connect: { id: body.departureCityId } };\n    }\n    if (body.arrivalCityId) {\n      updateData.arrivalCity = { connect: { id: body.arrivalCityId } };\n    }\n    \n    // Parse dates safely without timezone issues\n    if (body.departureDate) {\n      const [year, month, day] = body.departureDate.split('-').map(Number);\n      updateData.departureDate = new Date(Date.UTC(year, month - 1, day));\n    }\n    if (body.returnDate !== undefined) {\n      if (body.returnDate) {\n        const [year, month, day] = body.returnDate.split('-').map(Number);\n        updateData.returnDate = new Date(Date.UTC(year, month - 1, day));\n      } else {\n        updateData.returnDate = null;\n      }\n    }\n    if (body.airline) updateData.airline = body.airline;\n    if (body.departureTime) updateData.departureTime = new Date(`1970-01-01T${body.departureTime}`);\n    if (body.arrivalTime) updateData.arrivalTime = new Date(`1970-01-01T${body.arrivalTime}`);\n    if (body.duration) updateData.duration = body.duration;\n    if (body.rating !== undefined) updateData.rating = body.rating;\n    if (body.availableSeats !== undefined) updateData.availableSeats = body.availableSeats;\n    if (body.flightClass) updateData.flightClass = body.flightClass;\n    if (body.baggageInfo !== undefined) updateData.baggageInfo = body.baggageInfo;\n    if (body.imageUrl !== undefined) updateData.imageUrl = body.imageUrl;\n    if (body.description !== undefined) updateData.description = body.description;\n    if (body.baseFare !== undefined) updateData.baseFare = body.baseFare;\n    if (body.tax !== undefined) updateData.tax = body.tax;\n    if (body.serviceFee !== undefined) updateData.serviceFee = body.serviceFee;\n    if (body.baggageFee !== undefined) updateData.baggageFee = body.baggageFee;\n    if (body.wifiFee !== undefined) updateData.wifiFee = body.wifiFee;\n    if (body.mealFee !== undefined) updateData.mealFee = body.mealFee;\n    if (body.insuranceFee !== undefined) updateData.insuranceFee = body.insuranceFee;\n    if (body.otherFees !== undefined) updateData.otherFees = body.otherFees;\n    if (body.discount !== undefined) updateData.discount = body.discount;\n    if (body.totalPrice !== undefined) updateData.totalPrice = body.totalPrice;\n\n    const flightRoute = await db.flightRoute.update({\n      where: { id },\n      data: updateData,\n      include: {\n        departureCity: true,\n        arrivalCity: true,\n      },\n    });\n\n    // Map totalPrice to price for frontend compatibility\n    const mappedRoute = {\n      ...flightRoute,\n      price: flightRoute.totalPrice,\n    };\n\n    return NextResponse.json(mappedRoute);\n  } catch (error) {\n    console.error('Error updating flight route:', error);\n    return NextResponse.json(\n      { error: 'Failed to update flight route' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    await db.flightRoute.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({ message: 'Flight route deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting flight route:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete flight route' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":4588},"src/app/admin/dashboard/payment-settings/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { toast } from \"sonner\";\n\ntype BankAccount = {\n  id: string;\n  bankName: string;\n  accountNumber: string;\n  accountName: string;\n  order?: number;\n};\n\nexport default function PaymentSettingsPage() {\n  const [bankAccounts, setBankAccounts] = useState<BankAccount[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const [newAccount, setNewAccount] = useState<Omit<BankAccount, \"id\">>({\n    bankName: \"\",\n    accountNumber: \"\",\n    accountName: \"\",\n    order: 0,\n  });\n\n  const [editing, setEditing] = useState<Record<string, Partial<BankAccount>>>({});\n\n  const [whatsappNumber, setWhatsappNumber] = useState(\"\");\n  const [savingWhatsApp, setSavingWhatsApp] = useState(false);\n\n  const sortedAccounts = useMemo(\n    () => [...bankAccounts].sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n    [bankAccounts]\n  );\n\n  useEffect(() => {\n    const load = async () => {\n      try {\n        const [accRes, settingsRes] = await Promise.all([\n          fetch(\"/api/bank-accounts\"),\n          fetch(\"/api/settings\"),\n        ]);\n        const accData = await accRes.json();\n        const settings = await settingsRes.json();\n        if (Array.isArray(accData)) setBankAccounts(accData);\n        if (settings && typeof settings.whatsappNumber === \"string\") {\n          setWhatsappNumber(settings.whatsappNumber);\n        }\n      } catch (e) {\n        toast.error(\"Gagal memuat data\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    load();\n  }, []);\n\n  const handleCreate = async () => {\n    if (!newAccount.bankName || !newAccount.accountNumber || !newAccount.accountName) {\n      toast.error(\"Lengkapi semua field rekening\");\n      return;\n    }\n    try {\n      const res = await fetch(\"/api/bank-accounts\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(newAccount),\n      });\n      if (!res.ok) throw new Error();\n      const created = await res.json();\n      setBankAccounts((prev) => [...prev, created]);\n      setNewAccount({ bankName: \"\", accountNumber: \"\", accountName: \"\", order: 0 });\n      toast.success(\"Rekening ditambahkan\");\n    } catch (e) {\n      toast.error(\"Gagal menambah rekening\");\n    }\n  };\n\n  const handleUpdate = async (id: string) => {\n    const payload = editing[id];\n    if (!payload) return;\n    try {\n      const res = await fetch(`/api/bank-accounts/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n      if (!res.ok) throw new Error();\n      const updated = await res.json();\n      setBankAccounts((prev) => prev.map((x) => (x.id === id ? updated : x)));\n      setEditing((prev) => {\n        const cp = { ...prev };\n        delete cp[id];\n        return cp;\n      });\n      toast.success(\"Rekening diperbarui\");\n    } catch (e) {\n      toast.error(\"Gagal memperbarui rekening\");\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm(\"Hapus rekening ini?\")) return;\n    try {\n      const res = await fetch(`/api/bank-accounts/${id}`, { method: \"DELETE\" });\n      if (!res.ok) throw new Error();\n      setBankAccounts((prev) => prev.filter((x) => x.id !== id));\n      toast.success(\"Rekening dihapus\");\n    } catch (e) {\n      toast.error(\"Gagal menghapus rekening\");\n    }\n  };\n\n  const saveWhatsApp = async () => {\n    setSavingWhatsApp(true);\n    try {\n      const res = await fetch(\"/api/settings\", {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ whatsappNumber }),\n      });\n      if (!res.ok) throw new Error();\n      toast.success(\"Nomor WhatsApp disimpan\");\n    } catch (e) {\n      toast.error(\"Gagal menyimpan nomor WhatsApp\");\n    } finally {\n      setSavingWhatsApp(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[200px]\">Memuat...</div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Pengaturan Pembayaran</h1>\n        <p className=\"text-sm text-muted-foreground\">Kelola rekening tujuan dan nomor WhatsApp.</p>\n      </div>\n\n      <Card>\n        <CardContent className=\"pt-6 space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label>Nomor WhatsApp</Label>\n              <Input\n                placeholder=\"contoh: 628123456789\"\n                value={whatsappNumber}\n                onChange={(e) => setWhatsappNumber(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button onClick={saveWhatsApp} disabled={savingWhatsApp}>\n              {savingWhatsApp ? \"Menyimpan...\" : \"Simpan\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"pt-6 space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"space-y-2\">\n              <Label>Nama Bank</Label>\n              <Input\n                placeholder=\"BCA / Mandiri / BNI\"\n                value={newAccount.bankName}\n                onChange={(e) => setNewAccount((s) => ({ ...s, bankName: e.target.value }))}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Nomor Rekening</Label>\n              <Input\n                placeholder=\"1234567890\"\n                value={newAccount.accountNumber}\n                onChange={(e) => setNewAccount((s) => ({ ...s, accountNumber: e.target.value }))}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Nama Pemilik</Label>\n              <Input\n                placeholder=\"Travel Indonesia\"\n                value={newAccount.accountName}\n                onChange={(e) => setNewAccount((s) => ({ ...s, accountName: e.target.value }))}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Urutan</Label>\n              <Input\n                type=\"number\"\n                value={newAccount.order ?? 0}\n                onChange={(e) => setNewAccount((s) => ({ ...s, order: Number(e.target.value) }))}\n              />\n            </div>\n          </div>\n          <div>\n            <Button onClick={handleCreate}>Tambah Rekening</Button>\n          </div>\n\n          <div className=\"border-t pt-4 space-y-3\">\n            {sortedAccounts.length === 0 && (\n              <div className=\"text-sm text-muted-foreground\">Belum ada rekening.</div>\n            )}\n            {sortedAccounts.map((acc) => {\n              const edit = editing[acc.id] ?? {};\n              return (\n                <div key={acc.id} className=\"grid grid-cols-1 md:grid-cols-5 gap-3 items-end\">\n                  <div className=\"space-y-1\">\n                    <Label>Bank</Label>\n                    <Input\n                      defaultValue={acc.bankName}\n                      onChange={(e) =>\n                        setEditing((s) => ({ ...s, [acc.id]: { ...s[acc.id], bankName: e.target.value } }))\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-1\">\n                    <Label>No. Rekening</Label>\n                    <Input\n                      defaultValue={acc.accountNumber}\n                      onChange={(e) =>\n                        setEditing((s) => ({ ...s, [acc.id]: { ...s[acc.id], accountNumber: e.target.value } }))\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-1\">\n                    <Label>Atas Nama</Label>\n                    <Input\n                      defaultValue={acc.accountName}\n                      onChange={(e) =>\n                        setEditing((s) => ({ ...s, [acc.id]: { ...s[acc.id], accountName: e.target.value } }))\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-1\">\n                    <Label>Urutan</Label>\n                    <Input\n                      type=\"number\"\n                      defaultValue={acc.order ?? 0}\n                      onChange={(e) =>\n                        setEditing((s) => ({ ...s, [acc.id]: { ...s[acc.id], order: Number(e.target.value) } }))\n                      }\n                    />\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"secondary\" onClick={() => handleUpdate(acc.id)}>\n                      Simpan\n                    </Button>\n                    <Button variant=\"destructive\" onClick={() => handleDelete(acc.id)}>\n                      Hapus\n                    </Button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9161},"src/components/flights/flight-result-card.tsx":{"content":"'use client';\n\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Heart, Plane, Star } from 'lucide-react';\nimport { formatRupiah } from '@/lib/format';\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useTranslations } from 'next-intl';\nimport Image from 'next/image';\n\ninterface OtherFee {\n  id: string;\n  name: string;\n  amount: number;\n}\n\ninterface FlightResultCardProps {\n  id: string;\n  airline: string;\n  departureCity: string;\n  arrivalCity: string;\n  departureTime: string;\n  arrivalTime: string;\n  duration: string;\n  price: number;\n  originalPrice?: number;\n  rating: number;\n  reviewCount: number;\n  imageUrl?: string;\n  otherFees?: OtherFee[];\n  flightClass?: string;\n  departureDate?: string;\n}\n\nexport function FlightResultCard({\n  id,\n  airline,\n  departureCity,\n  arrivalCity,\n  departureTime,\n  arrivalTime,\n  duration,\n  price,\n  originalPrice,\n  rating,\n  reviewCount,\n  imageUrl,\n  otherFees,\n  flightClass,\n  departureDate,\n}: FlightResultCardProps) {\n  const t = useTranslations('common');\n  const router = useRouter();\n  const [isFavorite, setIsFavorite] = useState(false);\n\n  const formatTime = (value: string) => {\n    try {\n      // Handle ISO or time strings\n      if (value.includes('T') || value.endsWith('Z')) {\n        const d = new Date(value);\n        const hh = d.getHours().toString().padStart(2, '0');\n        const mm = d.getMinutes().toString().padStart(2, '0');\n        return `${hh}:${mm}`;\n      }\n      // Already HH:mm or H:mm\n      const match = value.match(/^(\\d{1,2}):(\\d{2})/);\n      if (match) {\n        const hh = match[1].padStart(2, '0');\n        const mm = match[2];\n        return `${hh}:${mm}`;\n      }\n      return value;\n    } catch {\n      return value;\n    }\n  };\n\n  const dep = formatTime(departureTime);\n  const arr = formatTime(arrivalTime);\n\n  return (\n    <Card className=\"overflow-hidden hover:shadow-lg transition-shadow px-1\">\n      <div className=\"flex flex-col md:flex-row h-full\">\n        {/* Image Section - Left */}\n        <div className=\"relative w-full md:w-48 h-48 md:h-auto shrink-0\">\n          {imageUrl ? (\n            <Image\n              src={imageUrl}\n              alt={airline}\n              fill\n              className=\"object-cover\"\n            />\n          ) : (\n            <div className=\"w-full h-full bg-muted flex items-center justify-center\">\n              <Plane className=\"w-16 h-16 text-muted-foreground\" />\n            </div>\n          )}\n        </div>\n\n        {/* Content Section - Middle */}\n        <div className=\"flex-1 p-1 md:p-6 flex flex-col justify-between\">\n          <div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-4\">\n              <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n              <span className=\"font-semibold text-foreground\">{rating?.toFixed ? rating.toFixed(1) : rating}</span>\n              <span>•</span>\n              <span>{t('reviews')}</span>\n            </div>\n\n            <div className=\"mb-4\">\n              <div className=\"text-2xl md:text-3xl font-bold text-foreground mb-2\">\n                {dep} - {arr}\n              </div>\n              <div className=\"text-base text-muted-foreground\">{airline}</div>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"text-sm text-muted-foreground\">\n              {departureCity} - {arrivalCity}\n            </div>\n            {departureDate && (\n              <div className=\"text-xs text-muted-foreground\">\n                {t('date')}: {new Date(departureDate).toLocaleDateString('id-ID', {\n                  day: 'numeric',\n                  month: 'long',\n                  year: 'numeric'\n                })}\n              </div>\n            )}\n            {flightClass && (\n              <div className=\"text-xs font-medium text-muted-foreground capitalize\">\n                {t('type')}: {flightClass}\n              </div>\n            )}\n            {otherFees && otherFees.length > 0 && (\n              <div className=\"text-xs text-muted-foreground\">\n                {t('included')}: {otherFees.map(fee => fee.name).join(', ')}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Price & Action Section - Right */}\n        <div className=\"flex flex-row md:flex-col justify-between items-center md:items-end p-5 md:p-6 md:min-w-[220px] border-t md:border-t-0 md:border-l\">\n          <button\n            onClick={() => setIsFavorite(!isFavorite)}\n            className=\"p-2 rounded-full border border-border hover:bg-muted md:mb-auto\"\n            aria-label=\"toggle favorite\"\n          >\n            <Heart\n              className={`w-5 h-5 ${isFavorite ? 'fill-destructive text-destructive' : 'text-muted-foreground'}`}\n            />\n          </button>\n          \n          <div className=\"flex flex-col items-end gap-4 md:mt-auto\">\n            <div className=\"text-right\">\n              <div className=\"text-xs text-muted-foreground mb-2\">{t('startingFrom')}</div>\n              {originalPrice && (\n                <div className=\"text-sm line-through text-muted-foreground/70 mb-1\">\n                  {formatRupiah(originalPrice)}\n                </div>\n              )}\n              <div className=\"text-2xl md:text-3xl font-bold text-primary\">\n                {formatRupiah(price)}\n              </div>\n            </div>\n            <Button \n              onClick={() => router.push(`/flights/${id}/book`)}\n              className=\"w-full md:w-auto md:min-w-[160px] bg-primary text-primary-foreground hover:bg-primary/90 px-6\"\n              size=\"lg\"\n            >\n              {t('viewDeals')}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":5807},"migrate-uploads.sh":{"content":"#!/bin/bash\n\n# Script untuk migrasi gambar lama dari public/uploads ke folder baru\n# Dan update URL di database\n\necho \"=== Migrasi Upload Images ===\"\necho \"\"\n\n# Check if old uploads folder exists\nif [ ! -d \"public/uploads\" ]; then\n    echo \"✓ Tidak ada gambar lama di public/uploads/\"\n    exit 0\nfi\n\n# Check if there are any files\nif [ -z \"$(ls -A public/uploads)\" ]; then\n    echo \"✓ Folder public/uploads kosong\"\n    exit 0\nfi\n\n# Determine target directory\nif [ -n \"$UPLOADS_DIR\" ]; then\n    TARGET_DIR=\"$UPLOADS_DIR\"\nelse\n    TARGET_DIR=\"./uploads\"\nfi\n\necho \"Source: public/uploads/\"\necho \"Target: $TARGET_DIR\"\necho \"\"\n\n# Create target directory\nmkdir -p \"$TARGET_DIR\"\n\n# Copy files\necho \"Copying files...\"\ncp -r public/uploads/* \"$TARGET_DIR/\"\n\n# Count files\nFILE_COUNT=$(ls -1 public/uploads | wc -l)\necho \"✓ Copied $FILE_COUNT files\"\necho \"\"\n\n# Set permissions (if on Linux/Unix)\nif [ \"$(uname)\" != \"Darwin\" ] && [ \"$(uname)\" != \"MINGW\"* ]; then\n    chmod -R 755 \"$TARGET_DIR\"\n    echo \"✓ Set permissions to 755\"\nfi\n\necho \"\"\necho \"=== Database Update (Manual Required) ===\"\necho \"\"\necho \"Jika URL gambar disimpan di database, jalankan query ini:\"\necho \"\"\necho \"-- PostgreSQL / MySQL:\"\necho \"UPDATE \\\"City\\\" SET \\\"imageUrl\\\" = REPLACE(\\\"imageUrl\\\", '/uploads/', '/api/images/') WHERE \\\"imageUrl\\\" LIKE '/uploads/%';\"\necho \"UPDATE \\\"CustomerReview\\\" SET \\\"imageUrl\\\" = REPLACE(\\\"imageUrl\\\", '/uploads/', '/api/images/') WHERE \\\"imageUrl\\\" LIKE '/uploads/%';\"\necho \"\"\necho \"-- Atau lewat Prisma Studio:\"\necho \"npm run prisma:studio\"\necho \"\"\necho \"✓ Migration completed!\"\n","size_bytes":1584},"DEPLOYMENT_FIX.md":{"content":"# Fix untuk Bug Upload Gambar di VPS (PM2 + Nginx)\n\n## Masalah\nGambar yang di-upload di admin dashboard tidak muncul sampai PM2 di-restart. Ini terjadi karena Next.js production mode serve static files dari folder `.next/static` yang di-build saat `npm run build`, sehingga file baru yang di-upload setelah build tidak bisa diakses.\n\n## Solusi\nFile upload sekarang disimpan di folder eksternal (di luar `public/`) dan di-serve melalui API route yang dinamis.\n\n---\n\n## Langkah Deploy di VPS\n\n### 1. Update Environment Variable\nTambahkan variable ini ke file `.env` di VPS:\n\n```bash\nUPLOADS_DIR=/var/www/uploads\n```\n\n**ATAU** jika tidak ingin set environment variable, file akan otomatis tersimpan di folder `uploads/` di root project.\n\n### 2. Buat Folder Uploads (Optional, jika pakai /var/www/uploads)\n```bash\nsudo mkdir -p /var/www/uploads\nsudo chown -R $USER:$USER /var/www/uploads\nsudo chmod -R 755 /var/www/uploads\n```\n\n### 3. Update Kode di VPS\n```bash\n# Di folder project\ngit pull origin main\n# ATAU copy file yang sudah di-update:\n# - src/app/api/upload/route.ts\n# - src/app/api/images/[filename]/route.ts\n```\n\n### 4. Rebuild dan Restart\n```bash\nnpm run build\npm2 restart all\n# ATAU\npm2 restart <app-name>\n```\n\n---\n\n## Nginx Configuration (Optional - Untuk Performance)\n\nUntuk performa lebih baik, Anda bisa serve file upload langsung dari Nginx tanpa melalui Next.js:\n\n### Edit Nginx Config\n```bash\nsudo nano /etc/nginx/sites-available/your-domain\n```\n\n### Tambahkan Location Block untuk Uploads\n```nginx\nserver {\n    listen 80;\n    server_name your-domain.com;\n\n    # Serve uploaded images directly from Nginx\n    location /api/images/ {\n        alias /var/www/uploads/;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        \n        # Remove /api/images/ prefix and serve file\n        rewrite ^/api/images/(.*)$ /$1 break;\n    }\n\n    # Proxy semua request lain ke Next.js\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Restart Nginx\n```bash\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n---\n\n## Cara Kerja Solusi Baru\n\n### Sebelum (Bermasalah):\n```\nUpload → public/uploads/image.jpg → /uploads/image.jpg\n                                     ↓\n                              Tidak bisa diakses sampai restart\n```\n\n### Sesudah (Fixed):\n```\nUpload → /var/www/uploads/image.jpg → /api/images/image.jpg\n                                       ↓\n                                  API route serve file (langsung accessible)\n```\n\n---\n\n## Testing\n\n### 1. Test Upload\n1. Login ke admin dashboard\n2. Upload gambar\n3. Cek apakah gambar langsung muncul (tanpa perlu restart PM2)\n\n### 2. Test Direct URL\nSetelah upload, test akses langsung:\n```\nhttps://your-domain.com/api/images/1234567890-filename.jpg\n```\n\nHarus langsung muncul gambarnya.\n\n---\n\n## Troubleshooting\n\n### Gambar masih tidak muncul?\n\n1. **Cek permissions folder uploads:**\n   ```bash\n   ls -la /var/www/uploads/\n   # Pastikan owner adalah user yang menjalankan PM2\n   sudo chown -R $USER:$USER /var/www/uploads\n   ```\n\n2. **Cek PM2 logs:**\n   ```bash\n   pm2 logs\n   ```\n\n3. **Cek Nginx error logs:**\n   ```bash\n   sudo tail -f /var/log/nginx/error.log\n   ```\n\n4. **Test manual dengan curl:**\n   ```bash\n   # Upload test\n   curl -F \"file=@/path/to/test-image.jpg\" http://localhost:5000/api/upload\n   \n   # Download test\n   curl -I http://localhost:5000/api/images/1234567890-test-image.jpg\n   ```\n\n### Gambar lama (sebelum fix) tidak muncul?\n\nJika ada gambar yang sudah di-upload sebelumnya di folder `public/uploads/`, pindahkan ke folder baru:\n\n```bash\n# Jika pakai /var/www/uploads\nsudo cp -r public/uploads/* /var/www/uploads/\nsudo chown -R $USER:$USER /var/www/uploads\n\n# Jika pakai ./uploads (di root project)\nmkdir -p uploads\ncp -r public/uploads/* uploads/\n```\n\nKemudian update URL di database (jika URL disimpan di DB):\n```sql\n-- Update URL dari /uploads/* ke /api/images/*\nUPDATE table_name \nSET image_column = REPLACE(image_column, '/uploads/', '/api/images/')\nWHERE image_column LIKE '/uploads/%';\n```\n\n---\n\n## Keuntungan Solusi Ini\n\n1. ✅ **Tidak perlu restart PM2** setelah upload\n2. ✅ **Lebih aman** - File upload terpisah dari Next.js bundle\n3. ✅ **Lebih cepat** - Bisa di-serve langsung dari Nginx\n4. ✅ **Scalable** - Bisa dipindah ke CDN/S3 di masa depan dengan mudah\n5. ✅ **Cache-friendly** - Headers cache yang proper\n\n---\n\n## Migrasi ke Cloud Storage (Future)\n\nJika traffic tinggi, pertimbangkan untuk migrasi ke cloud storage:\n\n- **AWS S3**\n- **Cloudflare R2** (gratis egress)\n- **Google Cloud Storage**\n- **DigitalOcean Spaces**\n\nCode sudah siap untuk di-extend ke cloud storage, tinggal update bagian:\n- `src/app/api/upload/route.ts` - Upload ke S3\n- `src/app/api/images/[filename]/route.ts` - Redirect ke S3 URL\n\n---\n\n**Note:** Setelah deploy fix ini, bug upload gambar akan selesai dan tidak perlu restart PM2 lagi! 🚀\n","size_bytes":5262},"UPLOAD_FIX_README.md":{"content":"# 📸 Upload Image Fix - Quick Guide\n\n## ✅ Masalah yang Sudah Diperbaiki\n\n**SEBELUM:**\n- ❌ Gambar tidak muncul setelah upload dari laptop\n- ❌ Harus restart PM2 di VPS agar gambar muncul\n- ❌ Error \"image not found\"\n\n**SEKARANG:**\n- ✅ Gambar langsung muncul setelah upload\n- ✅ Tidak perlu restart PM2\n- ✅ Stabil di production (PM2 + Nginx)\n\n---\n\n## 🔧 File yang Sudah Diperbaiki\n\n1. **`src/app/api/upload/route.ts`** - Upload handler (simpan ke folder eksternal)\n2. **`src/app/api/images/[filename]/route.ts`** - API untuk serve gambar (BARU)\n3. **`src/app/api/reviews/route.ts`** - Update upload path\n4. **`src/app/api/cities/route.ts`** - Update upload path\n5. **`src/app/api/cities/[id]/route.ts`** - Update upload path\n\n### Perubahan Utama:\n```diff\n- Upload ke: public/uploads/\n+ Upload ke: /var/www/uploads/ (atau ./uploads di development)\n\n- URL gambar: /uploads/image.jpg\n+ URL gambar: /api/images/image.jpg (served via API route)\n```\n\n---\n\n## 🚀 Cara Deploy di VPS\n\n### Quick Deploy (5 Menit):\n```bash\n# 1. Di VPS, buat folder uploads\nsudo mkdir -p /var/www/uploads\nsudo chown -R $USER:$USER /var/www/uploads\nsudo chmod -R 755 /var/www/uploads\n\n# 2. Set environment variable\ncd /path/to/project\necho 'UPLOADS_DIR=\"/var/www/uploads\"' >> .env\n\n# 3. Build & start\nnpm install\nnpm run build\npm2 restart all\n\n# 4. Setup Nginx (PENTING!)\nsudo nano /etc/nginx/sites-available/your-site\n```\n\n**Tambahkan di Nginx config:**\n```nginx\n# Serve images langsung dari Nginx\nlocation /api/images/ {\n    alias /var/www/uploads/;\n    expires 1y;\n    add_header Cache-Control \"public, immutable\";\n    rewrite ^/api/images/(.*)$ /$1 break;\n}\n```\n\n```bash\n# Restart Nginx\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n**✅ DONE! Upload gambar sekarang langsung muncul!**\n\n---\n\n## 📖 Panduan Lengkap\n\nBaca file ini untuk panduan detail step-by-step:\n- **`CARA_DEPLOY_VPS.md`** - Panduan deploy lengkap dengan troubleshooting\n- **`DEPLOYMENT_FIX.md`** - Technical details & Nginx configuration\n- **`UPLOAD_BUG_FIX_SUMMARY.md`** - Summary semua perubahan\n\n---\n\n## 🧪 Testing\n\n### Test di Local (Development):\n```bash\nnpm run dev\n# Upload gambar di admin -> harus langsung muncul\n```\n\n### Test di VPS (Production):\n```bash\n# 1. Upload gambar via admin dashboard\n# 2. Cek gambar muncul di website\n# 3. Restart PM2\npm2 restart all\n# 4. Refresh website -> gambar harus tetap muncul ✅\n```\n\n---\n\n## 🐛 Troubleshooting Cepat\n\n### Gambar tidak muncul?\n```bash\n# Cek permissions\nls -la /var/www/uploads/\nsudo chown -R $USER:$USER /var/www/uploads\n\n# Cek PM2 logs\npm2 logs\n```\n\n### Nginx 404 untuk gambar?\n```bash\n# Cek Nginx config sudah benar\nsudo nginx -t\n\n# Cek folder uploads\nls /var/www/uploads/\n\n# Restart Nginx\nsudo systemctl restart nginx\n```\n\n### Upload error?\n```bash\n# Cek .env\ncat .env | grep UPLOADS_DIR\n\n# Cek folder exists\nls -la /var/www/uploads/\n```\n\n---\n\n## 🎯 Cara Kerja Solusi\n\n### Flow Sebelumnya (Bermasalah):\n```\nUpload → public/uploads/ → /uploads/image.jpg\n                           ↓\n                    ❌ Not accessible (cached build)\n                    ⚠️ Need PM2 restart\n```\n\n### Flow Sekarang (Fixed):\n```\nUpload → /var/www/uploads/ → /api/images/image.jpg\n                              ↓\n                       API Route serve file\n                              ↓\n                    ✅ Immediately accessible\n                    ✅ No restart needed\n```\n\n---\n\n## 📝 Environment Variables\n\n**Development (.env):**\n```env\nUPLOADS_DIR=\"./uploads\"\n```\n\n**Production (.env di VPS):**\n```env\nUPLOADS_DIR=\"/var/www/uploads\"\n```\n\n---\n\n## ✨ Benefits\n\n1. ✅ **Instant visibility** - Gambar langsung muncul setelah upload\n2. ✅ **No restart needed** - PM2 tidak perlu di-restart\n3. ✅ **Better security** - Upload folder terpisah dari Next.js bundle\n4. ✅ **Better performance** - Nginx serve langsung dari disk\n5. ✅ **Production ready** - Tested untuk PM2 + Nginx\n\n---\n\n**🎉 Website sekarang sudah siap deploy di VPS tanpa masalah upload gambar!**\n","size_bytes":4012},"src/app/api/popular-flight-routes/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/lib/prisma';\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    const popularRoute = await db.popularFlightRoute.update({\n      where: { id },\n      data: {\n        displayOrder: body.displayOrder,\n        isActive: body.isActive,\n      },\n      include: {\n        flightRoute: {\n          include: {\n            departureCity: true,\n            arrivalCity: true,\n          },\n        },\n      },\n    });\n\n    return NextResponse.json(popularRoute);\n  } catch (error) {\n    console.error('Error updating popular flight route:', error);\n    return NextResponse.json(\n      { error: 'Failed to update popular flight route' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    await db.popularFlightRoute.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({ message: 'Popular flight route deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting popular flight route:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete popular flight route' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1398},"src/app/api/popular-flight-routes/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/lib/prisma';\n\nexport async function GET() {\n  try {\n    const popularRoutes = await db.popularFlightRoute.findMany({\n      where: {\n        isActive: true,\n      },\n      include: {\n        flightRoute: {\n          include: {\n            departureCity: true,\n            arrivalCity: true,\n          },\n        },\n      },\n      orderBy: {\n        displayOrder: 'asc',\n      },\n    });\n\n    // Map totalPrice to price for frontend compatibility\n    const mappedRoutes = popularRoutes.map(route => ({\n      ...route,\n      flightRoute: {\n        ...route.flightRoute,\n        price: route.flightRoute.totalPrice,\n      },\n    }));\n\n    return NextResponse.json(mappedRoutes);\n  } catch (error) {\n    console.error('Error fetching popular flight routes:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch popular flight routes' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    const existingPopular = await db.popularFlightRoute.findUnique({\n      where: {\n        flightRouteId: body.flightRouteId,\n      },\n    });\n\n    if (existingPopular) {\n      return NextResponse.json(\n        { error: 'This flight route is already marked as popular' },\n        { status: 400 }\n      );\n    }\n\n    const popularRoute = await db.popularFlightRoute.create({\n      data: {\n        flightRouteId: body.flightRouteId,\n        displayOrder: body.displayOrder || 0,\n        isActive: body.isActive !== undefined ? body.isActive : true,\n        imageUrl: body.imageUrl || null,\n      },\n      include: {\n        flightRoute: {\n          include: {\n            departureCity: true,\n            arrivalCity: true,\n          },\n        },\n      },\n    });\n\n    // Map totalPrice to price for frontend compatibility\n    const mappedRoute = {\n      ...popularRoute,\n      flightRoute: {\n        ...popularRoute.flightRoute,\n        price: popularRoute.flightRoute.totalPrice,\n      },\n    };\n\n    return NextResponse.json(mappedRoute, { status: 201 });\n  } catch (error) {\n    console.error('Error creating popular flight route:', error);\n    return NextResponse.json(\n      { error: 'Failed to create popular flight route' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":2332},"src/app/api/upload/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { writeFile } from 'fs/promises';\nimport { join } from 'path';\nimport { existsSync, mkdirSync } from 'fs';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n\n    if (!file) {\n      return NextResponse.json(\n        { error: 'No file uploaded' },\n        { status: 400 }\n      );\n    }\n\n    // Validate file type\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];\n    if (!validTypes.includes(file.type)) {\n      return NextResponse.json(\n        { error: 'Invalid file type. Only images are allowed' },\n        { status: 400 }\n      );\n    }\n\n    // Validate file size (max 5MB)\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    if (file.size > maxSize) {\n      return NextResponse.json(\n        { error: 'File size too large. Maximum 5MB allowed' },\n        { status: 400 }\n      );\n    }\n\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n\n    // Generate unique filename\n    const timestamp = Date.now();\n    const originalName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_');\n    const filename = `${timestamp}-${originalName}`;\n\n    // Use external uploads directory (outside Next.js public folder)\n    // This prevents issues with PM2 where files uploaded after build aren't accessible\n    const uploadsDir = process.env.UPLOADS_DIR || join(process.cwd(), 'uploads');\n    if (!existsSync(uploadsDir)) {\n      mkdirSync(uploadsDir, { recursive: true });\n    }\n\n    // Save file\n    const filepath = join(uploadsDir, filename);\n    await writeFile(filepath, buffer);\n\n    // Return API URL that serves the image\n    const url = `/api/images/${filename}`;\n\n    return NextResponse.json({\n      success: true,\n      url,\n      filename,\n    });\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    return NextResponse.json(\n      { error: 'Failed to upload file' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":2061},"src/components/admin/dynamic-fare-form.tsx":{"content":"'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Plus, Trash2 } from 'lucide-react';\n\ninterface FareItem {\n  id: string;\n  name: string;\n  amount: string;\n}\n\ninterface DynamicFareFormProps {\n  baseFare: string;\n  tax: string;\n  discount: string;\n  otherFees: FareItem[];\n  onBaseFareChange: (value: string) => void;\n  onTaxChange: (value: string) => void;\n  onDiscountChange: (value: string) => void;\n  onOtherFeesChange: (fees: FareItem[]) => void;\n}\n\nexport default function DynamicFareForm({\n  baseFare,\n  tax,\n  discount,\n  otherFees,\n  onBaseFareChange,\n  onTaxChange,\n  onDiscountChange,\n  onOtherFeesChange,\n}: DynamicFareFormProps) {\n  const addFeeItem = () => {\n    const newFee: FareItem = {\n      id: `fee-${Date.now()}`,\n      name: '',\n      amount: '0',\n    };\n    onOtherFeesChange([...otherFees, newFee]);\n  };\n\n  const removeFeeItem = (id: string) => {\n    onOtherFeesChange(otherFees.filter(fee => fee.id !== id));\n  };\n\n  const updateFeeItem = (id: string, field: 'name' | 'amount', value: string) => {\n    onOtherFeesChange(\n      otherFees.map(fee =>\n        fee.id === id ? { ...fee, [field]: value } : fee\n      )\n    );\n  };\n\n  const calculateTotal = () => {\n    const base = parseFloat(baseFare) || 0;\n    const taxAmt = parseFloat(tax) || 0;\n    const disc = parseFloat(discount) || 0;\n    const otherTotal = otherFees.reduce((sum, fee) => sum + (parseFloat(fee.amount) || 0), 0);\n    return base + taxAmt + otherTotal - disc;\n  };\n\n  const formatRupiah = (price: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"font-semibold text-lg\">Rincian Tarif</h3>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"baseFare\">Tarif Dasar (Rp)</Label>\n          <Input\n            type=\"number\"\n            id=\"baseFare\"\n            min=\"0\"\n            value={baseFare}\n            onChange={(e) => onBaseFareChange(e.target.value)}\n            required\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"tax\">Pajak (Rp)</Label>\n          <Input\n            type=\"number\"\n            id=\"tax\"\n            min=\"0\"\n            value={tax}\n            onChange={(e) => onTaxChange(e.target.value)}\n            required\n          />\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between items-center\">\n          <Label>Biaya Tambahan</Label>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={addFeeItem}\n          >\n            <Plus className=\"w-4 h-4 mr-1\" />\n            Tambah Biaya\n          </Button>\n        </div>\n\n        {otherFees.length === 0 ? (\n          <div className=\"text-center py-4 text-gray-500 border-2 border-dashed rounded-lg\">\n            Belum ada biaya tambahan. Klik \"Tambah Biaya\" untuk menambahkan.\n          </div>\n        ) : (\n          <div className=\"space-y-2 max-h-60 overflow-y-auto border rounded-lg p-3\">\n            {otherFees.map((fee) => (\n              <div key={fee.id} className=\"flex gap-2 items-end\">\n                <div className=\"flex-1 space-y-1\">\n                  <Label className=\"text-xs\">Nama Biaya</Label>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Contoh: Biaya WiFi\"\n                    value={fee.name}\n                    onChange={(e) => updateFeeItem(fee.id, 'name', e.target.value)}\n                    required\n                  />\n                </div>\n                <div className=\"w-40 space-y-1\">\n                  <Label className=\"text-xs\">Jumlah (Rp)</Label>\n                  <Input\n                    type=\"number\"\n                    min=\"0\"\n                    placeholder=\"0\"\n                    value={fee.amount}\n                    onChange={(e) => updateFeeItem(fee.id, 'amount', e.target.value)}\n                    required\n                  />\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => removeFeeItem(fee.id)}\n                  className=\"flex-shrink-0\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"discount\">Diskon (Rp)</Label>\n        <Input\n          type=\"number\"\n          id=\"discount\"\n          min=\"0\"\n          value={discount}\n          onChange={(e) => onDiscountChange(e.target.value)}\n        />\n      </div>\n\n      <div className=\"p-4 bg-gradient-to-r from-primary/10 to-primary/20 rounded-lg border-2 border-primary/30\">\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span>Tarif Dasar:</span>\n            <span>{formatRupiah(parseFloat(baseFare) || 0)}</span>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span>Pajak:</span>\n            <span>{formatRupiah(parseFloat(tax) || 0)}</span>\n          </div>\n          {otherFees.map((fee) => (\n            <div key={fee.id} className=\"flex justify-between text-sm\">\n              <span>{fee.name || 'Biaya Tambahan'}:</span>\n              <span>{formatRupiah(parseFloat(fee.amount) || 0)}</span>\n            </div>\n          ))}\n          {parseFloat(discount) > 0 && (\n            <div className=\"flex justify-between text-sm text-red-600\">\n              <span>Diskon:</span>\n              <span>-{formatRupiah(parseFloat(discount) || 0)}</span>\n            </div>\n          )}\n          <div className=\"flex justify-between items-center pt-2 border-t border-primary/30\">\n            <span className=\"font-semibold text-lg\">Total Harga:</span>\n            <span className=\"font-bold text-2xl text-primary\">\n              {formatRupiah(calculateTotal())}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6317},"src/app/flights/[id]/book/page.tsx":{"content":"'use client';\n\nimport { useState, useEffect, use } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useTranslations } from 'next-intl';\nimport HeaderNavigation from \"@/components/sections/header-navigation\";\nimport Footer from \"@/components/sections/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, Plane, Heart, Share2 } from 'lucide-react';\nimport { formatRupiah } from '@/lib/format';\nimport FlightPaymentModal from '@/components/flights/flight-payment-modal';\nimport { getCurrentUser, redirectToSSO } from '@/lib/sso-auth';\n\ninterface OtherFee {\n  id: string;\n  name: string;\n  amount: number;\n}\n\ninterface FlightRoute {\n  id: string;\n  departureCityId: string;\n  arrivalCityId: string;\n  departureDate: string;\n  returnDate: string | null;\n  price: number;\n  airline: string;\n  departureTime: string;\n  arrivalTime: string;\n  duration: string;\n  rating: number;\n  availableSeats: number;\n  flightClass: string;\n  baseFare: number;\n  tax: number;\n  serviceFee: number;\n  otherFees?: OtherFee[];\n  discount: number;\n  totalPrice: number;\n  departureCity: { id: string; name: string };\n  arrivalCity: { id: string; name: string };\n}\n\nexport default function FlightBookingPage({\n  params,\n}: {\n  params: Promise<{ id: string }>;\n}) {\n  const t = useTranslations('flights');\n  const tCommon = useTranslations('common');\n  const router = useRouter();\n  const resolvedParams = use(params);\n  const [flightRoute, setFlightRoute] = useState<FlightRoute | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    fetchFlightRoute();\n    checkLoginStatus();\n  }, [resolvedParams.id]);\n\n  const checkLoginStatus = () => {\n    const user = getCurrentUser();\n    setIsLoggedIn(!!user);\n  };\n\n  const handlePayNowClick = () => {\n    if (!isLoggedIn) {\n      const currentUrl = window.location.pathname;\n      redirectToSSO(currentUrl);\n    } else {\n      setShowPaymentModal(true);\n    }\n  };\n\n  const fetchFlightRoute = async () => {\n    try {\n      const response = await fetch(`/api/flight-routes/${resolvedParams.id}`);\n      const data = await response.json();\n      setFlightRoute(data);\n    } catch (error) {\n      console.error('Error fetching flight route:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatTime = (timeString: string) => {\n    try {\n      if (timeString.includes('T') || timeString.endsWith('Z')) {\n        const date = new Date(timeString);\n        return date.toLocaleTimeString('en-US', { \n          hour: '2-digit', \n          minute: '2-digit',\n          hour12: false \n        });\n      }\n      return timeString;\n    } catch {\n      return timeString;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  const calculateSubtotal = (fees?: OtherFee[]) => {\n    if (!fees || fees.length === 0) return 0;\n    return fees.reduce((sum, fee) => sum + Number(fee.amount), 0);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-lg\">{t('loading')}</div>\n      </div>\n    );\n  }\n\n  if (!flightRoute) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-lg\">{t('flightNotFound')}</div>\n      </div>\n    );\n  }\n\n  const subtotal = calculateSubtotal(flightRoute.otherFees);\n  const discountAmount = Number(flightRoute.discount) || 0;\n  const originalPrice = subtotal;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <HeaderNavigation mode=\"page\" />\n\n      <main className=\"container mx-auto px-4 sm:px-6 lg:px-20 py-8 mt-16\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => router.back()}\n          className=\"mb-6\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          {t('back')}\n        </Button>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Flight Details Card */}\n            <Card>\n              <CardContent className=\"pt-6\">\n                {/* Departure Date */}\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"font-semibold text-lg\">\n                    {t('departureDate')}: {formatDate(flightRoute.departureDate)}\n                  </h3>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {t('duration')}: {flightRoute.duration}\n                  </span>\n                </div>\n\n                {/* Airline Info */}\n                <div className=\"flex items-center gap-4 mb-8 p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"w-16 h-16 bg-white rounded-lg flex items-center justify-center border\">\n                    <Plane className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold text-lg\">{flightRoute.airline}</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {flightRoute.flightClass === 'economy' ? t('economyClass') : flightRoute.flightClass === 'business' ? t('businessClass') : t('firstClass')}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Flight Route */}\n                <div className=\"relative\">\n                  <div className=\"flex items-start justify-between\">\n                    {/* Departure */}\n                    <div className=\"flex-1\">\n                      <p className=\"text-2xl font-bold\">\n                        {formatTime(flightRoute.departureTime)}\n                      </p>\n                      <p className=\"text-sm mt-1\">{formatDate(flightRoute.departureDate)}</p>\n                      <p className=\"font-semibold mt-2\">{flightRoute.departureCity.name}</p>\n                    </div>\n\n                    {/* Flight Icon */}\n                    <div className=\"flex flex-col items-center px-8 py-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"h-px w-20 bg-border\"></div>\n                        <Plane className=\"w-6 h-6 rotate-90 text-primary\" />\n                        <div className=\"h-px w-20 bg-border\"></div>\n                      </div>\n                    </div>\n\n                    {/* Arrival */}\n                    <div className=\"flex-1 text-right\">\n                      <p className=\"text-2xl font-bold\">\n                        {formatTime(flightRoute.arrivalTime)}\n                      </p>\n                      <p className=\"text-sm mt-1\">{formatDate(flightRoute.departureDate)}</p>\n                      <p className=\"font-semibold mt-2\">{flightRoute.arrivalCity.name}</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Fare Details Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('fareDetails')}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-4 bg-primary/10 dark:bg-primary/20 rounded-lg\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold\">{t('passengerType')}: {t('adult')}</span>\n                  </div>\n                  <div className=\"mt-2\">\n                    <span className=\"text-sm font-semibold\">1 {t('traveler')}</span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {flightRoute.otherFees && flightRoute.otherFees.length > 0 ? (\n                    <>\n                      {flightRoute.otherFees.map((fee, index) => (\n                        <div key={fee.id}>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">{fee.name}</span>\n                            <div className=\"text-right\">\n                              <span className=\"font-medium\">{formatRupiah(Number(fee.amount))}</span>\n                            </div>\n                          </div>\n                          {index < flightRoute.otherFees!.length - 1 && <Separator className=\"my-3\" />}\n                        </div>\n                      ))}\n                    </>\n                  ) : (\n                    <div className=\"text-center py-4 text-muted-foreground\">\n                      <p className=\"text-sm\">{t('noFareDetails')}</p>\n                    </div>\n                  )}\n\n                  <Separator />\n\n                  <div className=\"flex justify-between font-semibold\">\n                    <span>{t('subtotal')}</span>\n                    <span>{formatRupiah(Number(flightRoute.totalPrice))}</span>\n                  </div>\n\n                  <Separator className=\"my-4\" />\n\n                  <div className=\"flex justify-between text-lg font-bold\">\n                    <span>{t('total')}</span>\n                    <span className=\"text-primary\">{formatRupiah(Number(flightRoute.totalPrice))}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-24\">\n              <CardContent className=\"pt-6 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">{flightRoute.flightClass.charAt(0).toUpperCase() + flightRoute.flightClass.slice(1)} Class</p>\n                    {discountAmount > 0 && (\n                      <p className=\"text-lg line-through text-muted-foreground/70\">\n                        {formatRupiah(originalPrice)}\n                      </p>\n                    )}\n                    <p className=\"text-3xl font-bold text-primary\">\n                      {formatRupiah(Number(flightRoute.totalPrice))}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"icon\"\n                      variant=\"outline\"\n                      onClick={() => setIsFavorite(!isFavorite)}\n                    >\n                      <Heart \n                        className={`w-5 h-5 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} \n                      />\n                    </Button>\n                    <Button size=\"icon\" variant=\"outline\">\n                      <Share2 className=\"w-5 h-5\" />\n                    </Button>\n                  </div>\n                </div>\n\n                <Button\n                  size=\"lg\"\n                  className=\"w-full\"\n                  onClick={handlePayNowClick}\n                >\n                  {isLoggedIn ? t('payNow') : 'Pay Now'}\n                </Button>\n\n                <div className=\"pt-4 border-t space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">{t('route')}</span>\n                    <span className=\"font-medium text-right\">\n                      {flightRoute.departureCity.name} → {flightRoute.arrivalCity.name}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">{t('duration')}</span>\n                    <span className=\"font-medium\">{flightRoute.duration}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">{t('airline')}</span>\n                    <span className=\"font-medium\">{flightRoute.airline}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">{t('class')}</span>\n                    <span className=\"font-medium\">{flightRoute.flightClass.charAt(0).toUpperCase() + flightRoute.flightClass.slice(1)}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n\n      {flightRoute && (\n        <FlightPaymentModal\n          isOpen={showPaymentModal}\n          onClose={() => setShowPaymentModal(false)}\n          flightRoute={flightRoute}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":12940},"src/app/api/images/[filename]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { readFile } from 'fs/promises';\nimport { join } from 'path';\nimport { existsSync } from 'fs';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ filename: string }> }\n) {\n  try {\n    const { filename } = await params;\n\n    // Security: Prevent directory traversal attacks\n    if (filename.includes('..') || filename.includes('/') || filename.includes('\\\\')) {\n      return NextResponse.json(\n        { error: 'Invalid filename' },\n        { status: 400 }\n      );\n    }\n\n    // Get uploads directory\n    const uploadsDir = process.env.UPLOADS_DIR || join(process.cwd(), 'uploads');\n    const filepath = join(uploadsDir, filename);\n\n    // Check if file exists\n    if (!existsSync(filepath)) {\n      return NextResponse.json(\n        { error: 'File not found' },\n        { status: 404 }\n      );\n    }\n\n    // Read file\n    const fileBuffer = await readFile(filepath);\n\n    // Determine content type based on file extension\n    const ext = filename.split('.').pop()?.toLowerCase();\n    const contentTypeMap: Record<string, string> = {\n      'jpg': 'image/jpeg',\n      'jpeg': 'image/jpeg',\n      'png': 'image/png',\n      'gif': 'image/gif',\n      'webp': 'image/webp',\n    };\n    const contentType = contentTypeMap[ext || ''] || 'application/octet-stream';\n\n    // Return image with proper headers\n    return new NextResponse(fileBuffer, {\n      headers: {\n        'Content-Type': contentType,\n        'Cache-Control': 'public, max-age=31536000, immutable',\n      },\n    });\n  } catch (error) {\n    console.error('Error serving image:', error);\n    return NextResponse.json(\n      { error: 'Failed to serve image' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1752},"src/components/flights/flight-payment-modal.tsx":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Copy, Check, CreditCard, Building2, Plane } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface FlightRoute {\n  id: string;\n  departureCityId: string;\n  arrivalCityId: string;\n  departureDate: string;\n  returnDate: string | null;\n  price: number;\n  airline: string;\n  departureTime: string;\n  arrivalTime: string;\n  duration: string;\n  rating: number;\n  availableSeats: number;\n  departureCity: { id: string; name: string };\n  arrivalCity: { id: string; name: string };\n}\n\ninterface FlightPaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  flightRoute: FlightRoute;\n}\n\nexport default function FlightPaymentModal({ isOpen, onClose, flightRoute }: FlightPaymentModalProps) {\n  const [copiedField, setCopiedField] = useState<string | null>(null);\n  const [bankAccounts, setBankAccounts] = useState<Array<{\n    id: string;\n    bankName: string;\n    accountNumber: string;\n    accountName: string;\n  }>>([]);\n  const [whatsappNumber, setWhatsappNumber] = useState<string>(\"\");\n  const [paymentCreated, setPaymentCreated] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && !paymentCreated) {\n      createPaymentRecord();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    fetch('/api/bank-accounts')\n      .then(res => res.json())\n      .then(data => {\n        if (Array.isArray(data)) {\n          setBankAccounts(data);\n        }\n      })\n      .catch(error => console.error('Error fetching bank accounts:', error));\n  }, []);\n\n  useEffect(() => {\n    fetch('/api/settings')\n      .then(res => res.json())\n      .then(data => {\n        if (data && typeof data.whatsappNumber === 'string') {\n          setWhatsappNumber(data.whatsappNumber);\n        }\n      })\n      .catch(error => console.error('Error fetching settings:', error));\n  }, []);\n\n  const createPaymentRecord = async () => {\n    try {\n      const userRes = await fetch('/api/auth/me');\n      const userData = await userRes.json();\n      \n      if (!userData.user) {\n        toast.error('Silakan login terlebih dahulu');\n        return;\n      }\n\n      const response = await fetch('/api/payments', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          flightRouteId: flightRoute.id,\n          userId: userData.user.id,\n          userEmail: userData.user.email,\n          userName: userData.user.name || userData.user.username || userData.user.email,\n          amount: flightRoute.price,\n        }),\n      });\n\n      if (response.ok) {\n        setPaymentCreated(true);\n      }\n    } catch (error) {\n      console.error('Error creating payment:', error);\n    }\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const handleCopy = (text: string, field: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedField(field);\n    toast.success('Berhasil disalin!');\n    setTimeout(() => setCopiedField(null), 2000);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl flex items-center gap-2\">\n            <CreditCard className=\"w-6 h-6\" />\n            Informasi Pembayaran\n          </DialogTitle>\n          <DialogDescription>\n            Transfer ke salah satu rekening di bawah ini dengan nominal yang sesuai\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          <Card className=\"bg-primary/5\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-sm text-muted-foreground\">Total Pembayaran</p>\n                <p className=\"text-4xl font-bold text-primary\">{formatPrice(Number(flightRoute.price))}</p>\n                <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground\">\n                  <Plane className=\"w-4 h-4\" />\n                  <span>\n                    {flightRoute.departureCity.name} → {flightRoute.arrivalCity.name} • {flightRoute.airline}\n                  </span>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {new Date(flightRoute.departureDate).toLocaleDateString('id-ID', {\n                    weekday: 'long',\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric',\n                  })}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 text-sm font-semibold\">\n              <Building2 className=\"w-4 h-4\" />\n              <span>Pilih Rekening Tujuan:</span>\n            </div>\n\n            {bankAccounts.map((account, index) => (\n              <Card key={index} className=\"border-2 hover:border-primary transition-colors\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-lg font-bold\">{account.bankName}</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {account.accountName}\n                      </span>\n                    </div>\n\n                    <div className=\"flex items-center justify-between bg-muted p-3 rounded-lg\">\n                      <span className=\"font-mono font-semibold text-lg\">\n                        {account.accountNumber}\n                      </span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() =>\n                          handleCopy(account.accountNumber, `${account.bankName}-number`)\n                        }\n                      >\n                        {copiedField === `${account.bankName}-number` ? (\n                          <Check className=\"w-4 h-4\" style={{ color: '#dcac56' }} />\n                        ) : (\n                          <Copy className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {whatsappNumber && (\n            <Card className=\"bg-primary/10 dark:bg-primary/20 border-primary/30 dark:border-primary/50\">\n              <CardContent className=\"pt-6\">\n                <p className=\"text-sm\">\n                  Setelah melakukan pembayaran, silakan hubungi kami melalui WhatsApp di nomor{' '}\n                  <a\n                    className=\"font-semibold text-primary underline\"\n                    href={`https://wa.me/${whatsappNumber.replace(/\\D/g, '')}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {whatsappNumber}\n                  </a>\n                  {' '}untuk konfirmasi pembayaran tiket penerbangan Anda.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n\n          <Card className=\"bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800\">\n            <CardContent className=\"pt-6\">\n              <div className=\"space-y-2 text-sm\">\n                <p className=\"font-semibold\">Catatan Penting:</p>\n                <ul className=\"list-disc list-inside space-y-1 text-muted-foreground\">\n                  <li>Transfer sesuai dengan nominal yang tertera</li>\n                  <li>Simpan bukti transfer untuk konfirmasi</li>\n                  <li>Pembayaran akan diverifikasi dalam 1x24 jam</li>\n                  <li>Tiket akan dikirimkan setelah pembayaran diverifikasi</li>\n                  <li>Hubungi CS kami jika ada kendala</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <DialogFooter>\n          <Button type=\"button\" onClick={onClose} className=\"w-full\">\n            Tutup\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8540},"CARA_DEPLOY_VPS.md":{"content":"# 🚀 CARA DEPLOY DI VPS (PM2 + Nginx)\n\n## ✅ Masalah yang Sudah Diperbaiki\n\n**Masalah Sebelumnya:**\n- ❌ Gambar tidak muncul setelah upload\n- ❌ Harus restart PM2 agar gambar muncul\n- ❌ Error \"image not found\" setelah upload\n\n**Solusi Sekarang:**\n- ✅ Gambar langsung muncul setelah upload\n- ✅ Tidak perlu restart PM2\n- ✅ Stabil untuk production dengan PM2 + Nginx\n\n---\n\n## 📋 LANGKAH DEPLOY DI VPS\n\n### 1️⃣ Login ke VPS\n```bash\nssh user@ip-vps-anda\n```\n\n### 2️⃣ Install Dependencies (Jika Belum)\n```bash\n# Install Node.js 18+ (jika belum)\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Install PM2\nsudo npm install -g pm2\n\n# Install Nginx\nsudo apt install nginx -y\n```\n\n### 3️⃣ Clone/Upload Project ke VPS\n```bash\n# Clone dari Git (jika pakai Git)\ncd /var/www\ngit clone https://github.com/username/repo-anda.git\ncd repo-anda\n\n# ATAU upload via FTP/SFTP ke /var/www/repo-anda\n```\n\n### 4️⃣ Setup Environment\n```bash\n# Copy .env.example ke .env\ncp .env.example .env\n\n# Edit .env\nnano .env\n```\n\n**Isi .env di VPS:**\n```env\nDATABASE_URL=\"postgresql://user:password@localhost:5432/dbname\"\n\n# PENTING: Set upload directory untuk production\nUPLOADS_DIR=\"/var/www/uploads\"\n\nMAX_FILE_SIZE=\"10485760\"\nALLOWED_FILE_TYPES=\"image/jpeg,image/png,image/jpg,application/pdf\"\n```\n\n**Simpan:** Ctrl + X, lalu Y, lalu Enter\n\n### 5️⃣ Buat Folder Uploads & Set Permissions\n```bash\n# Buat folder uploads\nsudo mkdir -p /var/www/uploads\n\n# Set owner ke user Anda (bukan root)\nsudo chown -R $USER:$USER /var/www/uploads\n\n# Set permissions\nsudo chmod -R 755 /var/www/uploads\n\n# Verify\nls -la /var/www/uploads\n```\n\n### 6️⃣ Install & Build Project\n```bash\ncd /var/www/repo-anda\n\n# Install dependencies\nnpm install\n\n# Generate Prisma Client\nnpm run prisma:generate\n\n# Build production\nnpm run build\n```\n\n### 7️⃣ Start dengan PM2\n```bash\n# Start aplikasi\npm2 start npm --name \"website-travel\" -- start\n\n# Set PM2 startup\npm2 startup\npm2 save\n\n# Cek status\npm2 status\npm2 logs website-travel\n```\n\n### 8️⃣ Setup Nginx\n\n**Buat file konfigurasi Nginx:**\n```bash\nsudo nano /etc/nginx/sites-available/website-travel\n```\n\n**Paste konfigurasi ini:**\n```nginx\nserver {\n    listen 80;\n    server_name domain-anda.com www.domain-anda.com;\n    # Ganti domain-anda.com dengan domain Anda\n    # Atau gunakan IP jika belum ada domain\n\n    # Maximum upload size\n    client_max_body_size 10M;\n\n    # Serve uploaded images directly from Nginx (FAST!)\n    location /api/images/ {\n        alias /var/www/uploads/;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        \n        # Remove /api/images/ prefix\n        rewrite ^/api/images/(.*)$ /$1 break;\n        \n        # Handle file not found\n        try_files $uri =404;\n    }\n\n    # Proxy semua request lain ke Next.js\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n**Simpan:** Ctrl + X, lalu Y, lalu Enter\n\n**Aktifkan konfigurasi:**\n```bash\n# Buat symbolic link\nsudo ln -s /etc/nginx/sites-available/website-travel /etc/nginx/sites-enabled/\n\n# Test konfigurasi\nsudo nginx -t\n\n# Jika OK, restart Nginx\nsudo systemctl restart nginx\n```\n\n### 9️⃣ Setup Firewall (Jika Belum)\n```bash\n# Allow HTTP & HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Allow SSH (pastikan sudah allow sebelum enable!)\nsudo ufw allow 22/tcp\n\n# Enable firewall\nsudo ufw enable\n```\n\n### 🔟 Setup SSL (HTTPS) dengan Let's Encrypt\n```bash\n# Install Certbot\nsudo apt install certbot python3-certbot-nginx -y\n\n# Dapatkan SSL Certificate (ganti domain-anda.com)\nsudo certbot --nginx -d domain-anda.com -d www.domain-anda.com\n\n# Follow the prompts (isi email, agree to terms)\n# Certbot akan otomatis setup SSL di Nginx\n```\n\n---\n\n## ✅ VERIFIKASI & TESTING\n\n### Test 1: Cek Website Bisa Diakses\n```bash\n# Dari VPS\ncurl -I http://localhost:5000\n\n# Dari browser\nhttp://ip-vps-anda\n# ATAU\nhttp://domain-anda.com\n```\n\n### Test 2: Upload Gambar\n1. Buka website di browser\n2. Login ke admin dashboard\n3. Upload gambar\n4. **✅ Gambar harus langsung muncul!**\n\n### Test 3: Cek PM2 Status\n```bash\npm2 status\npm2 logs website-travel --lines 50\n```\n\n### Test 4: Restart PM2 (Gambar Harus Tetap Muncul)\n```bash\npm2 restart website-travel\n# Buka admin lagi, gambar yang sudah di-upload harus tetap muncul\n```\n\n---\n\n## 🔄 UPDATE CODE DI VPS (Jika Ada Perubahan)\n\n```bash\n# 1. Pull latest code\ncd /var/www/repo-anda\ngit pull origin main\n\n# 2. Install dependencies (jika ada yang baru)\nnpm install\n\n# 3. Rebuild\nnpm run build\n\n# 4. Restart PM2\npm2 restart website-travel\n\n# 5. Cek logs\npm2 logs website-travel\n```\n\n---\n\n## 🐛 TROUBLESHOOTING\n\n### Problem 1: Gambar tidak muncul setelah upload\n```bash\n# Cek permissions folder uploads\nls -la /var/www/uploads/\nsudo chown -R $USER:$USER /var/www/uploads\nsudo chmod -R 755 /var/www/uploads\n\n# Cek apakah file ter-upload\nls /var/www/uploads/\n\n# Cek PM2 logs\npm2 logs website-travel\n```\n\n### Problem 2: PM2 tidak jalan setelah reboot VPS\n```bash\n# Setup PM2 startup\npm2 startup\n# Copy & paste command yang muncul, lalu jalankan\n\npm2 save\n```\n\n### Problem 3: Nginx error 502 Bad Gateway\n```bash\n# Cek Next.js berjalan di port 5000\npm2 status\n\n# Cek Nginx config\nsudo nginx -t\n\n# Cek Nginx logs\nsudo tail -f /var/log/nginx/error.log\n```\n\n### Problem 4: Error \"EACCES: permission denied\"\n```bash\n# Fix permissions\nsudo chown -R $USER:$USER /var/www/uploads\nsudo chown -R $USER:$USER /var/www/repo-anda\n```\n\n### Problem 5: Upload terlalu besar\n```bash\n# Edit Nginx config\nsudo nano /etc/nginx/sites-available/website-travel\n\n# Tambah/update line ini:\nclient_max_body_size 20M;  # Sesuaikan dengan kebutuhan\n\n# Restart Nginx\nsudo systemctl restart nginx\n```\n\n---\n\n## 📊 MONITORING & MAINTENANCE\n\n### Cek Status PM2\n```bash\npm2 status\npm2 monit  # Real-time monitoring\n```\n\n### Cek Logs\n```bash\n# PM2 logs\npm2 logs website-travel --lines 100\n\n# Nginx access log\nsudo tail -f /var/log/nginx/access.log\n\n# Nginx error log\nsudo tail -f /var/log/nginx/error.log\n```\n\n### Restart Services\n```bash\n# Restart PM2\npm2 restart website-travel\n\n# Restart Nginx\nsudo systemctl restart nginx\n\n# Restart semua\npm2 restart all && sudo systemctl restart nginx\n```\n\n### Backup Uploads\n```bash\n# Backup folder uploads\ncd /var/www\ntar -czf uploads-backup-$(date +%Y%m%d).tar.gz uploads/\n\n# Download ke laptop via SCP\n# Dari laptop:\nscp user@ip-vps:/var/www/uploads-backup-*.tar.gz ~/Downloads/\n```\n\n---\n\n## 🎯 CHECKLIST DEPLOY\n\n- [ ] VPS sudah install Node.js 18+\n- [ ] PM2 sudah terinstall global\n- [ ] Nginx sudah terinstall\n- [ ] Project sudah di-clone/upload ke `/var/www/`\n- [ ] File `.env` sudah dibuat dengan `UPLOADS_DIR=\"/var/www/uploads\"`\n- [ ] Folder `/var/www/uploads` sudah dibuat dengan permissions yang benar\n- [ ] `npm install` berhasil\n- [ ] `npm run build` berhasil\n- [ ] PM2 sudah start aplikasi di port 5000\n- [ ] PM2 startup & save sudah dijalankan\n- [ ] Nginx config sudah dibuat & diaktifkan\n- [ ] Firewall sudah allow port 80 & 443\n- [ ] SSL certificate sudah diinstall (jika pakai domain)\n- [ ] Test upload gambar berhasil\n- [ ] Gambar langsung muncul tanpa restart PM2\n\n---\n\n## ✨ SELESAI!\n\nSetelah semua langkah di atas, website Anda sudah:\n- ✅ Running di VPS dengan PM2\n- ✅ Accessible via Nginx\n- ✅ Upload gambar langsung muncul\n- ✅ Tidak perlu restart PM2 manual\n- ✅ Stabil untuk production\n\n**Jika ada masalah, cek bagian TROUBLESHOOTING di atas!**\n","size_bytes":7810},"src/app/admin/dashboard/popular-routes/page.tsx":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { toast } from 'sonner';\nimport { Plus, Trash2, ArrowUp, ArrowDown, Star, Upload, Image as ImageIcon } from 'lucide-react';\nimport { Switch } from '@/components/ui/switch';\nimport Image from 'next/image';\n\ninterface City {\n  id: string;\n  name: string;\n}\n\ninterface FlightRoute {\n  id: string;\n  airline: string;\n  departureCity: City;\n  arrivalCity: City;\n  totalPrice: number;\n  departureDate: string;\n  duration: string;\n}\n\ninterface PopularFlightRoute {\n  id: string;\n  flightRouteId: string;\n  displayOrder: number;\n  isActive: boolean;\n  imageUrl?: string | null;\n  flightRoute: FlightRoute;\n}\n\nexport default function PopularRoutesPage() {\n  const [popularRoutes, setPopularRoutes] = useState<PopularFlightRoute[]>([]);\n  const [allRoutes, setAllRoutes] = useState<FlightRoute[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedRouteId, setSelectedRouteId] = useState<string>('');\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string>('');\n  const [uploading, setUploading] = useState(false);\n\n  useEffect(() => {\n    fetchPopularRoutes();\n    fetchAllRoutes();\n  }, []);\n\n  const fetchPopularRoutes = async () => {\n    try {\n      const response = await fetch('/api/popular-flight-routes');\n      const data = await response.json();\n      setPopularRoutes(data);\n    } catch (error) {\n      console.error('Error fetching popular routes:', error);\n      toast.error('Gagal memuat data rute populer');\n    }\n  };\n\n  const fetchAllRoutes = async () => {\n    try {\n      const response = await fetch('/api/flight-routes');\n      const data = await response.json();\n      setAllRoutes(data);\n    } catch (error) {\n      console.error('Error fetching all routes:', error);\n      toast.error('Gagal memuat data rute penerbangan');\n    }\n  };\n\n  const handleImageSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setSelectedImage(file);\n      // Create preview\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const uploadImage = async (): Promise<string | null> => {\n    if (!selectedImage) return null;\n\n    setUploading(true);\n    try {\n      const formData = new FormData();\n      formData.append('file', selectedImage);\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        return data.url;\n      } else {\n        toast.error('Gagal upload gambar');\n        return null;\n      }\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      toast.error('Gagal upload gambar');\n      return null;\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleAdd = async () => {\n    if (!selectedRouteId) {\n      toast.error('Pilih rute penerbangan terlebih dahulu');\n      return;\n    }\n\n    try {\n      // Upload image first if selected\n      let imageUrl: string | null = null;\n      if (selectedImage) {\n        imageUrl = await uploadImage();\n        if (!imageUrl) {\n          return; // Stop if image upload failed\n        }\n      }\n\n      const maxOrder = popularRoutes.length > 0\n        ? Math.max(...popularRoutes.map(r => r.displayOrder))\n        : -1;\n\n      const response = await fetch('/api/popular-flight-routes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          flightRouteId: selectedRouteId,\n          displayOrder: maxOrder + 1,\n          isActive: true,\n          imageUrl,\n        }),\n      });\n\n      if (response.ok) {\n        toast.success('Rute berhasil ditambahkan ke populer');\n        setIsOpen(false);\n        setSelectedRouteId('');\n        setSelectedImage(null);\n        setImagePreview('');\n        fetchPopularRoutes();\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Gagal menambahkan rute populer');\n      }\n    } catch (error) {\n      console.error('Error adding popular route:', error);\n      toast.error('Gagal menambahkan rute populer');\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Apakah Anda yakin ingin menghapus rute ini dari populer?')) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/popular-flight-routes/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        toast.success('Rute berhasil dihapus dari populer');\n        fetchPopularRoutes();\n      } else {\n        throw new Error('Failed to delete popular route');\n      }\n    } catch (error) {\n      console.error('Error deleting popular route:', error);\n      toast.error('Gagal menghapus rute populer');\n    }\n  };\n\n  const handleToggleActive = async (id: string, currentStatus: boolean) => {\n    try {\n      const route = popularRoutes.find(r => r.id === id);\n      if (!route) return;\n\n      const response = await fetch(`/api/popular-flight-routes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          displayOrder: route.displayOrder,\n          isActive: !currentStatus,\n        }),\n      });\n\n      if (response.ok) {\n        toast.success(`Rute ${!currentStatus ? 'diaktifkan' : 'dinonaktifkan'}`);\n        fetchPopularRoutes();\n      } else {\n        throw new Error('Failed to toggle route');\n      }\n    } catch (error) {\n      console.error('Error toggling route:', error);\n      toast.error('Gagal mengubah status rute');\n    }\n  };\n\n  const handleMoveUp = async (id: string, currentOrder: number) => {\n    const previousRoute = popularRoutes.find(r => r.displayOrder === currentOrder - 1);\n    if (!previousRoute) return;\n\n    try {\n      await fetch(`/api/popular-flight-routes/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          displayOrder: currentOrder - 1,\n          isActive: popularRoutes.find(r => r.id === id)?.isActive,\n        }),\n      });\n\n      await fetch(`/api/popular-flight-routes/${previousRoute.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          displayOrder: currentOrder,\n          isActive: previousRoute.isActive,\n        }),\n      });\n\n      toast.success('Urutan berhasil diubah');\n      fetchPopularRoutes();\n    } catch (error) {\n      console.error('Error moving route:', error);\n      toast.error('Gagal mengubah urutan');\n    }\n  };\n\n  const handleMoveDown = async (id: string, currentOrder: number) => {\n    const nextRoute = popularRoutes.find(r => r.displayOrder === currentOrder + 1);\n    if (!nextRoute) return;\n\n    try {\n      await fetch(`/api/popular-flight-routes/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          displayOrder: currentOrder + 1,\n          isActive: popularRoutes.find(r => r.id === id)?.isActive,\n        }),\n      });\n\n      await fetch(`/api/popular-flight-routes/${nextRoute.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          displayOrder: currentOrder,\n          isActive: nextRoute.isActive,\n        }),\n      });\n\n      toast.success('Urutan berhasil diubah');\n      fetchPopularRoutes();\n    } catch (error) {\n      console.error('Error moving route:', error);\n      toast.error('Gagal mengubah urutan');\n    }\n  };\n\n  const formatRupiah = (price: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const availableRoutes = allRoutes.filter(\n    route => !popularRoutes.some(pr => pr.flightRouteId === route.id)\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Rute Populer</h1>\n          <p className=\"text-gray-600\">Kelola rute penerbangan yang ditampilkan di halaman utama</p>\n        </div>\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Tambah Rute Populer\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Tambah Rute ke Populer</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"route\">Pilih Rute Penerbangan</Label>\n                <Select value={selectedRouteId} onValueChange={setSelectedRouteId}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Pilih rute\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableRoutes.map((route) => (\n                      <SelectItem key={route.id} value={route.id}>\n                        {route.departureCity.name} → {route.arrivalCity.name} ({route.airline}) - {formatRupiah(Number(route.totalPrice))}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Upload Gambar Destinasi (Opsional)</Label>\n                <div className=\"border-2 border-dashed rounded-lg p-4 hover:border-primary transition-colors cursor-pointer\">\n                  <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleImageSelect}\n                    className=\"hidden\"\n                    id=\"image-upload\"\n                  />\n                  <label htmlFor=\"image-upload\" className=\"cursor-pointer flex flex-col items-center gap-2\">\n                    {imagePreview ? (\n                      <div className=\"relative w-full h-48\">\n                        <Image\n                          src={imagePreview}\n                          alt=\"Preview\"\n                          fill\n                          className=\"object-cover rounded-lg\"\n                        />\n                      </div>\n                    ) : (\n                      <>\n                        <Upload className=\"w-12 h-12 text-gray-400\" />\n                        <div className=\"text-center\">\n                          <p className=\"text-sm font-medium\">Klik untuk upload gambar</p>\n                          <p className=\"text-xs text-gray-500\">PNG, JPG, WEBP hingga 5MB</p>\n                        </div>\n                      </>\n                    )}\n                  </label>\n                </div>\n                {imagePreview && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setSelectedImage(null);\n                      setImagePreview('');\n                    }}\n                  >\n                    Hapus Gambar\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => {\n                  setIsOpen(false);\n                  setSelectedImage(null);\n                  setImagePreview('');\n                }}>\n                  Batal\n                </Button>\n                <Button onClick={handleAdd} disabled={uploading}>\n                  {uploading ? 'Mengupload...' : 'Tambah'}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {popularRoutes.map((popularRoute, index) => {\n          const route = popularRoute.flightRoute;\n          return (\n            <Card key={popularRoute.id} className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-4 flex-1\">\n                  <div className=\"bg-yellow-100 p-3 rounded-lg\">\n                    <Star className=\"w-6 h-6 text-yellow-600\" />\n                  </div>\n                  <div className=\"space-y-2 flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"px-2 py-1 bg-gray-100 rounded text-sm font-medium\">\n                        #{popularRoute.displayOrder + 1}\n                      </span>\n                      <h3 className=\"text-xl font-bold\">\n                        {route.departureCity.name} → {route.arrivalCity.name}\n                      </h3>\n                      <span className=\"px-2 py-1 bg-primary/20 rounded text-sm text-primary\">\n                        {route.airline}\n                      </span>\n                      {!popularRoute.isActive && (\n                        <span className=\"px-2 py-1 bg-red-100 rounded text-sm text-red-700\">\n                          Tidak Aktif\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4 text-sm text-gray-600\">\n                      <div>\n                        <span className=\"font-medium\">Harga:</span>{' '}\n                        {formatRupiah(Number(route.totalPrice))}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Durasi:</span> {route.duration}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Tanggal:</span>{' '}\n                        {new Date(route.departureDate).toLocaleDateString('id-ID')}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Label htmlFor={`active-${popularRoute.id}`}>Aktif:</Label>\n                      <Switch\n                        id={`active-${popularRoute.id}`}\n                        checked={popularRoute.isActive}\n                        onCheckedChange={() => handleToggleActive(popularRoute.id, popularRoute.isActive)}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex flex-col space-y-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handleMoveUp(popularRoute.id, popularRoute.displayOrder)}\n                    disabled={index === 0}\n                  >\n                    <ArrowUp className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handleMoveDown(popularRoute.id, popularRoute.displayOrder)}\n                    disabled={index === popularRoutes.length - 1}\n                  >\n                    <ArrowDown className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handleDelete(popularRoute.id)}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n        {popularRoutes.length === 0 && (\n          <Card className=\"p-12 text-center\">\n            <p className=\"text-gray-500\">Belum ada rute populer. Tambahkan rute untuk ditampilkan di halaman utama.</p>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":16323},"UPLOAD_BUG_FIX_SUMMARY.md":{"content":"# 🔧 Summary: Upload Bug Fix\n\n## ❌ Masalah Sebelumnya\n- Gambar yang di-upload di admin dashboard tidak langsung muncul\n- Perlu restart PM2 agar gambar bisa diakses\n- Penyebab: Next.js production mode serve static files dari `.next` folder yang di-build, bukan dari `public` folder\n\n## ✅ Solusi yang Diterapkan\nFile upload sekarang disimpan di **folder eksternal** (di luar `public/`) dan di-serve melalui **API route dinamis**.\n\n---\n\n## 📝 File yang Diubah\n\n### 1. **src/app/api/upload/route.ts**\n- ✏️ Ubah upload path dari `public/uploads` → `process.env.UPLOADS_DIR || ./uploads`\n- ✏️ Ubah return URL dari `/uploads/${filename}` → `/api/images/${filename}`\n\n### 2. **src/app/api/reviews/route.ts**\n- ✏️ Ubah upload path dari `public/uploads` → `process.env.UPLOADS_DIR || ./uploads`\n- ✏️ Ubah return URL dari `/uploads/${filename}` → `/api/images/${filename}`\n\n### 3. **src/app/api/cities/route.ts**\n- ✏️ Ubah upload path dari `public/uploads` → `process.env.UPLOADS_DIR || ./uploads`\n- ✏️ Ubah return URL dari `/uploads/${filename}` → `/api/images/${filename}`\n\n### 4. **src/app/api/cities/[id]/route.ts**\n- ✏️ Ubah upload path dari `public/uploads` → `process.env.UPLOADS_DIR || ./uploads`\n- ✏️ Ubah return URL dari `/uploads/${filename}` → `/api/images/${filename}`\n\n### 5. **src/app/api/images/[filename]/route.ts** *(BARU)*\n- 🆕 API route untuk serve gambar yang di-upload\n- Security: Prevent directory traversal attacks\n- Cache headers: `max-age=31536000, immutable`\n- Support: jpg, jpeg, png, gif, webp\n\n### 6. **.env**\n- ✏️ Rename `UPLOAD_DIR` → `UPLOADS_DIR` (untuk konsistensi)\n\n### 7. **.env.example** *(BARU)*\n- 🆕 Template environment variables dengan dokumentasi\n\n### 8. **.gitignore**\n- ✏️ Tambah `/uploads` dan `/public/uploads` ke gitignore\n\n### 9. **DEPLOYMENT_FIX.md** *(BARU)*\n- 🆕 Dokumentasi lengkap cara deploy fix ini di VPS\n- Include: Nginx config, troubleshooting, migration guide\n\n### 10. **migrate-uploads.sh** *(BARU)*\n- 🆕 Script untuk migrasi gambar lama dari `public/uploads` ke folder baru\n\n---\n\n## 🚀 Cara Deploy di VPS\n\n### Quick Steps:\n\n```bash\n# 1. Pull latest code\ncd /path/to/project\ngit pull origin main\n\n# 2. Update .env (optional, default: ./uploads)\necho 'UPLOADS_DIR=\"/var/www/uploads\"' >> .env\n\n# 3. Create uploads folder (jika pakai /var/www/uploads)\nsudo mkdir -p /var/www/uploads\nsudo chown -R $USER:$USER /var/www/uploads\nsudo chmod -R 755 /var/www/uploads\n\n# 4. Migrate old images (jika ada)\nbash migrate-uploads.sh\n\n# 5. Rebuild dan restart\nnpm run build\npm2 restart all\n\n# 6. Test\ncurl -I http://localhost:5000/api/images/test.jpg\n```\n\n### Nginx Config (Optional - untuk performance):\n```nginx\n# Serve images langsung dari Nginx\nlocation /api/images/ {\n    alias /var/www/uploads/;\n    expires 1y;\n    add_header Cache-Control \"public, immutable\";\n    rewrite ^/api/images/(.*)$ /$1 break;\n}\n```\n\n---\n\n## 🧪 Testing\n\n### Test 1: Upload gambar\n1. Login ke admin dashboard\n2. Upload gambar baru\n3. ✅ Gambar harus langsung muncul (tanpa restart PM2)\n\n### Test 2: Direct URL access\n```bash\ncurl -I https://your-domain.com/api/images/1234567890-image.jpg\n# Expected: HTTP 200, Content-Type: image/jpeg\n```\n\n### Test 3: PM2 logs\n```bash\npm2 logs\n# Tidak boleh ada error \"ENOENT\" atau \"404\"\n```\n\n---\n\n## 🔍 Troubleshooting\n\n### Gambar masih tidak muncul?\n\n**Cek 1: Permissions**\n```bash\nls -la /var/www/uploads/\n# Owner harus sama dengan user yang jalankan PM2\nsudo chown -R $USER:$USER /var/www/uploads\n```\n\n**Cek 2: Environment variable**\n```bash\n# Di VPS, cek apakah env var ter-load\npm2 env <app-id> | grep UPLOADS_DIR\n```\n\n**Cek 3: Logs**\n```bash\npm2 logs --lines 50\nsudo tail -f /var/log/nginx/error.log\n```\n\n**Cek 4: Manual test**\n```bash\n# Test upload API\ncurl -F \"file=@./test.jpg\" http://localhost:5000/api/upload\n\n# Test image serve API\ncurl -I http://localhost:5000/api/images/<filename>\n```\n\n---\n\n## 📊 Comparison\n\n### Before (Broken):\n```\n┌─────────┐     ┌──────────────┐     ┌──────────┐\n│ Upload  │ --> │ public/      │ --> │ /uploads │ ❌ Not accessible\n│         │     │ uploads/     │     │          │    until restart\n└─────────┘     └──────────────┘     └──────────┘\n```\n\n### After (Fixed):\n```\n┌─────────┐     ┌──────────────┐     ┌─────────────┐\n│ Upload  │ --> │ /var/www/    │ --> │ /api/images │ ✅ Immediately\n│         │     │ uploads/     │     │             │    accessible\n└─────────┘     └──────────────┘     └─────────────┘\n```\n\n---\n\n## 💡 Benefits\n\n1. ✅ **No restart needed** - Gambar langsung accessible setelah upload\n2. ✅ **Better security** - Upload folder terpisah dari Next.js bundle\n3. ✅ **Better performance** - Bisa di-serve langsung dari Nginx\n4. ✅ **Scalable** - Mudah migrasi ke CDN/S3 di masa depan\n5. ✅ **Cache-friendly** - Proper cache headers (1 year)\n\n---\n\n## 🔮 Future Improvements\n\n### Option 1: CDN Integration\n```typescript\n// Update src/app/api/upload/route.ts\n// Upload to CDN instead of local filesystem\nconst cdnUrl = await uploadToCDN(buffer, filename);\nreturn NextResponse.json({ url: cdnUrl });\n```\n\n### Option 2: Cloud Storage (S3, R2, etc.)\n```typescript\nimport { S3Client } from '@aws-sdk/client-s3';\n// Upload to S3\nconst s3Url = await uploadToS3(buffer, filename);\nreturn NextResponse.json({ url: s3Url });\n```\n\n### Option 3: Image Optimization\n```typescript\nimport sharp from 'sharp';\n// Compress & optimize image\nconst optimized = await sharp(buffer)\n  .resize(1920, 1080, { fit: 'inside' })\n  .webp({ quality: 80 })\n  .toBuffer();\n```\n\n---\n\n## ✅ Checklist Deploy\n\n- [ ] Pull latest code dari git\n- [ ] Update `.env` dengan `UPLOADS_DIR`\n- [ ] Buat folder uploads dengan permissions yang benar\n- [ ] Run migration script untuk gambar lama\n- [ ] `npm run build`\n- [ ] `pm2 restart all`\n- [ ] Test upload gambar baru\n- [ ] Test akses langsung ke `/api/images/...`\n- [ ] Update Nginx config (optional)\n- [ ] Test restart PM2 (gambar harus tetap muncul)\n- [ ] Monitor logs untuk error\n\n---\n\n**Status: ✅ READY TO DEPLOY**\n\nSetelah deploy, bug upload gambar akan selesai dan tidak perlu restart PM2 lagi! 🎉\n","size_bytes":6496},"src/components/admin/dynamic-fees-manager.tsx":{"content":"'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card } from '@/components/ui/card';\nimport { Plus, Trash2 } from 'lucide-react';\n\nexport interface OtherFee {\n  id: string;\n  name: string;\n  amount: number;\n}\n\ninterface DynamicFeesManagerProps {\n  fees: OtherFee[];\n  onChange: (fees: OtherFee[]) => void;\n}\n\nexport default function DynamicFeesManager({ fees, onChange }: DynamicFeesManagerProps) {\n  const [newFeeName, setNewFeeName] = useState('');\n  const [newFeeAmount, setNewFeeAmount] = useState('');\n\n  const handleAddFee = () => {\n    if (!newFeeName.trim() || !newFeeAmount) {\n      return;\n    }\n\n    const newFee: OtherFee = {\n      id: Date.now().toString(),\n      name: newFeeName.trim(),\n      amount: parseFloat(newFeeAmount),\n    };\n\n    onChange([...fees, newFee]);\n    setNewFeeName('');\n    setNewFeeAmount('');\n  };\n\n  const handleRemoveFee = (id: string) => {\n    onChange(fees.filter(fee => fee.id !== id));\n  };\n\n  const handleUpdateFee = (id: string, field: 'name' | 'amount', value: string) => {\n    onChange(\n      fees.map(fee => {\n        if (fee.id === id) {\n          if (field === 'name') {\n            return { ...fee, name: value };\n          } else {\n            return { ...fee, amount: parseFloat(value) || 0 };\n          }\n        }\n        return fee;\n      })\n    );\n  };\n\n  const formatRupiah = (amount: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <Label className=\"text-base font-semibold\">Rincian Biaya (Dinamis)</Label>\n        <span className=\"text-sm text-muted-foreground\">\n          Total: {formatRupiah(fees.reduce((sum, fee) => sum + fee.amount, 0))}\n        </span>\n      </div>\n      <p className=\"text-xs text-muted-foreground -mt-2\">\n        Tambahkan semua biaya penerbangan seperti: Base Fare, Tax, Service Fee, Baggage, WiFi, Meals, Insurance, dll.\n      </p>\n\n      {/* Existing Fees */}\n      {fees.length > 0 && (\n        <div className=\"space-y-2\">\n          {fees.map((fee) => (\n            <Card key={fee.id} className=\"p-3\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"flex-1 grid grid-cols-2 gap-2\">\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-xs\">Nama Biaya</Label>\n                    <Input\n                      type=\"text\"\n                      value={fee.name}\n                      onChange={(e) => handleUpdateFee(fee.id, 'name', e.target.value)}\n                      placeholder=\"Contoh: Base Fare, Tax, WiFi\"\n                      className=\"h-9\"\n                    />\n                  </div>\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-xs\">Jumlah (Rp)</Label>\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      value={fee.amount}\n                      onChange={(e) => handleUpdateFee(fee.id, 'amount', e.target.value)}\n                      placeholder=\"0\"\n                      className=\"h-9\"\n                    />\n                  </div>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => handleRemoveFee(fee.id)}\n                  className=\"mt-5 text-destructive hover:text-destructive hover:bg-destructive/10\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Add New Fee Form */}\n      <Card className=\"p-3 bg-muted/30\">\n        <div className=\"space-y-3\">\n          <div className=\"grid grid-cols-2 gap-2\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-xs\">Nama Biaya Baru</Label>\n              <Input\n                type=\"text\"\n                value={newFeeName}\n                onChange={(e) => setNewFeeName(e.target.value)}\n                placeholder=\"Contoh: Base Fare, Service Fee\"\n                className=\"h-9\"\n                onKeyPress={(e) => {\n                  if (e.key === 'Enter') {\n                    e.preventDefault();\n                    handleAddFee();\n                  }\n                }}\n              />\n            </div>\n            <div className=\"space-y-1\">\n              <Label className=\"text-xs\">Jumlah (Rp)</Label>\n              <Input\n                type=\"number\"\n                min=\"0\"\n                value={newFeeAmount}\n                onChange={(e) => setNewFeeAmount(e.target.value)}\n                placeholder=\"0\"\n                className=\"h-9\"\n                onKeyPress={(e) => {\n                  if (e.key === 'Enter') {\n                    e.preventDefault();\n                    handleAddFee();\n                  }\n                }}\n              />\n            </div>\n          </div>\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={handleAddFee}\n            className=\"w-full\"\n            disabled={!newFeeName.trim() || !newFeeAmount}\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Tambah Biaya\n          </Button>\n        </div>\n      </Card>\n\n      <p className=\"text-xs text-muted-foreground\">\n        💡 <strong>Tips:</strong> Tambahkan semua komponen biaya secara terpisah untuk transparansi penuh. \n        Contoh: Base Fare, Tax, Service Fee, Airport Fee, Fuel Surcharge, Baggage, WiFi, Meals, Insurance, Priority Boarding, dll.\n      </p>\n    </div>\n  );\n}\n","size_bytes":5881},"CHANGELOG.md":{"content":"# Changelog\n\n## Perubahan Terbaru\n\n### 1. Fix Error di Halaman /flights\n- Menambahkan null checking untuk semua properti yang mungkin undefined\n- Memperbaiki error \"Cannot read properties of undefined (reading 'toString')\"\n- Menambahkan fallback values untuk data yang kosong\n\n### 2. Fitur Rute Populer\n- Menambahkan tabel `popular_flight_routes` di database\n- Membuat API endpoints:\n  - `GET /api/popular-flight-routes` - Mendapatkan list rute populer\n  - `POST /api/popular-flight-routes` - Menambah rute populer\n  - `PUT /api/popular-flight-routes/[id]` - Update rute populer\n  - `DELETE /api/popular-flight-routes/[id]` - Hapus rute populer\n- Membuat halaman admin `/admin/dashboard/popular-routes` untuk mengelola rute populer\n- Fitur yang tersedia:\n  - Menambah rute ke daftar populer\n  - Mengatur urutan tampilan dengan tombol up/down\n  - Toggle aktif/nonaktif\n  - Hapus dari daftar populer\n- Update component `popular-flight-destinations` untuk menampilkan data dari `popular_flight_routes`\n\n### 3. Dynamic Fare Form (CRUD untuk Rincian Tarif)\n- Membuat component `DynamicFareForm` yang reusable\n- Fitur:\n  - Form tarif dasar dan pajak (fixed)\n  - Tambah biaya tambahan dinamis (nama dan jumlah)\n  - Hapus biaya tambahan\n  - Diskon\n  - Kalkulasi otomatis total harga\n  - Preview rincian biaya lengkap\n- Form ini dapat digunakan di halaman flight-routes\n\n### 4. Perubahan Database Schema\n- Menambahkan model `PopularFlightRoute` di Prisma schema\n- Menambahkan field `otherFees` (JSONB) di `FlightRoute` untuk menyimpan biaya tambahan dinamis\n\n## File Migration\n- `migrations/002_add_popular_flight_routes.sql` - SQL migration untuk tabel popular_flight_routes\n\n## Cara Menjalankan Migration\nJalankan migration SQL manual di database:\n```bash\npsql $DATABASE_URL < migrations/002_add_popular_flight_routes.sql\n```\n\nAtau update Prisma schema:\n```bash\nnpm run prisma:push\nnpm run prisma:generate\n```\n","size_bytes":1903},"src/app/api/auth/me/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const cookieStore = await cookies();\n    const userSession = cookieStore.get('user_session');\n\n    if (!userSession) {\n      return NextResponse.json({ user: null }, { status: 200 });\n    }\n\n    const user = JSON.parse(userSession.value);\n    return NextResponse.json({ user }, { status: 200 });\n  } catch (error) {\n    console.error('Error fetching user session:', error);\n    return NextResponse.json({ user: null }, { status: 200 });\n  }\n}\n","size_bytes":603},"src/app/api/payments/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { cookies } from 'next/headers';\n\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const cookieStore = await cookies();\n    const role = cookieStore.get('session_role')?.value;\n\n    if (role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const body = await request.json();\n    const { status, paymentProof } = body;\n\n    const updatedPayment = await prisma.payment.update({\n      where: { id: resolvedParams.id },\n      data: {\n        ...(status && { status }),\n        ...(paymentProof && { paymentProof }),\n      },\n      include: {\n        flightRoute: {\n          include: {\n            departureCity: true,\n            arrivalCity: true,\n          },\n        },\n      },\n    });\n\n    return NextResponse.json(updatedPayment);\n  } catch (error) {\n    console.error('Error updating payment:', error);\n    return NextResponse.json(\n      { error: 'Failed to update payment' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const cookieStore = await cookies();\n    const role = cookieStore.get('session_role')?.value;\n\n    if (role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n\n    await prisma.payment.delete({\n      where: { id: resolvedParams.id },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting payment:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete payment' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1868},"src/app/admin/dashboard/payments/page.tsx":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { toast } from 'sonner';\nimport { formatRupiah } from '@/lib/format';\nimport { Upload, Check, X, Clock, Trash2, Eye } from 'lucide-react';\n\ninterface Payment {\n  id: string;\n  userEmail: string;\n  userName: string;\n  amount: string;\n  status: string;\n  paymentProof: string | null;\n  createdAt: string;\n  updatedAt: string;\n  flightRoute: {\n    airline: string;\n    departureCity: { name: string };\n    arrivalCity: { name: string };\n    departureDate: string;\n  };\n}\n\nexport default function PaymentsPage() {\n  const [payments, setPayments] = useState<Payment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedPayment, setSelectedPayment] = useState<Payment | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [uploadingProof, setUploadingProof] = useState(false);\n  const [proofImageUrl, setProofImageUrl] = useState('');\n\n  useEffect(() => {\n    fetchPayments();\n  }, []);\n\n  const fetchPayments = async () => {\n    try {\n      const response = await fetch('/api/payments');\n      const data = await response.json();\n      setPayments(data);\n    } catch (error) {\n      console.error('Error fetching payments:', error);\n      toast.error('Gagal memuat data pembayaran');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpdateStatus = async (paymentId: string, newStatus: string) => {\n    try {\n      const response = await fetch(`/api/payments/${paymentId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status: newStatus }),\n      });\n\n      if (response.ok) {\n        toast.success('Status pembayaran berhasil diupdate');\n        fetchPayments();\n        setIsModalOpen(false);\n      } else {\n        toast.error('Gagal mengupdate status');\n      }\n    } catch (error) {\n      console.error('Error updating status:', error);\n      toast.error('Terjadi kesalahan');\n    }\n  };\n\n  const handleUploadProof = async (paymentId: string, file: File) => {\n    try {\n      setUploadingProof(true);\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const uploadResponse = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const uploadData = await uploadResponse.json();\n      const imageUrl = uploadData.url;\n\n      const response = await fetch(`/api/payments/${paymentId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ paymentProof: imageUrl }),\n      });\n\n      if (response.ok) {\n        toast.success('Bukti pembayaran berhasil diupload');\n        fetchPayments();\n        if (selectedPayment?.id === paymentId) {\n          setSelectedPayment({ ...selectedPayment, paymentProof: imageUrl });\n        }\n      } else {\n        toast.error('Gagal menyimpan bukti pembayaran');\n      }\n    } catch (error) {\n      console.error('Error uploading proof:', error);\n      toast.error('Gagal upload bukti pembayaran');\n    } finally {\n      setUploadingProof(false);\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file && selectedPayment) {\n      handleUploadProof(selectedPayment.id, file);\n    }\n  };\n\n  const handleDeletePayment = async (paymentId: string) => {\n    if (!confirm('Yakin ingin menghapus pembayaran ini?')) return;\n\n    try {\n      const response = await fetch(`/api/payments/${paymentId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        toast.success('Pembayaran berhasil dihapus');\n        fetchPayments();\n        setIsModalOpen(false);\n      } else {\n        toast.error('Gagal menghapus pembayaran');\n      }\n    } catch (error) {\n      console.error('Error deleting payment:', error);\n      toast.error('Terjadi kesalahan');\n    }\n  };\n\n  const openPaymentModal = (payment: Payment) => {\n    setSelectedPayment(payment);\n    setIsModalOpen(true);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig: Record<string, { label: string; className: string; icon: any }> = {\n      pending: { \n        label: 'Pending', \n        className: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',\n        icon: Clock \n      },\n      paid: { \n        label: 'Lunas', \n        className: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',\n        icon: Check \n      },\n      cancelled: { \n        label: 'Dibatalkan', \n        className: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300',\n        icon: X \n      },\n    };\n\n    const config = statusConfig[status] || statusConfig.pending;\n    const Icon = config.icon;\n\n    return (\n      <span className={`inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm font-medium ${config.className}`}>\n        <Icon className=\"w-4 h-4\" />\n        {config.label}\n      </span>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Manajemen Pembayaran</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Kelola status pembayaran dan bukti transfer\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {payments.map((payment) => (\n          <Card key={payment.id} className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"flex items-center gap-3\">\n                    <h3 className=\"font-semibold text-lg\">{payment.userName}</h3>\n                    {getStatusBadge(payment.status)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{payment.userEmail}</p>\n                  <p className=\"text-sm\">\n                    <span className=\"font-medium\">Rute:</span>{' '}\n                    {payment.flightRoute.departureCity.name} → {payment.flightRoute.arrivalCity.name} •{' '}\n                    {payment.flightRoute.airline}\n                  </p>\n                  <p className=\"text-sm\">\n                    <span className=\"font-medium\">Keberangkatan:</span>{' '}\n                    {new Date(payment.flightRoute.departureDate).toLocaleDateString('id-ID', {\n                      weekday: 'long',\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric',\n                    })}\n                  </p>\n                  <p className=\"text-2xl font-bold text-primary mt-2\">\n                    {formatRupiah(Number(payment.amount))}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Dibuat: {new Date(payment.createdAt).toLocaleString('id-ID')}\n                  </p>\n                </div>\n                <div className=\"flex flex-col gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => openPaymentModal(payment)}\n                  >\n                    <Eye className=\"w-4 h-4 mr-2\" />\n                    Detail\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n\n        {payments.length === 0 && (\n          <Card>\n            <CardContent className=\"py-12 text-center text-muted-foreground\">\n              Belum ada data pembayaran\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {selectedPayment && (\n        <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Detail Pembayaran</DialogTitle>\n            </DialogHeader>\n\n            <div className=\"space-y-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Nama</Label>\n                  <p className=\"font-medium\">{selectedPayment.userName}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Email</Label>\n                  <p className=\"font-medium\">{selectedPayment.userEmail}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Rute</Label>\n                  <p className=\"font-medium\">\n                    {selectedPayment.flightRoute.departureCity.name} →{' '}\n                    {selectedPayment.flightRoute.arrivalCity.name}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Maskapai</Label>\n                  <p className=\"font-medium\">{selectedPayment.flightRoute.airline}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Total</Label>\n                  <p className=\"text-2xl font-bold text-primary\">\n                    {formatRupiah(Number(selectedPayment.amount))}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Status</Label>\n                  <div className=\"mt-1\">{getStatusBadge(selectedPayment.status)}</div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Update Status</Label>\n                <Select\n                  value={selectedPayment.status}\n                  onValueChange={(value) =>\n                    handleUpdateStatus(selectedPayment.id, value)\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"paid\">Lunas</SelectItem>\n                    <SelectItem value=\"cancelled\">Dibatalkan</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Bukti Pembayaran</Label>\n                {selectedPayment.paymentProof ? (\n                  <div className=\"space-y-2\">\n                    <img\n                      src={selectedPayment.paymentProof}\n                      alt=\"Bukti Pembayaran\"\n                      className=\"w-full h-64 object-contain border rounded-lg\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      onClick={() => {\n                        const input = document.createElement('input');\n                        input.type = 'file';\n                        input.accept = 'image/*';\n                        input.onchange = (e) => handleFileSelect(e as any);\n                        input.click();\n                      }}\n                      disabled={uploadingProof}\n                    >\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      {uploadingProof ? 'Uploading...' : 'Ganti Bukti Pembayaran'}\n                    </Button>\n                  </div>\n                ) : (\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    onClick={() => {\n                      const input = document.createElement('input');\n                      input.type = 'file';\n                      input.accept = 'image/*';\n                      input.onchange = (e) => handleFileSelect(e as any);\n                      input.click();\n                    }}\n                    disabled={uploadingProof}\n                  >\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    {uploadingProof ? 'Uploading...' : 'Upload Bukti Pembayaran'}\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button\n                variant=\"destructive\"\n                onClick={() => handleDeletePayment(selectedPayment.id)}\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Hapus\n              </Button>\n              <Button variant=\"outline\" onClick={() => setIsModalOpen(false)}>\n                Tutup\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n","size_bytes":13304},"src/app/api/auth/callback/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\ninterface SSOValidateResponse {\n  status: boolean;\n  user?: {\n    id: number;\n    username: string;\n    email: string;\n    no_hp: string;\n  };\n}\n\nasync function validateSSOCode(code: string): Promise<SSOValidateResponse> {\n  try {\n    const response = await fetch(`https://ssoauth.darulgs.co.id/api/example/ssovalidate?code=${code}`);\n    \n    if (!response.ok) {\n      return { status: false };\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('SSO validation error:', error);\n    return { status: false };\n  }\n}\n\nfunction isValidReturnUrl(returnUrl: string | null, requestUrl: string): string {\n  if (!returnUrl) return '/';\n  \n  try {\n    if (returnUrl.startsWith('/') && !returnUrl.startsWith('//')) {\n      return returnUrl;\n    }\n    \n    const requestHost = new URL(requestUrl).host;\n    const returnUrlObj = new URL(returnUrl);\n    \n    if (returnUrlObj.host === requestHost) {\n      return returnUrl;\n    }\n    \n    return '/';\n  } catch {\n    return '/';\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const code = searchParams.get('code');\n    const returnUrl = searchParams.get('returnUrl');\n\n    if (!code) {\n      return NextResponse.redirect(new URL('/', request.url));\n    }\n\n    const ssoResponse = await validateSSOCode(code);\n\n    if (!ssoResponse.status || !ssoResponse.user) {\n      return NextResponse.redirect(new URL('/?error=sso_failed', request.url));\n    }\n\n    const ssoUser = ssoResponse.user;\n\n    let user = await prisma.user.findUnique({\n      where: { email: ssoUser.email }\n    });\n\n    if (!user) {\n      user = await prisma.user.create({\n        data: {\n          email: ssoUser.email,\n          username: ssoUser.username,\n          phoneNumber: ssoUser.no_hp,\n          ssoUserId: ssoUser.id,\n          lastLogin: new Date(),\n        }\n      });\n    } else {\n      user = await prisma.user.update({\n        where: { id: user.id },\n        data: {\n          lastLogin: new Date(),\n          username: ssoUser.username,\n          phoneNumber: ssoUser.no_hp,\n          ssoUserId: ssoUser.id,\n        }\n      });\n    }\n\n    const sessionData = {\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      username: user.username,\n      phoneNumber: user.phoneNumber,\n    };\n\n    const safeReturnUrl = isValidReturnUrl(returnUrl, request.url);\n    const response = NextResponse.redirect(new URL(safeReturnUrl, request.url));\n\n    response.cookies.set('user_session', JSON.stringify(sessionData), {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n      maxAge: 60 * 60 * 24 * 7,\n      path: '/',\n    });\n\n    response.cookies.set('user_email', user.email, {\n      httpOnly: false,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n      maxAge: 60 * 60 * 24 * 7,\n      path: '/',\n    });\n\n    return response;\n  } catch (error) {\n    console.error('SSO callback error:', error);\n    return NextResponse.redirect(new URL('/?error=server_error', request.url));\n  }\n}\n","size_bytes":3214},"src/lib/sso-auth.ts":{"content":"export interface SSOUser {\n  id: string;\n  email: string;\n  name: string | null;\n  username: string | null;\n  phoneNumber: string | null;\n}\n\nexport interface SSOValidateResponse {\n  status: boolean;\n  user?: {\n    id: number;\n    username: string;\n    email: string;\n    no_hp: string;\n  };\n}\n\nexport async function validateSSOCode(code: string): Promise<SSOValidateResponse> {\n  try {\n    const response = await fetch(`https://ssoauth.darulgs.co.id/api/example/ssovalidate?code=${code}`);\n    \n    if (!response.ok) {\n      return { status: false };\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('SSO validation error:', error);\n    return { status: false };\n  }\n}\n\nexport function getCurrentUser(): SSOUser | null {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    const cookie = document.cookie.split('; ').find(c => c.startsWith('user_email='));\n    if (!cookie) return null;\n    \n    const email = decodeURIComponent(cookie.split('=')[1] || '');\n    if (email) {\n      return { \n        id: '', \n        email, \n        name: null, \n        username: null, \n        phoneNumber: null \n      };\n    }\n    return null;\n  } catch {\n    return null;\n  }\n}\n\nexport async function getUserSession(): Promise<SSOUser | null> {\n  try {\n    const response = await fetch('/api/auth/me');\n    if (!response.ok) return null;\n    \n    const data = await response.json();\n    return data.user || null;\n  } catch {\n    return null;\n  }\n}\n\nexport function redirectToSSO(returnUrl?: string): void {\n  if (typeof window === 'undefined') return;\n  \n  const baseUrl = window.location.origin;\n  const callbackUrl = `${baseUrl}/auth/callback`;\n  const redirectUrl = returnUrl ? `${callbackUrl}?returnUrl=${encodeURIComponent(returnUrl)}` : callbackUrl;\n  \n  window.location.href = `https://ssoauth.darulgs.co.id/login?redirectUrl=${encodeURIComponent(redirectUrl)}`;\n}\n\nexport function logoutUser(): void {\n  if (typeof window === 'undefined') return;\n  \n  try {\n    document.cookie = 'user_session=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT';\n    document.cookie = 'user_email=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT';\n  } catch {}\n}\n","size_bytes":2202}},"version":2}